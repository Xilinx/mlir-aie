void matmul(int16_t *restrict v4, size_t m1, int16_t *restrict v5, size_t m2,
            int16_t *restrict v6, size_t m3) {
  size_t v7 = 0;
  size_t v8 = 64;
  size_t v9 = 1;
  for (size_t v10 = v7; v10 < v8; v10 += v9)
    chess_prepare_for_pipelining chess_loop_range(64, 64) {
      size_t v11 = 0;
      size_t v12 = 64;
      size_t v13 = 32;
      for (size_t v14 = v11; v14 < v12; v14 += v13)
        chess_prepare_for_pipelining chess_loop_range(2, 2) {
          v32int16 v15 = *(v32int16 *)(v6 + 64 * v10 + v14);
          v32acc32 v16 = ups_to_v32acc32(v15, 0);
          size_t v17 = 0;
          size_t v18 = 64;
          size_t v19 = 32;
          for (size_t v20 = v17; v20 < v18; v20 += v19)
            chess_prepare_for_pipelining chess_loop_range(2, 2) {
              v32int16 v21 = *(v32int16 *)(v4 + 64 * v10 + v20);
              v32int16 v22 = *(v32int16 *)(v5 + 64 * v20 + v14);
              v32int16 v23 = broadcast_elem(v21, 0);
              v16 = mac_elem_32(v23, v22, v16);
              size_t v24 = 1;
              size_t v25 = v20 + v24;
              v32int16 v26 = *(v32int16 *)(v5 + 64 * v25 + v14);
              v32int16 v27 = broadcast_elem(v21, 1);
              v16 = mac_elem_32(v27, v26, v16);
              size_t v28 = 2;
              size_t v29 = v20 + v28;
              v32int16 v30 = *(v32int16 *)(v5 + 64 * v29 + v14);
              v32int16 v31 = broadcast_elem(v21, 2);
              v16 = mac_elem_32(v31, v30, v16);
              size_t v32 = 3;
              size_t v33 = v20 + v32;
              v32int16 v34 = *(v32int16 *)(v5 + 64 * v33 + v14);
              v32int16 v35 = broadcast_elem(v21, 3);
              v16 = mac_elem_32(v35, v34, v16);
              size_t v36 = 4;
              size_t v37 = v20 + v36;
              v32int16 v38 = *(v32int16 *)(v5 + 64 * v37 + v14);
              v32int16 v39 = broadcast_elem(v21, 4);
              v16 = mac_elem_32(v39, v38, v16);
              size_t v40 = 5;
              size_t v41 = v20 + v40;
              v32int16 v42 = *(v32int16 *)(v5 + 64 * v41 + v14);
              v32int16 v43 = broadcast_elem(v21, 5);
              v16 = mac_elem_32(v43, v42, v16);
              size_t v44 = 6;
              size_t v45 = v20 + v44;
              v32int16 v46 = *(v32int16 *)(v5 + 64 * v45 + v14);
              v32int16 v47 = broadcast_elem(v21, 6);
              v16 = mac_elem_32(v47, v46, v16);
              size_t v48 = 7;
              size_t v49 = v20 + v48;
              v32int16 v50 = *(v32int16 *)(v5 + 64 * v49 + v14);
              v32int16 v51 = broadcast_elem(v21, 7);
              v16 = mac_elem_32(v51, v50, v16);
              size_t v52 = 8;
              size_t v53 = v20 + v52;
              v32int16 v54 = *(v32int16 *)(v5 + 64 * v53 + v14);
              v32int16 v55 = broadcast_elem(v21, 8);
              v16 = mac_elem_32(v55, v54, v16);
              size_t v56 = 9;
              size_t v57 = v20 + v56;
              v32int16 v58 = *(v32int16 *)(v5 + 64 * v57 + v14);
              v32int16 v59 = broadcast_elem(v21, 9);
              v16 = mac_elem_32(v59, v58, v16);
              size_t v60 = 10;
              size_t v61 = v20 + v60;
              v32int16 v62 = *(v32int16 *)(v5 + 64 * v61 + v14);
              v32int16 v63 = broadcast_elem(v21, 10);
              v16 = mac_elem_32(v63, v62, v16);
              size_t v64 = 11;
              size_t v65 = v20 + v64;
              v32int16 v66 = *(v32int16 *)(v5 + 64 * v65 + v14);
              v32int16 v67 = broadcast_elem(v21, 11);
              v16 = mac_elem_32(v67, v66, v16);
              size_t v68 = 12;
              size_t v69 = v20 + v68;
              v32int16 v70 = *(v32int16 *)(v5 + 64 * v69 + v14);
              v32int16 v71 = broadcast_elem(v21, 12);
              v16 = mac_elem_32(v71, v70, v16);
              size_t v72 = 13;
              size_t v73 = v20 + v72;
              v32int16 v74 = *(v32int16 *)(v5 + 64 * v73 + v14);
              v32int16 v75 = broadcast_elem(v21, 13);
              v16 = mac_elem_32(v75, v74, v16);
              size_t v76 = 14;
              size_t v77 = v20 + v76;
              v32int16 v78 = *(v32int16 *)(v5 + 64 * v77 + v14);
              v32int16 v79 = broadcast_elem(v21, 14);
              v16 = mac_elem_32(v79, v78, v16);
              size_t v80 = 15;
              size_t v81 = v20 + v80;
              v32int16 v82 = *(v32int16 *)(v5 + 64 * v81 + v14);
              v32int16 v83 = broadcast_elem(v21, 15);
              v16 = mac_elem_32(v83, v82, v16);
              size_t v84 = 16;
              size_t v85 = v20 + v84;
              v32int16 v86 = *(v32int16 *)(v5 + 64 * v85 + v14);
              v32int16 v87 = broadcast_elem(v21, 16);
              v16 = mac_elem_32(v87, v86, v16);
              size_t v88 = 17;
              size_t v89 = v20 + v88;
              v32int16 v90 = *(v32int16 *)(v5 + 64 * v89 + v14);
              v32int16 v91 = broadcast_elem(v21, 17);
              v16 = mac_elem_32(v91, v90, v16);
              size_t v92 = 18;
              size_t v93 = v20 + v92;
              v32int16 v94 = *(v32int16 *)(v5 + 64 * v93 + v14);
              v32int16 v95 = broadcast_elem(v21, 18);
              v16 = mac_elem_32(v95, v94, v16);
              size_t v96 = 19;
              size_t v97 = v20 + v96;
              v32int16 v98 = *(v32int16 *)(v5 + 64 * v97 + v14);
              v32int16 v99 = broadcast_elem(v21, 19);
              v16 = mac_elem_32(v99, v98, v16);
              size_t v100 = 20;
              size_t v101 = v20 + v100;
              v32int16 v102 = *(v32int16 *)(v5 + 64 * v101 + v14);
              v32int16 v103 = broadcast_elem(v21, 20);
              v16 = mac_elem_32(v103, v102, v16);
              size_t v104 = 21;
              size_t v105 = v20 + v104;
              v32int16 v106 = *(v32int16 *)(v5 + 64 * v105 + v14);
              v32int16 v107 = broadcast_elem(v21, 21);
              v16 = mac_elem_32(v107, v106, v16);
              size_t v108 = 22;
              size_t v109 = v20 + v108;
              v32int16 v110 = *(v32int16 *)(v5 + 64 * v109 + v14);
              v32int16 v111 = broadcast_elem(v21, 22);
              v16 = mac_elem_32(v111, v110, v16);
              size_t v112 = 23;
              size_t v113 = v20 + v112;
              v32int16 v114 = *(v32int16 *)(v5 + 64 * v113 + v14);
              v32int16 v115 = broadcast_elem(v21, 23);
              v16 = mac_elem_32(v115, v114, v16);
              size_t v116 = 24;
              size_t v117 = v20 + v116;
              v32int16 v118 = *(v32int16 *)(v5 + 64 * v117 + v14);
              v32int16 v119 = broadcast_elem(v21, 24);
              v16 = mac_elem_32(v119, v118, v16);
              size_t v120 = 25;
              size_t v121 = v20 + v120;
              v32int16 v122 = *(v32int16 *)(v5 + 64 * v121 + v14);
              v32int16 v123 = broadcast_elem(v21, 25);
              v16 = mac_elem_32(v123, v122, v16);
              size_t v124 = 26;
              size_t v125 = v20 + v124;
              v32int16 v126 = *(v32int16 *)(v5 + 64 * v125 + v14);
              v32int16 v127 = broadcast_elem(v21, 26);
              v16 = mac_elem_32(v127, v126, v16);
              size_t v128 = 27;
              size_t v129 = v20 + v128;
              v32int16 v130 = *(v32int16 *)(v5 + 64 * v129 + v14);
              v32int16 v131 = broadcast_elem(v21, 27);
              v16 = mac_elem_32(v131, v130, v16);
              size_t v132 = 28;
              size_t v133 = v20 + v132;
              v32int16 v134 = *(v32int16 *)(v5 + 64 * v133 + v14);
              v32int16 v135 = broadcast_elem(v21, 28);
              v16 = mac_elem_32(v135, v134, v16);
              size_t v136 = 29;
              size_t v137 = v20 + v136;
              v32int16 v138 = *(v32int16 *)(v5 + 64 * v137 + v14);
              v32int16 v139 = broadcast_elem(v21, 29);
              v16 = mac_elem_32(v139, v138, v16);
              size_t v140 = 30;
              size_t v141 = v20 + v140;
              v32int16 v142 = *(v32int16 *)(v5 + 64 * v141 + v14);
              v32int16 v143 = broadcast_elem(v21, 30);
              v16 = mac_elem_32(v143, v142, v16);
              size_t v144 = 31;
              size_t v145 = v20 + v144;
              v32int16 v146 = *(v32int16 *)(v5 + 64 * v145 + v14);
              v32int16 v147 = broadcast_elem(v21, 31);
              v16 = mac_elem_32(v147, v146, v16);
              v32int16 v148 = srs_to_v32int16(v16, 0);
              *(v32int16 *)(v6 + 64 * v10 + v14) = v148;
            }
        }
    }
  return;
}
