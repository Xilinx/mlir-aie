void matmul(int16_t *restrict v1, int16_t *restrict v2, int16_t *restrict v3) {
  size_t v4 = 0;
  size_t v5 = 64;
  size_t v6 = 1;
  for (size_t v7 = v4; v7 < v5; v7 += v6)
    chess_prepare_for_pipelining chess_loop_range(64, 64) {
      size_t v8 = 0;
      size_t v9 = 64;
      size_t v10 = 32;
      for (size_t v11 = v8; v11 < v9; v11 += v10)
        chess_prepare_for_pipelining chess_loop_range(2, 2) {
          v32int16 v12 = *(v32int16 *)(v3 + 64 * v7 + v11);
          v32acc32 v13 = ups_to_v32acc32(v12, 0);
          size_t v14 = 0;
          size_t v15 = 64;
          size_t v16 = 32;
          for (size_t v17 = v14; v17 < v15; v17 += v16)
            chess_prepare_for_pipelining chess_loop_range(2, 2) {
              v32int16 v18 = *(v32int16 *)(v1 + 64 * v7 + v17);
              v32int16 v19 = *(v32int16 *)(v2 + 64 * v17 + v11);
              v32int16 v20 = broadcast_elem(v18, 0);
              v13 = mac_elem_32(v20, v19, v13);
              size_t v21 = 1;
              size_t v22 = v17 + v21;
              v32int16 v23 = *(v32int16 *)(v2 + 64 * v22 + v11);
              v32int16 v24 = broadcast_elem(v18, 1);
              v13 = mac_elem_32(v24, v23, v13);
              size_t v25 = 2;
              size_t v26 = v17 + v25;
              v32int16 v27 = *(v32int16 *)(v2 + 64 * v26 + v11);
              v32int16 v28 = broadcast_elem(v18, 2);
              v13 = mac_elem_32(v28, v27, v13);
              size_t v29 = 3;
              size_t v30 = v17 + v29;
              v32int16 v31 = *(v32int16 *)(v2 + 64 * v30 + v11);
              v32int16 v32 = broadcast_elem(v18, 3);
              v13 = mac_elem_32(v32, v31, v13);
              size_t v33 = 4;
              size_t v34 = v17 + v33;
              v32int16 v35 = *(v32int16 *)(v2 + 64 * v34 + v11);
              v32int16 v36 = broadcast_elem(v18, 4);
              v13 = mac_elem_32(v36, v35, v13);
              size_t v37 = 5;
              size_t v38 = v17 + v37;
              v32int16 v39 = *(v32int16 *)(v2 + 64 * v38 + v11);
              v32int16 v40 = broadcast_elem(v18, 5);
              v13 = mac_elem_32(v40, v39, v13);
              size_t v41 = 6;
              size_t v42 = v17 + v41;
              v32int16 v43 = *(v32int16 *)(v2 + 64 * v42 + v11);
              v32int16 v44 = broadcast_elem(v18, 6);
              v13 = mac_elem_32(v44, v43, v13);
              size_t v45 = 7;
              size_t v46 = v17 + v45;
              v32int16 v47 = *(v32int16 *)(v2 + 64 * v46 + v11);
              v32int16 v48 = broadcast_elem(v18, 7);
              v13 = mac_elem_32(v48, v47, v13);
              size_t v49 = 8;
              size_t v50 = v17 + v49;
              v32int16 v51 = *(v32int16 *)(v2 + 64 * v50 + v11);
              v32int16 v52 = broadcast_elem(v18, 8);
              v13 = mac_elem_32(v52, v51, v13);
              size_t v53 = 9;
              size_t v54 = v17 + v53;
              v32int16 v55 = *(v32int16 *)(v2 + 64 * v54 + v11);
              v32int16 v56 = broadcast_elem(v18, 9);
              v13 = mac_elem_32(v56, v55, v13);
              size_t v57 = 10;
              size_t v58 = v17 + v57;
              v32int16 v59 = *(v32int16 *)(v2 + 64 * v58 + v11);
              v32int16 v60 = broadcast_elem(v18, 10);
              v13 = mac_elem_32(v60, v59, v13);
              size_t v61 = 11;
              size_t v62 = v17 + v61;
              v32int16 v63 = *(v32int16 *)(v2 + 64 * v62 + v11);
              v32int16 v64 = broadcast_elem(v18, 11);
              v13 = mac_elem_32(v64, v63, v13);
              size_t v65 = 12;
              size_t v66 = v17 + v65;
              v32int16 v67 = *(v32int16 *)(v2 + 64 * v66 + v11);
              v32int16 v68 = broadcast_elem(v18, 12);
              v13 = mac_elem_32(v68, v67, v13);
              size_t v69 = 13;
              size_t v70 = v17 + v69;
              v32int16 v71 = *(v32int16 *)(v2 + 64 * v70 + v11);
              v32int16 v72 = broadcast_elem(v18, 13);
              v13 = mac_elem_32(v72, v71, v13);
              size_t v73 = 14;
              size_t v74 = v17 + v73;
              v32int16 v75 = *(v32int16 *)(v2 + 64 * v74 + v11);
              v32int16 v76 = broadcast_elem(v18, 14);
              v13 = mac_elem_32(v76, v75, v13);
              size_t v77 = 15;
              size_t v78 = v17 + v77;
              v32int16 v79 = *(v32int16 *)(v2 + 64 * v78 + v11);
              v32int16 v80 = broadcast_elem(v18, 15);
              v13 = mac_elem_32(v80, v79, v13);
              size_t v81 = 16;
              size_t v82 = v17 + v81;
              v32int16 v83 = *(v32int16 *)(v2 + 64 * v82 + v11);
              v32int16 v84 = broadcast_elem(v18, 16);
              v13 = mac_elem_32(v84, v83, v13);
              size_t v85 = 17;
              size_t v86 = v17 + v85;
              v32int16 v87 = *(v32int16 *)(v2 + 64 * v86 + v11);
              v32int16 v88 = broadcast_elem(v18, 17);
              v13 = mac_elem_32(v88, v87, v13);
              size_t v89 = 18;
              size_t v90 = v17 + v89;
              v32int16 v91 = *(v32int16 *)(v2 + 64 * v90 + v11);
              v32int16 v92 = broadcast_elem(v18, 18);
              v13 = mac_elem_32(v92, v91, v13);
              size_t v93 = 19;
              size_t v94 = v17 + v93;
              v32int16 v95 = *(v32int16 *)(v2 + 64 * v94 + v11);
              v32int16 v96 = broadcast_elem(v18, 19);
              v13 = mac_elem_32(v96, v95, v13);
              size_t v97 = 20;
              size_t v98 = v17 + v97;
              v32int16 v99 = *(v32int16 *)(v2 + 64 * v98 + v11);
              v32int16 v100 = broadcast_elem(v18, 20);
              v13 = mac_elem_32(v100, v99, v13);
              size_t v101 = 21;
              size_t v102 = v17 + v101;
              v32int16 v103 = *(v32int16 *)(v2 + 64 * v102 + v11);
              v32int16 v104 = broadcast_elem(v18, 21);
              v13 = mac_elem_32(v104, v103, v13);
              size_t v105 = 22;
              size_t v106 = v17 + v105;
              v32int16 v107 = *(v32int16 *)(v2 + 64 * v106 + v11);
              v32int16 v108 = broadcast_elem(v18, 22);
              v13 = mac_elem_32(v108, v107, v13);
              size_t v109 = 23;
              size_t v110 = v17 + v109;
              v32int16 v111 = *(v32int16 *)(v2 + 64 * v110 + v11);
              v32int16 v112 = broadcast_elem(v18, 23);
              v13 = mac_elem_32(v112, v111, v13);
              size_t v113 = 24;
              size_t v114 = v17 + v113;
              v32int16 v115 = *(v32int16 *)(v2 + 64 * v114 + v11);
              v32int16 v116 = broadcast_elem(v18, 24);
              v13 = mac_elem_32(v116, v115, v13);
              size_t v117 = 25;
              size_t v118 = v17 + v117;
              v32int16 v119 = *(v32int16 *)(v2 + 64 * v118 + v11);
              v32int16 v120 = broadcast_elem(v18, 25);
              v13 = mac_elem_32(v120, v119, v13);
              size_t v121 = 26;
              size_t v122 = v17 + v121;
              v32int16 v123 = *(v32int16 *)(v2 + 64 * v122 + v11);
              v32int16 v124 = broadcast_elem(v18, 26);
              v13 = mac_elem_32(v124, v123, v13);
              size_t v125 = 27;
              size_t v126 = v17 + v125;
              v32int16 v127 = *(v32int16 *)(v2 + 64 * v126 + v11);
              v32int16 v128 = broadcast_elem(v18, 27);
              v13 = mac_elem_32(v128, v127, v13);
              size_t v129 = 28;
              size_t v130 = v17 + v129;
              v32int16 v131 = *(v32int16 *)(v2 + 64 * v130 + v11);
              v32int16 v132 = broadcast_elem(v18, 28);
              v13 = mac_elem_32(v132, v131, v13);
              size_t v133 = 29;
              size_t v134 = v17 + v133;
              v32int16 v135 = *(v32int16 *)(v2 + 64 * v134 + v11);
              v32int16 v136 = broadcast_elem(v18, 29);
              v13 = mac_elem_32(v136, v135, v13);
              size_t v137 = 30;
              size_t v138 = v17 + v137;
              v32int16 v139 = *(v32int16 *)(v2 + 64 * v138 + v11);
              v32int16 v140 = broadcast_elem(v18, 30);
              v13 = mac_elem_32(v140, v139, v13);
              size_t v141 = 31;
              size_t v142 = v17 + v141;
              v32int16 v143 = *(v32int16 *)(v2 + 64 * v142 + v11);
              v32int16 v144 = broadcast_elem(v18, 31);
              v13 = mac_elem_32(v144, v143, v13);
              v32int16 v145 = srs_to_v32int16(v13, 0);
              *(v32int16 *)(v3 + 64 * v7 + v11) = v145;
            }
        }
    }
  return;
}
