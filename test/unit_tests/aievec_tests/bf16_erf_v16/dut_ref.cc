#include <algorithm>
#include <math.h>
#include <stdio.h>

#define INPUT_FILE "data/in0.txt"
#define OUTPUT_FILE "data/out0.txt"
#define DATA_SIZE 1024
float in0[DATA_SIZE];
float out0[DATA_SIZE];
float out0_ref[DATA_SIZE];

bool checkItem(float val1, float val2, float relTol, float absTol) {
  return std::fabs(val1 - val2) <=
         std::max(relTol * std::max(std::fabs(val1), std::fabs(val2)), absTol);
}

bool checkData(float *data, float *expected, unsigned num, float relTol,
               float absTol) {
  bool ok;
  unsigned numErrors = 0;
  unsigned ind = 0;
  for (ind = 0; ind < num; ++ind) {
    ok = checkItem(data[ind], expected[ind], relTol, absTol);
    if (!ok && numErrors < 10) {
      printf("Mismatch at item %u: ", ind);
      printf(" expected: ");
      printf("%f ", expected[ind]);
      printf(" but got: ");
      printf("%f ", data[ind]);
      printf("\n");
    }
    if (!ok)
      numErrors++;
  }
  if (numErrors != 0) {
    printf("FAIL: %u mismatches\n", numErrors);
  }

  return numErrors == 0;
}

int main() {
  // Read the input file generated by chess compiler.
  FILE *fpin = fopen(INPUT_FILE, "r");
  if (fpin == NULL) {
    printf("failure opening file %s for reading\n", INPUT_FILE);
    return -1;
  }
  for (unsigned i = 0; i < DATA_SIZE; i++) {
    float val;
    fscanf(fpin, "%f", &val);
    in0[i] = val;
  }

  // Generate the ground truth result
  for (unsigned k = 0; k < DATA_SIZE; k += 1) {
    double in = in0[k];
    out0_ref[k] = (float)erf(in);
  }

  // Read output result generated by chess compiler, and compare it with the
  // ground truth.
  FILE *fpout = fopen(OUTPUT_FILE, "r");
  if (fpout == NULL) {
    printf("failure opening file %s for reading\n", OUTPUT_FILE);
    return -1;
  }

  for (unsigned i = 0; i < DATA_SIZE; i++) {
    float val;
    fscanf(fpout, "%f", &val);
    out0[i] = val;
  }

  bool ok = true;
  ok &= checkData(out0, out0_ref, DATA_SIZE, 9e-2, 0.0f);

  if (ok)
    printf("TEST PASSED\n");
  else
    printf("TEST FAILED\n");

  return ok ? 0 : 1;
}
