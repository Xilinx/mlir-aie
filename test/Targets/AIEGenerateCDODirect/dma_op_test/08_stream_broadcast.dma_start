// (c) Copyright 2023 Advanced Micro Devices, Inc.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception


module @test08_stream_broadcast {
  aie.device(ipu) {
    %tile_1_3 = aie.tile(1, 3)
    %tile_2_3 = aie.tile(2, 3)
    %tile_3_2 = aie.tile(3, 2)
    %tile_3_3 = aie.tile(3, 3)
    %tile_3_4 = aie.tile(3, 4)
    aie.flow(%tile_1_3, DMA : 0, %tile_3_2, DMA : 1)
    aie.flow(%tile_1_3, DMA : 0, %tile_3_3, DMA : 1)
    aie.flow(%tile_1_3, DMA : 0, %tile_3_4, DMA : 1)
    %a13 = aie.buffer(%tile_1_3) {sym_name = "a13"} : memref<256xi32>
    %b13 = aie.buffer(%tile_1_3) {sym_name = "b13"} : memref<256xi32>
    %input_lock = aie.lock(%tile_1_3, 3) {sym_name = "input_lock"}
    %interlock_1 = aie.lock(%tile_1_3, 5) {sym_name = "interlock_1"}
    %core_1_3 = aie.core(%tile_1_3) {
      aie.use_lock(%input_lock, Acquire, 1)
      aie.use_lock(%interlock_1, Acquire, 0)
      %c3 = arith.constant 3 : index
      %0 = memref.load %a13[%c3] : memref<256xi32>
      %1 = arith.addi %0, %0 : i32
      %2 = arith.addi %1, %0 : i32
      %3 = arith.addi %2, %0 : i32
      %4 = arith.addi %3, %0 : i32
      %c5 = arith.constant 5 : index
      memref.store %4, %b13[%c5] : memref<256xi32>
      aie.use_lock(%input_lock, Release, 0)
      aie.use_lock(%interlock_1, Release, 1)
      aie.end
    }
    %mem_1_3 = aie.mem(%tile_1_3) {
      %0 = aie.dma_start(MM2S, 0, ^bb1, ^bb2)
    ^bb1:  // pred: ^bb0
      aie.use_lock(%interlock_1, Acquire, 1)
      aie.dma_bd(%b13 : memref<256xi32>, 0, 256)
      aie.use_lock(%interlock_1, Release, 0)
      aie.next_bd ^bb2
    ^bb2:  // 2 preds: ^bb0, ^bb1
      aie.end
    }
    %a32 = aie.buffer(%tile_3_2) {sym_name = "a32"} : memref<256xi32>
    %b32 = aie.buffer(%tile_3_2) {sym_name = "b32"} : memref<256xi32>
    %interlock_2 = aie.lock(%tile_3_2, 6) {sym_name = "interlock_2"}
    %output_lock1 = aie.lock(%tile_3_2, 7) {sym_name = "output_lock1"}
    %core_3_2 = aie.core(%tile_3_2) {
      aie.use_lock(%interlock_2, Acquire, 1)
      aie.use_lock(%output_lock1, Acquire, 0)
      %c5 = arith.constant 5 : index
      %0 = memref.load %a32[%c5] : memref<256xi32>
      %1 = arith.addi %0, %0 : i32
      %2 = arith.addi %1, %0 : i32
      %c5_0 = arith.constant 5 : index
      memref.store %2, %b32[%c5_0] : memref<256xi32>
      aie.use_lock(%interlock_2, Release, 0)
      aie.use_lock(%output_lock1, Release, 1)
      aie.end
    }
    %mem_3_2 = aie.mem(%tile_3_2) {
      %0 = aie.dma_start(S2MM, 1, ^bb1, ^bb2)
    ^bb1:  // pred: ^bb0
      aie.use_lock(%interlock_2, Acquire, 0)
      aie.dma_bd(%a32 : memref<256xi32>, 0, 256)
      aie.use_lock(%interlock_2, Release, 1)
      aie.next_bd ^bb2
    ^bb2:  // 2 preds: ^bb0, ^bb1
      aie.end
    }
    %a33 = aie.buffer(%tile_3_3) {sym_name = "a33"} : memref<256xi32>
    %b33 = aie.buffer(%tile_3_3) {sym_name = "b33"} : memref<256xi32>
    %interlock_3 = aie.lock(%tile_3_3, 6) {sym_name = "interlock_3"}
    %output_lock2 = aie.lock(%tile_3_3, 7) {sym_name = "output_lock2"}
    %core_3_3 = aie.core(%tile_3_3) {
      aie.use_lock(%interlock_3, Acquire, 1)
      aie.use_lock(%output_lock2, Acquire, 0)
      %c5 = arith.constant 5 : index
      %0 = memref.load %a33[%c5] : memref<256xi32>
      %1 = arith.addi %0, %0 : i32
      %2 = arith.addi %1, %0 : i32
      %3 = arith.addi %2, %0 : i32
      %c5_0 = arith.constant 5 : index
      memref.store %3, %b33[%c5_0] : memref<256xi32>
      aie.use_lock(%interlock_3, Release, 0)
      aie.use_lock(%output_lock2, Release, 1)
      aie.end
    }
    %mem_3_3 = aie.mem(%tile_3_3) {
      %0 = aie.dma_start(S2MM, 1, ^bb1, ^bb2)
    ^bb1:  // pred: ^bb0
      aie.use_lock(%interlock_3, Acquire, 0)
      aie.dma_bd(%a33 : memref<256xi32>, 0, 256)
      aie.use_lock(%interlock_3, Release, 1)
      aie.next_bd ^bb2
    ^bb2:  // 2 preds: ^bb0, ^bb1
      aie.end
    }
    %a34 = aie.buffer(%tile_3_4) {sym_name = "a34"} : memref<256xi32>
    %b34 = aie.buffer(%tile_3_4) {sym_name = "b34"} : memref<256xi32>
    %interlock_4 = aie.lock(%tile_3_4, 6) {sym_name = "interlock_4"}
    %output_lock3 = aie.lock(%tile_3_4, 7) {sym_name = "output_lock3"}
    %core_3_4 = aie.core(%tile_3_4) {
      aie.use_lock(%interlock_4, Acquire, 1)
      aie.use_lock(%output_lock3, Acquire, 0)
      %c5 = arith.constant 5 : index
      %0 = memref.load %a34[%c5] : memref<256xi32>
      %1 = arith.addi %0, %0 : i32
      %2 = arith.addi %1, %0 : i32
      %3 = arith.addi %2, %0 : i32
      %4 = arith.addi %3, %0 : i32
      %c5_0 = arith.constant 5 : index
      memref.store %4, %b34[%c5_0] : memref<256xi32>
      aie.use_lock(%interlock_4, Release, 0)
      aie.use_lock(%output_lock3, Release, 1)
      aie.end
    }
    %mem_3_4 = aie.mem(%tile_3_4) {
      %0 = aie.dma_start(S2MM, 1, ^bb1, ^bb2)
    ^bb1:  // pred: ^bb0
      aie.use_lock(%interlock_4, Acquire, 0)
      aie.dma_bd(%a34 : memref<256xi32>, 0, 256)
      aie.use_lock(%interlock_4, Release, 1)
      aie.next_bd ^bb2
    ^bb2:  // 2 preds: ^bb0, ^bb1
      aie.end
    }
  }
}

