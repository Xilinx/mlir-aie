import numpy as np

from aie.helpers.tensortiler import TensorTile, TensorTileSequence, TensorTiler2D
from util import construct_test

# RUN: %python %s | FileCheck %s


# CHECK-LABEL: step_tiler_partial_row
@construct_test
def step_tiler_partial_row():

    # all row major
    # tile col major
    # tile group col major
    # iter col major
    # all col major
    # pattern repeat

    # CHECK: Pass!
    print("Pass!")


# CHECK-LABEL: step_tiler_partial_col
@construct_test
def step_tiler_partial_col():

    # all row major
    tensor_dims = (3 * 5 * 3, 2 * 7 * 2)
    tiles = TensorTiler2D.step_tiler(
        tensor_dims,
        tile_dims=(3, 2),
        tile_group_repeats=(5, 7),
        tile_group_steps=(2, 2),
        allow_partial=True,
    )
    assert len(tiles) == 8
    reference_tiles = reference_tiles = TensorTileSequence.from_tiles(
        [
            TensorTile(
                tensor_dims, offset=0, sizes=[5, 7, 3, 2], strides=[168, 4, 28, 1]
            ),
            TensorTile(
                tensor_dims, offset=2, sizes=[5, 7, 3, 2], strides=[168, 4, 28, 1]
            ),
            TensorTile(
                tensor_dims, offset=84, sizes=[5, 7, 3, 2], strides=[168, 4, 28, 1]
            ),
            TensorTile(
                tensor_dims, offset=86, sizes=[5, 7, 3, 2], strides=[168, 4, 28, 1]
            ),
            TensorTile(
                tensor_dims, offset=840, sizes=[3, 7, 3, 2], strides=[168, 4, 28, 1]
            ),
            TensorTile(
                tensor_dims, offset=842, sizes=[3, 7, 3, 2], strides=[168, 4, 28, 1]
            ),
            TensorTile(
                tensor_dims, offset=924, sizes=[2, 7, 3, 2], strides=[168, 4, 28, 1]
            ),
            TensorTile(
                tensor_dims, offset=926, sizes=[2, 7, 3, 2], strides=[168, 4, 28, 1]
            ),
        ]
    )
    assert tiles == reference_tiles

    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    1,  210,  211,    6,    7,  216,  217,   12,   13,  222,  223,   18,   19,  228,  229,   24,   25,  234,  235,   30,   31,  240,  241,   36,   37,  246,  247],
        [   2,    3,  212,  213,    8,    9,  218,  219,   14,   15,  224,  225,   20,   21,  230,  231,   26,   27,  236,  237,   32,   33,  242,  243,   38,   39,  248,  249],
        [   4,    5,  214,  215,   10,   11,  220,  221,   16,   17,  226,  227,   22,   23,  232,  233,   28,   29,  238,  239,   34,   35,  244,  245,   40,   41,  250,  251],
        [ 420,  421,  630,  631,  426,  427,  636,  637,  432,  433,  642,  643,  438,  439,  648,  649,  444,  445,  654,  655,  450,  451,  660,  661,  456,  457,  666,  667],
        [ 422,  423,  632,  633,  428,  429,  638,  639,  434,  435,  644,  645,  440,  441,  650,  651,  446,  447,  656,  657,  452,  453,  662,  663,  458,  459,  668,  669],
        [ 424,  425,  634,  635,  430,  431,  640,  641,  436,  437,  646,  647,  442,  443,  652,  653,  448,  449,  658,  659,  454,  455,  664,  665,  460,  461,  670,  671],
        [  42,   43,  252,  253,   48,   49,  258,  259,   54,   55,  264,  265,   60,   61,  270,  271,   66,   67,  276,  277,   72,   73,  282,  283,   78,   79,  288,  289],
        [  44,   45,  254,  255,   50,   51,  260,  261,   56,   57,  266,  267,   62,   63,  272,  273,   68,   69,  278,  279,   74,   75,  284,  285,   80,   81,  290,  291],
        [  46,   47,  256,  257,   52,   53,  262,  263,   58,   59,  268,  269,   64,   65,  274,  275,   70,   71,  280,  281,   76,   77,  286,  287,   82,   83,  292,  293],
        [ 462,  463,  672,  673,  468,  469,  678,  679,  474,  475,  684,  685,  480,  481,  690,  691,  486,  487,  696,  697,  492,  493,  702,  703,  498,  499,  708,  709],
        [ 464,  465,  674,  675,  470,  471,  680,  681,  476,  477,  686,  687,  482,  483,  692,  693,  488,  489,  698,  699,  494,  495,  704,  705,  500,  501,  710,  711],
        [ 466,  467,  676,  677,  472,  473,  682,  683,  478,  479,  688,  689,  484,  485,  694,  695,  490,  491,  700,  701,  496,  497,  706,  707,  502,  503,  712,  713],
        [  84,   85,  294,  295,   90,   91,  300,  301,   96,   97,  306,  307,  102,  103,  312,  313,  108,  109,  318,  319,  114,  115,  324,  325,  120,  121,  330,  331],
        [  86,   87,  296,  297,   92,   93,  302,  303,   98,   99,  308,  309,  104,  105,  314,  315,  110,  111,  320,  321,  116,  117,  326,  327,  122,  123,  332,  333],
        [  88,   89,  298,  299,   94,   95,  304,  305,  100,  101,  310,  311,  106,  107,  316,  317,  112,  113,  322,  323,  118,  119,  328,  329,  124,  125,  334,  335],
        [ 504,  505,  714,  715,  510,  511,  720,  721,  516,  517,  726,  727,  522,  523,  732,  733,  528,  529,  738,  739,  534,  535,  744,  745,  540,  541,  750,  751],
        [ 506,  507,  716,  717,  512,  513,  722,  723,  518,  519,  728,  729,  524,  525,  734,  735,  530,  531,  740,  741,  536,  537,  746,  747,  542,  543,  752,  753],
        [ 508,  509,  718,  719,  514,  515,  724,  725,  520,  521,  730,  731,  526,  527,  736,  737,  532,  533,  742,  743,  538,  539,  748,  749,  544,  545,  754,  755],
        [ 126,  127,  336,  337,  132,  133,  342,  343,  138,  139,  348,  349,  144,  145,  354,  355,  150,  151,  360,  361,  156,  157,  366,  367,  162,  163,  372,  373],
        [ 128,  129,  338,  339,  134,  135,  344,  345,  140,  141,  350,  351,  146,  147,  356,  357,  152,  153,  362,  363,  158,  159,  368,  369,  164,  165,  374,  375],
        [ 130,  131,  340,  341,  136,  137,  346,  347,  142,  143,  352,  353,  148,  149,  358,  359,  154,  155,  364,  365,  160,  161,  370,  371,  166,  167,  376,  377],
        [ 546,  547,  756,  757,  552,  553,  762,  763,  558,  559,  768,  769,  564,  565,  774,  775,  570,  571,  780,  781,  576,  577,  786,  787,  582,  583,  792,  793],
        [ 548,  549,  758,  759,  554,  555,  764,  765,  560,  561,  770,  771,  566,  567,  776,  777,  572,  573,  782,  783,  578,  579,  788,  789,  584,  585,  794,  795],
        [ 550,  551,  760,  761,  556,  557,  766,  767,  562,  563,  772,  773,  568,  569,  778,  779,  574,  575,  784,  785,  580,  581,  790,  791,  586,  587,  796,  797],
        [ 168,  169,  378,  379,  174,  175,  384,  385,  180,  181,  390,  391,  186,  187,  396,  397,  192,  193,  402,  403,  198,  199,  408,  409,  204,  205,  414,  415],
        [ 170,  171,  380,  381,  176,  177,  386,  387,  182,  183,  392,  393,  188,  189,  398,  399,  194,  195,  404,  405,  200,  201,  410,  411,  206,  207,  416,  417],
        [ 172,  173,  382,  383,  178,  179,  388,  389,  184,  185,  394,  395,  190,  191,  400,  401,  196,  197,  406,  407,  202,  203,  412,  413,  208,  209,  418,  419],
        [ 588,  589,  798,  799,  594,  595,  804,  805,  600,  601,  810,  811,  606,  607,  816,  817,  612,  613,  822,  823,  618,  619,  828,  829,  624,  625,  834,  835],
        [ 590,  591,  800,  801,  596,  597,  806,  807,  602,  603,  812,  813,  608,  609,  818,  819,  614,  615,  824,  825,  620,  621,  830,  831,  626,  627,  836,  837],
        [ 592,  593,  802,  803,  598,  599,  808,  809,  604,  605,  814,  815,  610,  611,  820,  821,  616,  617,  826,  827,  622,  623,  832,  833,  628,  629,  838,  839],
        [ 840,  841,  966,  967,  846,  847,  972,  973,  852,  853,  978,  979,  858,  859,  984,  985,  864,  865,  990,  991,  870,  871,  996,  997,  876,  877, 1002, 1003],
        [ 842,  843,  968,  969,  848,  849,  974,  975,  854,  855,  980,  981,  860,  861,  986,  987,  866,  867,  992,  993,  872,  873,  998,  999,  878,  879, 1004, 1005],
        [ 844,  845,  970,  971,  850,  851,  976,  977,  856,  857,  982,  983,  862,  863,  988,  989,  868,  869,  994,  995,  874,  875, 1000, 1001,  880,  881, 1006, 1007],
        [1092, 1093, 1176, 1177, 1098, 1099, 1182, 1183, 1104, 1105, 1188, 1189, 1110, 1111, 1194, 1195, 1116, 1117, 1200, 1201, 1122, 1123, 1206, 1207, 1128, 1129, 1212, 1213],
        [1094, 1095, 1178, 1179, 1100, 1101, 1184, 1185, 1106, 1107, 1190, 1191, 1112, 1113, 1196, 1197, 1118, 1119, 1202, 1203, 1124, 1125, 1208, 1209, 1130, 1131, 1214, 1215],
        [1096, 1097, 1180, 1181, 1102, 1103, 1186, 1187, 1108, 1109, 1192, 1193, 1114, 1115, 1198, 1199, 1120, 1121, 1204, 1205, 1126, 1127, 1210, 1211, 1132, 1133, 1216, 1217],
        [ 882,  883, 1008, 1009,  888,  889, 1014, 1015,  894,  895, 1020, 1021,  900,  901, 1026, 1027,  906,  907, 1032, 1033,  912,  913, 1038, 1039,  918,  919, 1044, 1045],
        [ 884,  885, 1010, 1011,  890,  891, 1016, 1017,  896,  897, 1022, 1023,  902,  903, 1028, 1029,  908,  909, 1034, 1035,  914,  915, 1040, 1041,  920,  921, 1046, 1047],
        [ 886,  887, 1012, 1013,  892,  893, 1018, 1019,  898,  899, 1024, 1025,  904,  905, 1030, 1031,  910,  911, 1036, 1037,  916,  917, 1042, 1043,  922,  923, 1048, 1049],
        [1134, 1135, 1218, 1219, 1140, 1141, 1224, 1225, 1146, 1147, 1230, 1231, 1152, 1153, 1236, 1237, 1158, 1159, 1242, 1243, 1164, 1165, 1248, 1249, 1170, 1171, 1254, 1255],
        [1136, 1137, 1220, 1221, 1142, 1143, 1226, 1227, 1148, 1149, 1232, 1233, 1154, 1155, 1238, 1239, 1160, 1161, 1244, 1245, 1166, 1167, 1250, 1251, 1172, 1173, 1256, 1257],
        [1138, 1139, 1222, 1223, 1144, 1145, 1228, 1229, 1150, 1151, 1234, 1235, 1156, 1157, 1240, 1241, 1162, 1163, 1246, 1247, 1168, 1169, 1252, 1253, 1174, 1175, 1258, 1259],
        [ 924,  925, 1050, 1051,  930,  931, 1056, 1057,  936,  937, 1062, 1063,  942,  943, 1068, 1069,  948,  949, 1074, 1075,  954,  955, 1080, 1081,  960,  961, 1086, 1087],
        [ 926,  927, 1052, 1053,  932,  933, 1058, 1059,  938,  939, 1064, 1065,  944,  945, 1070, 1071,  950,  951, 1076, 1077,  956,  957, 1082, 1083,  962,  963, 1088, 1089],
        [ 928,  929, 1054, 1055,  934,  935, 1060, 1061,  940,  941, 1066, 1067,  946,  947, 1072, 1073,  952,  953, 1078, 1079,  958,  959, 1084, 1085,  964,  965, 1090, 1091]])
    # fmt: on
    access_order, access_count = tiles.access_tensors()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()
    # tile col major
    # tile group col major
    # iter col major
    # all col major
    # pattern repeat

    # CHECK: Pass!
    print("Pass!")


# CHECK-LABEL: step_tiler_partial_both
@construct_test
def step_tiler_partial_both():

    # all row major
    # tile col major
    # tile group col major
    # iter col major
    # all col major
    # pattern repeat

    # CHECK: Pass!
    print("Pass!")
