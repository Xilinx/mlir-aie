import numpy as np

from aie.helpers.tensortiler import TensorTile, TensorTileSequence, TensorTiler2D
from util import construct_test

# RUN: %python %s | FileCheck %s


# CHECK-LABEL: step_tiler_partial_row
@construct_test
def step_tiler_partial_row():

    # all row major
    # tile col major
    # tile group col major
    # iter col major
    # all col major
    # pattern repeat

    # CHECK: Pass!
    print("Pass!")


# CHECK-LABEL: step_tiler_partial_col
@construct_test
def step_tiler_partial_col():

    # all row major
    tensor_dims = (3 * 5 * 3, 2 * 7 * 2)
    tiles = TensorTiler2D.step_tiler(
        tensor_dims,
        tile_dims=(3, 2),
        tile_group_repeats=(5, 7),
        tile_group_steps=(2, 2),
        allow_partial=True,
    )
    assert len(tiles) == 8
    reference_tiles = reference_tiles = TensorTileSequence.from_tiles(
        [
            TensorTile(
                tensor_dims, offset=0, sizes=[5, 7, 3, 2], strides=[168, 4, 28, 1]
            ),
            TensorTile(
                tensor_dims, offset=2, sizes=[5, 7, 3, 2], strides=[168, 4, 28, 1]
            ),
            TensorTile(
                tensor_dims, offset=84, sizes=[5, 7, 3, 2], strides=[168, 4, 28, 1]
            ),
            TensorTile(
                tensor_dims, offset=86, sizes=[5, 7, 3, 2], strides=[168, 4, 28, 1]
            ),
            TensorTile(
                tensor_dims, offset=840, sizes=[3, 7, 3, 2], strides=[168, 4, 28, 1]
            ),
            TensorTile(
                tensor_dims, offset=842, sizes=[3, 7, 3, 2], strides=[168, 4, 28, 1]
            ),
            TensorTile(
                tensor_dims, offset=924, sizes=[2, 7, 3, 2], strides=[168, 4, 28, 1]
            ),
            TensorTile(
                tensor_dims, offset=926, sizes=[2, 7, 3, 2], strides=[168, 4, 28, 1]
            ),
        ]
    )
    assert tiles == reference_tiles

    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    1,  210,  211,    6,    7,  216,  217,   12,   13,  222,  223,   18,   19,  228,  229,   24,   25,  234,  235,   30,   31,  240,  241,   36,   37,  246,  247],
        [   2,    3,  212,  213,    8,    9,  218,  219,   14,   15,  224,  225,   20,   21,  230,  231,   26,   27,  236,  237,   32,   33,  242,  243,   38,   39,  248,  249],
        [   4,    5,  214,  215,   10,   11,  220,  221,   16,   17,  226,  227,   22,   23,  232,  233,   28,   29,  238,  239,   34,   35,  244,  245,   40,   41,  250,  251],
        [ 420,  421,  630,  631,  426,  427,  636,  637,  432,  433,  642,  643,  438,  439,  648,  649,  444,  445,  654,  655,  450,  451,  660,  661,  456,  457,  666,  667],
        [ 422,  423,  632,  633,  428,  429,  638,  639,  434,  435,  644,  645,  440,  441,  650,  651,  446,  447,  656,  657,  452,  453,  662,  663,  458,  459,  668,  669],
        [ 424,  425,  634,  635,  430,  431,  640,  641,  436,  437,  646,  647,  442,  443,  652,  653,  448,  449,  658,  659,  454,  455,  664,  665,  460,  461,  670,  671],
        [  42,   43,  252,  253,   48,   49,  258,  259,   54,   55,  264,  265,   60,   61,  270,  271,   66,   67,  276,  277,   72,   73,  282,  283,   78,   79,  288,  289],
        [  44,   45,  254,  255,   50,   51,  260,  261,   56,   57,  266,  267,   62,   63,  272,  273,   68,   69,  278,  279,   74,   75,  284,  285,   80,   81,  290,  291],
        [  46,   47,  256,  257,   52,   53,  262,  263,   58,   59,  268,  269,   64,   65,  274,  275,   70,   71,  280,  281,   76,   77,  286,  287,   82,   83,  292,  293],
        [ 462,  463,  672,  673,  468,  469,  678,  679,  474,  475,  684,  685,  480,  481,  690,  691,  486,  487,  696,  697,  492,  493,  702,  703,  498,  499,  708,  709],
        [ 464,  465,  674,  675,  470,  471,  680,  681,  476,  477,  686,  687,  482,  483,  692,  693,  488,  489,  698,  699,  494,  495,  704,  705,  500,  501,  710,  711],
        [ 466,  467,  676,  677,  472,  473,  682,  683,  478,  479,  688,  689,  484,  485,  694,  695,  490,  491,  700,  701,  496,  497,  706,  707,  502,  503,  712,  713],
        [  84,   85,  294,  295,   90,   91,  300,  301,   96,   97,  306,  307,  102,  103,  312,  313,  108,  109,  318,  319,  114,  115,  324,  325,  120,  121,  330,  331],
        [  86,   87,  296,  297,   92,   93,  302,  303,   98,   99,  308,  309,  104,  105,  314,  315,  110,  111,  320,  321,  116,  117,  326,  327,  122,  123,  332,  333],
        [  88,   89,  298,  299,   94,   95,  304,  305,  100,  101,  310,  311,  106,  107,  316,  317,  112,  113,  322,  323,  118,  119,  328,  329,  124,  125,  334,  335],
        [ 504,  505,  714,  715,  510,  511,  720,  721,  516,  517,  726,  727,  522,  523,  732,  733,  528,  529,  738,  739,  534,  535,  744,  745,  540,  541,  750,  751],
        [ 506,  507,  716,  717,  512,  513,  722,  723,  518,  519,  728,  729,  524,  525,  734,  735,  530,  531,  740,  741,  536,  537,  746,  747,  542,  543,  752,  753],
        [ 508,  509,  718,  719,  514,  515,  724,  725,  520,  521,  730,  731,  526,  527,  736,  737,  532,  533,  742,  743,  538,  539,  748,  749,  544,  545,  754,  755],
        [ 126,  127,  336,  337,  132,  133,  342,  343,  138,  139,  348,  349,  144,  145,  354,  355,  150,  151,  360,  361,  156,  157,  366,  367,  162,  163,  372,  373],
        [ 128,  129,  338,  339,  134,  135,  344,  345,  140,  141,  350,  351,  146,  147,  356,  357,  152,  153,  362,  363,  158,  159,  368,  369,  164,  165,  374,  375],
        [ 130,  131,  340,  341,  136,  137,  346,  347,  142,  143,  352,  353,  148,  149,  358,  359,  154,  155,  364,  365,  160,  161,  370,  371,  166,  167,  376,  377],
        [ 546,  547,  756,  757,  552,  553,  762,  763,  558,  559,  768,  769,  564,  565,  774,  775,  570,  571,  780,  781,  576,  577,  786,  787,  582,  583,  792,  793],
        [ 548,  549,  758,  759,  554,  555,  764,  765,  560,  561,  770,  771,  566,  567,  776,  777,  572,  573,  782,  783,  578,  579,  788,  789,  584,  585,  794,  795],
        [ 550,  551,  760,  761,  556,  557,  766,  767,  562,  563,  772,  773,  568,  569,  778,  779,  574,  575,  784,  785,  580,  581,  790,  791,  586,  587,  796,  797],
        [ 168,  169,  378,  379,  174,  175,  384,  385,  180,  181,  390,  391,  186,  187,  396,  397,  192,  193,  402,  403,  198,  199,  408,  409,  204,  205,  414,  415],
        [ 170,  171,  380,  381,  176,  177,  386,  387,  182,  183,  392,  393,  188,  189,  398,  399,  194,  195,  404,  405,  200,  201,  410,  411,  206,  207,  416,  417],
        [ 172,  173,  382,  383,  178,  179,  388,  389,  184,  185,  394,  395,  190,  191,  400,  401,  196,  197,  406,  407,  202,  203,  412,  413,  208,  209,  418,  419],
        [ 588,  589,  798,  799,  594,  595,  804,  805,  600,  601,  810,  811,  606,  607,  816,  817,  612,  613,  822,  823,  618,  619,  828,  829,  624,  625,  834,  835],
        [ 590,  591,  800,  801,  596,  597,  806,  807,  602,  603,  812,  813,  608,  609,  818,  819,  614,  615,  824,  825,  620,  621,  830,  831,  626,  627,  836,  837],
        [ 592,  593,  802,  803,  598,  599,  808,  809,  604,  605,  814,  815,  610,  611,  820,  821,  616,  617,  826,  827,  622,  623,  832,  833,  628,  629,  838,  839],
        [ 840,  841,  966,  967,  846,  847,  972,  973,  852,  853,  978,  979,  858,  859,  984,  985,  864,  865,  990,  991,  870,  871,  996,  997,  876,  877, 1002, 1003],
        [ 842,  843,  968,  969,  848,  849,  974,  975,  854,  855,  980,  981,  860,  861,  986,  987,  866,  867,  992,  993,  872,  873,  998,  999,  878,  879, 1004, 1005],
        [ 844,  845,  970,  971,  850,  851,  976,  977,  856,  857,  982,  983,  862,  863,  988,  989,  868,  869,  994,  995,  874,  875, 1000, 1001,  880,  881, 1006, 1007],
        [1092, 1093, 1176, 1177, 1098, 1099, 1182, 1183, 1104, 1105, 1188, 1189, 1110, 1111, 1194, 1195, 1116, 1117, 1200, 1201, 1122, 1123, 1206, 1207, 1128, 1129, 1212, 1213],
        [1094, 1095, 1178, 1179, 1100, 1101, 1184, 1185, 1106, 1107, 1190, 1191, 1112, 1113, 1196, 1197, 1118, 1119, 1202, 1203, 1124, 1125, 1208, 1209, 1130, 1131, 1214, 1215],
        [1096, 1097, 1180, 1181, 1102, 1103, 1186, 1187, 1108, 1109, 1192, 1193, 1114, 1115, 1198, 1199, 1120, 1121, 1204, 1205, 1126, 1127, 1210, 1211, 1132, 1133, 1216, 1217],
        [ 882,  883, 1008, 1009,  888,  889, 1014, 1015,  894,  895, 1020, 1021,  900,  901, 1026, 1027,  906,  907, 1032, 1033,  912,  913, 1038, 1039,  918,  919, 1044, 1045],
        [ 884,  885, 1010, 1011,  890,  891, 1016, 1017,  896,  897, 1022, 1023,  902,  903, 1028, 1029,  908,  909, 1034, 1035,  914,  915, 1040, 1041,  920,  921, 1046, 1047],
        [ 886,  887, 1012, 1013,  892,  893, 1018, 1019,  898,  899, 1024, 1025,  904,  905, 1030, 1031,  910,  911, 1036, 1037,  916,  917, 1042, 1043,  922,  923, 1048, 1049],
        [1134, 1135, 1218, 1219, 1140, 1141, 1224, 1225, 1146, 1147, 1230, 1231, 1152, 1153, 1236, 1237, 1158, 1159, 1242, 1243, 1164, 1165, 1248, 1249, 1170, 1171, 1254, 1255],
        [1136, 1137, 1220, 1221, 1142, 1143, 1226, 1227, 1148, 1149, 1232, 1233, 1154, 1155, 1238, 1239, 1160, 1161, 1244, 1245, 1166, 1167, 1250, 1251, 1172, 1173, 1256, 1257],
        [1138, 1139, 1222, 1223, 1144, 1145, 1228, 1229, 1150, 1151, 1234, 1235, 1156, 1157, 1240, 1241, 1162, 1163, 1246, 1247, 1168, 1169, 1252, 1253, 1174, 1175, 1258, 1259],
        [ 924,  925, 1050, 1051,  930,  931, 1056, 1057,  936,  937, 1062, 1063,  942,  943, 1068, 1069,  948,  949, 1074, 1075,  954,  955, 1080, 1081,  960,  961, 1086, 1087],
        [ 926,  927, 1052, 1053,  932,  933, 1058, 1059,  938,  939, 1064, 1065,  944,  945, 1070, 1071,  950,  951, 1076, 1077,  956,  957, 1082, 1083,  962,  963, 1088, 1089],
        [ 928,  929, 1054, 1055,  934,  935, 1060, 1061,  940,  941, 1066, 1067,  946,  947, 1072, 1073,  952,  953, 1078, 1079,  958,  959, 1084, 1085,  964,  965, 1090, 1091]])
    # fmt: on
    access_order, access_count = tiles.access_tensors()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # tile col major
    tensor_dims = (3 * 5 * 3, 2 * 7 * 2)
    tiles = TensorTiler2D.step_tiler(
        tensor_dims,
        tile_dims=(3, 2),
        tile_group_repeats=(5, 7),
        tile_group_steps=(2, 2),
        allow_partial=True,
        tile_col_major=True,
    )
    assert len(tiles) == 8
    reference_tiles = reference_tiles = TensorTileSequence.from_tiles(
        [
            TensorTile(
                tensor_dims, offset=0, sizes=[5, 7, 2, 3], strides=[168, 4, 1, 28]
            ),
            TensorTile(
                tensor_dims, offset=2, sizes=[5, 7, 2, 3], strides=[168, 4, 1, 28]
            ),
            TensorTile(
                tensor_dims, offset=84, sizes=[5, 7, 2, 3], strides=[168, 4, 1, 28]
            ),
            TensorTile(
                tensor_dims, offset=86, sizes=[5, 7, 2, 3], strides=[168, 4, 1, 28]
            ),
            TensorTile(
                tensor_dims, offset=840, sizes=[3, 7, 2, 3], strides=[168, 4, 1, 28]
            ),
            TensorTile(
                tensor_dims, offset=842, sizes=[3, 7, 2, 3], strides=[168, 4, 1, 28]
            ),
            TensorTile(
                tensor_dims, offset=924, sizes=[2, 7, 2, 3], strides=[168, 4, 1, 28]
            ),
            TensorTile(
                tensor_dims, offset=926, sizes=[2, 7, 2, 3], strides=[168, 4, 1, 28]
            ),
        ]
    )
    assert tiles == reference_tiles

    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    3,  210,  213,    6,    9,  216,  219,   12,   15,  222,  225,   18,   21,  228,  231,   24,   27,  234,  237,   30,   33,  240,  243,   36,   39,  246,  249],
        [   1,    4,  211,  214,    7,   10,  217,  220,   13,   16,  223,  226,   19,   22,  229,  232,   25,   28,  235,  238,   31,   34,  241,  244,   37,   40,  247,  250],
        [   2,    5,  212,  215,    8,   11,  218,  221,   14,   17,  224,  227,   20,   23,  230,  233,   26,   29,  236,  239,   32,   35,  242,  245,   38,   41,  248,  251],
        [ 420,  423,  630,  633,  426,  429,  636,  639,  432,  435,  642,  645,  438,  441,  648,  651,  444,  447,  654,  657,  450,  453,  660,  663,  456,  459,  666,  669],
        [ 421,  424,  631,  634,  427,  430,  637,  640,  433,  436,  643,  646,  439,  442,  649,  652,  445,  448,  655,  658,  451,  454,  661,  664,  457,  460,  667,  670],
        [ 422,  425,  632,  635,  428,  431,  638,  641,  434,  437,  644,  647,  440,  443,  650,  653,  446,  449,  656,  659,  452,  455,  662,  665,  458,  461,  668,  671],
        [  42,   45,  252,  255,   48,   51,  258,  261,   54,   57,  264,  267,   60,   63,  270,  273,   66,   69,  276,  279,   72,   75,  282,  285,   78,   81,  288,  291],
        [  43,   46,  253,  256,   49,   52,  259,  262,   55,   58,  265,  268,   61,   64,  271,  274,   67,   70,  277,  280,   73,   76,  283,  286,   79,   82,  289,  292],
        [  44,   47,  254,  257,   50,   53,  260,  263,   56,   59,  266,  269,   62,   65,  272,  275,   68,   71,  278,  281,   74,   77,  284,  287,   80,   83,  290,  293],
        [ 462,  465,  672,  675,  468,  471,  678,  681,  474,  477,  684,  687,  480,  483,  690,  693,  486,  489,  696,  699,  492,  495,  702,  705,  498,  501,  708,  711],
        [ 463,  466,  673,  676,  469,  472,  679,  682,  475,  478,  685,  688,  481,  484,  691,  694,  487,  490,  697,  700,  493,  496,  703,  706,  499,  502,  709,  712],
        [ 464,  467,  674,  677,  470,  473,  680,  683,  476,  479,  686,  689,  482,  485,  692,  695,  488,  491,  698,  701,  494,  497,  704,  707,  500,  503,  710,  713],
        [  84,   87,  294,  297,   90,   93,  300,  303,   96,   99,  306,  309,  102,  105,  312,  315,  108,  111,  318,  321,  114,  117,  324,  327,  120,  123,  330,  333],
        [  85,   88,  295,  298,   91,   94,  301,  304,   97,  100,  307,  310,  103,  106,  313,  316,  109,  112,  319,  322,  115,  118,  325,  328,  121,  124,  331,  334],
        [  86,   89,  296,  299,   92,   95,  302,  305,   98,  101,  308,  311,  104,  107,  314,  317,  110,  113,  320,  323,  116,  119,  326,  329,  122,  125,  332,  335],
        [ 504,  507,  714,  717,  510,  513,  720,  723,  516,  519,  726,  729,  522,  525,  732,  735,  528,  531,  738,  741,  534,  537,  744,  747,  540,  543,  750,  753],
        [ 505,  508,  715,  718,  511,  514,  721,  724,  517,  520,  727,  730,  523,  526,  733,  736,  529,  532,  739,  742,  535,  538,  745,  748,  541,  544,  751,  754],
        [ 506,  509,  716,  719,  512,  515,  722,  725,  518,  521,  728,  731,  524,  527,  734,  737,  530,  533,  740,  743,  536,  539,  746,  749,  542,  545,  752,  755],
        [ 126,  129,  336,  339,  132,  135,  342,  345,  138,  141,  348,  351,  144,  147,  354,  357,  150,  153,  360,  363,  156,  159,  366,  369,  162,  165,  372,  375],
        [ 127,  130,  337,  340,  133,  136,  343,  346,  139,  142,  349,  352,  145,  148,  355,  358,  151,  154,  361,  364,  157,  160,  367,  370,  163,  166,  373,  376],
        [ 128,  131,  338,  341,  134,  137,  344,  347,  140,  143,  350,  353,  146,  149,  356,  359,  152,  155,  362,  365,  158,  161,  368,  371,  164,  167,  374,  377],
        [ 546,  549,  756,  759,  552,  555,  762,  765,  558,  561,  768,  771,  564,  567,  774,  777,  570,  573,  780,  783,  576,  579,  786,  789,  582,  585,  792,  795],
        [ 547,  550,  757,  760,  553,  556,  763,  766,  559,  562,  769,  772,  565,  568,  775,  778,  571,  574,  781,  784,  577,  580,  787,  790,  583,  586,  793,  796],
        [ 548,  551,  758,  761,  554,  557,  764,  767,  560,  563,  770,  773,  566,  569,  776,  779,  572,  575,  782,  785,  578,  581,  788,  791,  584,  587,  794,  797],
        [ 168,  171,  378,  381,  174,  177,  384,  387,  180,  183,  390,  393,  186,  189,  396,  399,  192,  195,  402,  405,  198,  201,  408,  411,  204,  207,  414,  417],
        [ 169,  172,  379,  382,  175,  178,  385,  388,  181,  184,  391,  394,  187,  190,  397,  400,  193,  196,  403,  406,  199,  202,  409,  412,  205,  208,  415,  418],
        [ 170,  173,  380,  383,  176,  179,  386,  389,  182,  185,  392,  395,  188,  191,  398,  401,  194,  197,  404,  407,  200,  203,  410,  413,  206,  209,  416,  419],
        [ 588,  591,  798,  801,  594,  597,  804,  807,  600,  603,  810,  813,  606,  609,  816,  819,  612,  615,  822,  825,  618,  621,  828,  831,  624,  627,  834,  837],
        [ 589,  592,  799,  802,  595,  598,  805,  808,  601,  604,  811,  814,  607,  610,  817,  820,  613,  616,  823,  826,  619,  622,  829,  832,  625,  628,  835,  838],
        [ 590,  593,  800,  803,  596,  599,  806,  809,  602,  605,  812,  815,  608,  611,  818,  821,  614,  617,  824,  827,  620,  623,  830,  833,  626,  629,  836,  839],
        [ 840,  843,  966,  969,  846,  849,  972,  975,  852,  855,  978,  981,  858,  861,  984,  987,  864,  867,  990,  993,  870,  873,  996,  999,  876,  879, 1002, 1005],
        [ 841,  844,  967,  970,  847,  850,  973,  976,  853,  856,  979,  982,  859,  862,  985,  988,  865,  868,  991,  994,  871,  874,  997, 1000,  877,  880, 1003, 1006],
        [ 842,  845,  968,  971,  848,  851,  974,  977,  854,  857,  980,  983,  860,  863,  986,  989,  866,  869,  992,  995,  872,  875, 998, 1001,  878,  881, 1004, 1007],
        [1092, 1095, 1176, 1179, 1098, 1101, 1182, 1185, 1104, 1107, 1188, 1191, 1110, 1113, 1194, 1197, 1116, 1119, 1200, 1203, 1122, 1125, 1206, 1209, 1128, 1131, 1212, 1215],
        [1093, 1096, 1177, 1180, 1099, 1102, 1183, 1186, 1105, 1108, 1189, 1192, 1111, 1114, 1195, 1198, 1117, 1120, 1201, 1204, 1123, 1126, 1207, 1210, 1129, 1132, 1213, 1216],
        [1094, 1097, 1178, 1181, 1100, 1103, 1184, 1187, 1106, 1109, 1190, 1193, 1112, 1115, 1196, 1199, 1118, 1121, 1202, 1205, 1124, 1127, 1208, 1211, 1130, 1133, 1214, 1217],
        [ 882,  885, 1008, 1011,  888,  891, 1014, 1017,  894,  897, 1020, 1023,  900,  903, 1026, 1029,  906,  909, 1032, 1035,  912,  915, 1038, 1041,  918,  921, 1044, 1047],
        [ 883,  886, 1009, 1012,  889,  892, 1015, 1018,  895,  898, 1021, 1024,  901,  904, 1027, 1030,  907,  910, 1033, 1036,  913,  916, 1039, 1042,  919,  922, 1045, 1048],
        [ 884,  887, 1010, 1013,  890,  893, 1016, 1019,  896,  899, 1022, 1025,  902,  905, 1028, 1031,  908,  911, 1034, 1037,  914,  917, 1040, 1043,  920,  923, 1046, 1049],
        [1134, 1137, 1218, 1221, 1140, 1143, 1224, 1227, 1146, 1149, 1230, 1233, 1152, 1155, 1236, 1239, 1158, 1161, 1242, 1245, 1164, 1167, 1248, 1251, 1170, 1173, 1254, 1257],
        [1135, 1138, 1219, 1222, 1141, 1144, 1225, 1228, 1147, 1150, 1231, 1234, 1153, 1156, 1237, 1240, 1159, 1162, 1243, 1246, 1165, 1168, 1249, 1252, 1171, 1174, 1255, 1258],
        [1136, 1139, 1220, 1223, 1142, 1145, 1226, 1229, 1148, 1151, 1232, 1235, 1154, 1157, 1238, 1241, 1160, 1163, 1244, 1247, 1166, 1169, 1250, 1253, 1172, 1175, 1256, 1259],
        [ 924,  927, 1050, 1053,  930,  933, 1056, 1059,  936,  939, 1062, 1065,  942,  945, 1068, 1071,  948,  951, 1074, 1077,  954,  957, 1080, 1083,  960,  963, 1086, 1089],
        [ 925,  928, 1051, 1054,  931,  934, 1057, 1060,  937,  940, 1063, 1066,  943,  946, 1069, 1072,  949,  952, 1075, 1078,  955,  958, 1081, 1084,  961,  964, 1087, 1090],
        [ 926,  929, 1052, 1055,  932,  935, 1058, 1061,  938,  941, 1064, 1067,  944,  947, 1070, 1073,  950,  953, 1076, 1079,  956,  959, 1082, 1085,  962,  965, 1088, 1091]])
    # fmt: on
    access_order, access_count = tiles.access_tensors()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # TODO: tile group col major
    tensor_dims = (3 * 5 * 3, 2 * 7 * 2)
    tiles = TensorTiler2D.step_tiler(
        tensor_dims,
        tile_dims=(3, 2),
        tile_group_repeats=(5, 7),
        tile_group_steps=(2, 2),
        allow_partial=True,
    )
    assert len(tiles) == 8
    # reference_tiles = reference_tiles = TensorTileSequence.from_tiles([])
    # assert tiles == reference_tiles

    # fmt: off
    # ref_access_order_tensor = np.array([
    # fmt: on
    access_order, access_count = tiles.access_tensors()
    # assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # TODO: iter col major
    tensor_dims = (3 * 5 * 3, 2 * 7 * 2)
    tiles = TensorTiler2D.step_tiler(
        tensor_dims,
        tile_dims=(3, 2),
        tile_group_repeats=(5, 7),
        tile_group_steps=(2, 2),
        allow_partial=True,
    )
    assert len(tiles) == 8
    # reference_tiles = reference_tiles = TensorTileSequence.from_tiles([])
    # assert tiles == reference_tiles

    # fmt: off
    # ref_access_order_tensor = np.array([
    # fmt: on
    access_order, access_count = tiles.access_tensors()
    # assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # TODO: all col major
    tensor_dims = (3 * 5 * 3, 2 * 7 * 2)
    tiles = TensorTiler2D.step_tiler(
        tensor_dims,
        tile_dims=(3, 2),
        tile_group_repeats=(5, 7),
        tile_group_steps=(2, 2),
        allow_partial=True,
    )
    assert len(tiles) == 8
    # reference_tiles = reference_tiles = TensorTileSequence.from_tiles([])
    # assert tiles == reference_tiles

    # fmt: off
    # ref_access_order_tensor = np.array([
    # fmt: on
    access_order, access_count = tiles.access_tensors()
    # assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # TODO: pattern repeat
    tensor_dims = (3 * 5 * 3, 2 * 7 * 2)
    tiles = TensorTiler2D.step_tiler(
        tensor_dims,
        tile_dims=(3, 2),
        tile_group_repeats=(5, 7),
        tile_group_steps=(2, 2),
        allow_partial=True,
    )
    assert len(tiles) == 8
    # reference_tiles = reference_tiles = TensorTileSequence.from_tiles([])
    # assert tiles == reference_tiles

    # fmt: off
    # ref_access_order_tensor = np.array([
    # fmt: on
    access_order, access_count = tiles.access_tensors()
    # assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # CHECK: Pass!
    print("Pass!")


# CHECK-LABEL: step_tiler_partial_both
@construct_test
def step_tiler_partial_both():

    # all row major
    # tile col major
    # tile group col major
    # iter col major
    # all col major
    # pattern repeat

    # CHECK: Pass!
    print("Pass!")
