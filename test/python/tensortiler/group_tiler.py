import numpy as np

from aie.helpers.tensortiler import TensorTile, TensorTiler2D
from util import construct_test

# RUN: %python %s | FileCheck %s


# CHECK-LABEL: group_tiler
@construct_test
def group_tiler():
    # Default tile group dims
    tiles = TensorTiler2D.group_tiler((3 * 5, 2 * 7), tile_dims=(3, 2))
    assert len(tiles) == 5*7
    # fmt: off
    ref_access_order_tensor = np.array([
        [  0,   1,   6,   7,  12,  13,  18,  19,  24,  25,  30,  31,  36,  37],
        [  2,   3,   8,   9,  14,  15,  20,  21,  26,  27,  32,  33,  38,  39],
        [  4,   5,  10,  11,  16,  17,  22,  23,  28,  29,  34,  35,  40,  41],
        [ 42,  43,  48,  49,  54,  55,  60,  61,  66,  67,  72,  73,  78,  79],
        [ 44,  45,  50,  51,  56,  57,  62,  63,  68,  69,  74,  75,  80,  81],
        [ 46,  47,  52,  53,  58,  59,  64,  65,  70,  71,  76,  77,  82,  83],
        [ 84,  85,  90,  91,  96,  97, 102, 103, 108, 109, 114, 115, 120, 121],
        [ 86,  87,  92,  93,  98,  99, 104, 105, 110, 111, 116, 117, 122, 123],
        [ 88,  89,  94,  95, 100, 101, 106, 107, 112, 113, 118, 119, 124, 125],
        [126, 127, 132, 133, 138, 139, 144, 145, 150, 151, 156, 157, 162, 163],
        [128, 129, 134, 135, 140, 141, 146, 147, 152, 153, 158, 159, 164, 165],
        [130, 131, 136, 137, 142, 143, 148, 149, 154, 155, 160, 161, 166, 167],
        [168, 169, 174, 175, 180, 181, 186, 187, 192, 193, 198, 199, 204, 205],
        [170, 171, 176, 177, 182, 183, 188, 189, 194, 195, 200, 201, 206, 207],
        [172, 173, 178, 179, 184, 185, 190, 191, 196, 197, 202, 203, 208, 209]])
    # fmt: on
    access_order, access_count = tiles.access_tensors()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    tiles = TensorTiler2D.group_tiler(
        (3 * 5 * 3, 2 * 7 * 2), tile_dims=(3, 2), tile_group_dims=(5, 7)
    )
    assert len(tiles) == 3 * 2
    tile0_0 = TensorTile(
        (3 * 5 * 3, 2 * 7 * 2), offset=0, sizes=[5, 7, 3, 2], strides=[84, 2, 28, 1]
    )
    assert tiles[0] == tile0_0
    tile0_1 = TensorTile(
        (3 * 5 * 3, 2 * 7 * 2), offset=14, sizes=[5, 7, 3, 2], strides=[84, 2, 28, 1]
    )
    assert tiles[1] == tile0_1
    tile1_0 = TensorTile(
        (3 * 5 * 3, 2 * 7 * 2), offset=420, sizes=[5, 7, 3, 2], strides=[84, 2, 28, 1]
    )
    assert tiles[2] == tile1_0

    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    1,    6,    7,   12,   13,   18,   19,   24,   25,   30,   31,   36,   37,  210,  211,  216,  217,  222,  223,  228,  229,  234,  235,  240,  241,  246,  247],
        [   2,    3,    8,    9,   14,   15,   20,   21,   26,   27,   32,   33,   38,   39,  212,  213,  218,  219,  224,  225,  230,  231,  236,  237,  242,  243,  248,  249],
        [   4,    5,   10,   11,   16,   17,   22,   23,   28,   29,   34,   35,   40,   41,  214,  215,  220,  221,  226,  227,  232,  233,  238,  239,  244,  245,  250,  251],
        [  42,   43,   48,   49,   54,   55,   60,   61,   66,   67,   72,   73,   78,   79,  252,  253,  258,  259,  264,  265,  270,  271,  276,  277,  282,  283,  288,  289],
        [  44,   45,   50,   51,   56,   57,   62,   63,   68,   69,   74,   75,   80,   81,  254,  255,  260,  261,  266,  267,  272,  273,  278,  279,  284,  285,  290,  291],
        [  46,   47,   52,   53,   58,   59,   64,   65,   70,   71,   76,   77,   82,   83,  256,  257,  262,  263,  268,  269,  274,  275,  280,  281,  286,  287,  292,  293],
        [  84,   85,   90,   91,   96,   97,  102,  103,  108,  109,  114,  115,  120,  121,  294,  295,  300,  301,  306,  307,  312,  313,  318,  319,  324,  325,  330,  331],
        [  86,   87,   92,   93,   98,   99,  104,  105,  110,  111,  116,  117,  122,  123,  296,  297,  302,  303,  308,  309,  314,  315,  320,  321,  326,  327,  332,  333],
        [  88,   89,   94,   95,  100,  101,  106,  107,  112,  113,  118,  119,  124,  125,  298,  299,  304,  305,  310,  311,  316,  317,  322,  323,  328,  329,  334,  335],
        [ 126,  127,  132,  133,  138,  139,  144,  145,  150,  151,  156,  157,  162,  163,  336,  337,  342,  343,  348,  349,  354,  355,  360,  361,  366,  367,  372,  373],
        [ 128,  129,  134,  135,  140,  141,  146,  147,  152,  153,  158,  159,  164,  165,  338,  339,  344,  345,  350,  351,  356,  357,  362,  363,  368,  369,  374,  375],
        [ 130,  131,  136,  137,  142,  143,  148,  149,  154,  155,  160,  161,  166,  167,  340,  341,  346,  347,  352,  353,  358,  359,  364,  365,  370,  371,  376,  377],
        [ 168,  169,  174,  175,  180,  181,  186,  187,  192,  193,  198,  199,  204,  205,  378,  379,  384,  385,  390,  391,  396,  397,  402,  403,  408,  409,  414,  415],
        [ 170,  171,  176,  177,  182,  183,  188,  189,  194,  195,  200,  201,  206,  207,  380,  381,  386,  387,  392,  393,  398,  399,  404,  405,  410,  411,  416,  417],
        [ 172,  173,  178,  179,  184,  185,  190,  191,  196,  197,  202,  203,  208,  209,  382,  383,  388,  389,  394,  395,  400,  401,  406,  407,  412,  413,  418,  419],
        [ 420,  421,  426,  427,  432,  433,  438,  439,  444,  445,  450,  451,  456,  457,  630,  631,  636,  637,  642,  643,  648,  649,  654,  655,  660,  661,  666,  667],
        [ 422,  423,  428,  429,  434,  435,  440,  441,  446,  447,  452,  453,  458,  459,  632,  633,  638,  639,  644,  645,  650,  651,  656,  657,  662,  663,  668,  669],
        [ 424,  425,  430,  431,  436,  437,  442,  443,  448,  449,  454,  455,  460,  461,  634,  635,  640,  641,  646,  647,  652,  653,  658,  659,  664,  665,  670,  671],
        [ 462,  463,  468,  469,  474,  475,  480,  481,  486,  487,  492,  493,  498,  499,  672,  673,  678,  679,  684,  685,  690,  691,  696,  697,  702,  703,  708,  709],
        [ 464,  465,  470,  471,  476,  477,  482,  483,  488,  489,  494,  495,  500,  501,  674,  675,  680,  681,  686,  687,  692,  693,  698,  699,  704,  705,  710,  711],
        [ 466,  467,  472,  473,  478,  479,  484,  485,  490,  491,  496,  497,  502,  503,  676,  677,  682,  683,  688,  689,  694,  695,  700,  701,  706,  707,  712,  713],
        [ 504,  505,  510,  511,  516,  517,  522,  523,  528,  529,  534,  535,  540,  541,  714,  715,  720,  721,  726,  727,  732,  733,  738,  739,  744,  745,  750,  751],
        [ 506,  507,  512,  513,  518,  519,  524,  525,  530,  531,  536,  537,  542,  543,  716,  717,  722,  723,  728,  729,  734,  735,  740,  741,  746,  747,  752,  753],
        [ 508,  509,  514,  515,  520,  521,  526,  527,  532,  533,  538,  539,  544,  545,  718,  719,  724,  725,  730,  731,  736,  737,  742,  743,  748,  749,  754,  755],
        [ 546,  547,  552,  553,  558,  559,  564,  565,  570,  571,  576,  577,  582,  583,  756,  757,  762,  763,  768,  769,  774,  775,  780,  781,  786,  787,  792,  793],
        [ 548,  549,  554,  555,  560,  561,  566,  567,  572,  573,  578,  579,  584,  585,  758,  759,  764,  765,  770,  771,  776,  777,  782,  783,  788,  789,  794,  795],
        [ 550,  551,  556,  557,  562,  563,  568,  569,  574,  575,  580,  581,  586,  587,  760,  761,  766,  767,  772,  773,  778,  779,  784,  785,  790,  791,  796,  797],
        [ 588,  589,  594,  595,  600,  601,  606,  607,  612,  613,  618,  619,  624,  625,  798,  799,  804,  805,  810,  811,  816,  817,  822,  823,  828,  829,  834,  835],
        [ 590,  591,  596,  597,  602,  603,  608,  609,  614,  615,  620,  621,  626,  627,  800,  801,  806,  807,  812,  813,  818,  819,  824,  825,  830,  831,  836,  837],
        [ 592,  593,  598,  599,  604,  605,  610,  611,  616,  617,  622,  623,  628,  629,  802,  803,  808,  809,  814,  815,  820,  821,  826,  827,  832,  833,  838,  839],
        [ 840,  841,  846,  847,  852,  853,  858,  859,  864,  865,  870,  871,  876,  877, 1050, 1051, 1056, 1057, 1062, 1063, 1068, 1069, 1074, 1075, 1080, 1081, 1086, 1087],
        [ 842,  843,  848,  849,  854,  855,  860,  861,  866,  867,  872,  873,  878,  879, 1052, 1053, 1058, 1059, 1064, 1065, 1070, 1071, 1076, 1077, 1082, 1083, 1088, 1089],
        [ 844,  845,  850,  851,  856,  857,  862,  863,  868,  869,  874,  875,  880,  881, 1054, 1055, 1060, 1061, 1066, 1067, 1072, 1073, 1078, 1079, 1084, 1085, 1090, 1091],
        [ 882,  883,  888,  889,  894,  895,  900,  901,  906,  907,  912,  913,  918,  919, 1092, 1093, 1098, 1099, 1104, 1105, 1110, 1111, 1116, 1117, 1122, 1123, 1128, 1129],
        [ 884,  885,  890,  891,  896,  897,  902,  903,  908,  909,  914,  915,  920,  921, 1094, 1095, 1100, 1101, 1106, 1107, 1112, 1113, 1118, 1119, 1124, 1125, 1130, 1131],
        [ 886,  887,  892,  893,  898,  899,  904,  905,  910,  911,  916,  917,  922,  923, 1096, 1097, 1102, 1103, 1108, 1109, 1114, 1115, 1120, 1121, 1126, 1127, 1132, 1133],
        [ 924,  925,  930,  931,  936,  937,  942,  943,  948,  949,  954,  955,  960,  961, 1134, 1135, 1140, 1141, 1146, 1147, 1152, 1153, 1158, 1159, 1164, 1165, 1170, 1171],
        [ 926,  927,  932,  933,  938,  939,  944,  945,  950,  951,  956,  957,  962,  963, 1136, 1137, 1142, 1143, 1148, 1149, 1154, 1155, 1160, 1161, 1166, 1167, 1172, 1173],
        [ 928,  929,  934,  935,  940,  941,  946,  947,  952,  953,  958,  959,  964,  965, 1138, 1139, 1144, 1145, 1150, 1151, 1156, 1157, 1162, 1163, 1168, 1169, 1174, 1175],
        [ 966,  967,  972,  973,  978,  979,  984,  985,  990,  991,  996,  997, 1002, 1003, 1176, 1177, 1182, 1183, 1188, 1189, 1194, 1195, 1200, 1201, 1206, 1207, 1212, 1213],
        [ 968,  969,  974,  975,  980,  981,  986,  987,  992,  993,  998,  999, 1004, 1005, 1178, 1179, 1184, 1185, 1190, 1191, 1196, 1197, 1202, 1203, 1208, 1209, 1214, 1215],
        [ 970,  971,  976,  977,  982,  983,  988,  989,  994,  995, 1000, 1001, 1006, 1007, 1180, 1181, 1186, 1187, 1192, 1193, 1198, 1199, 1204, 1205, 1210, 1211, 1216, 1217],
        [1008, 1009, 1014, 1015, 1020, 1021, 1026, 1027, 1032, 1033, 1038, 1039, 1044, 1045, 1218, 1219, 1224, 1225, 1230, 1231, 1236, 1237, 1242, 1243, 1248, 1249, 1254, 1255],
        [1010, 1011, 1016, 1017, 1022, 1023, 1028, 1029, 1034, 1035, 1040, 1041, 1046, 1047, 1220, 1221, 1226, 1227, 1232, 1233, 1238, 1239, 1244, 1245, 1250, 1251, 1256, 1257],
        [1012, 1013, 1018, 1019, 1024, 1025, 1030, 1031, 1036, 1037, 1042, 1043, 1048, 1049, 1222, 1223, 1228, 1229, 1234, 1235, 1240, 1241, 1246, 1247, 1252, 1253, 1258, 1259]])
    # fmt: on
    access_order, access_count = tiles.access_tensors()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # iter_col_major
    tiles_col_iter = TensorTiler2D.group_tiler(
        (3 * 5 * 3, 2 * 7 * 2),
        tile_dims=(3, 2),
        tile_group_dims=(5, 7),
        iter_col_major=True,
    )
    assert tiles_col_iter[0] == tile0_0
    assert tiles_col_iter[1] == tile1_0
    assert tiles_col_iter[3] == tile0_1

    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    1,    6,    7,   12,   13,   18,   19,   24,   25,   30,   31,   36,   37,  630,  631,  636,  637,  642,  643,  648,  649,  654,  655,  660,  661,  666,  667],
        [   2,    3,    8,    9,   14,   15,   20,   21,   26,   27,   32,   33,   38,   39,  632,  633,  638,  639,  644,  645,  650,  651,  656,  657,  662,  663,  668,  669],
        [   4,    5,   10,   11,   16,   17,   22,   23,   28,   29,   34,   35,   40,   41,  634,  635,  640,  641,  646,  647,  652,  653,  658,  659,  664,  665,  670,  671],
        [  42,   43,   48,   49,   54,   55,   60,   61,   66,   67,   72,   73,   78,   79,  672,  673,  678,  679,  684,  685,  690,  691,  696,  697,  702,  703,  708,  709],
        [  44,   45,   50,   51,   56,   57,   62,   63,   68,   69,   74,   75,   80,   81,  674,  675,  680,  681,  686,  687,  692,  693,  698,  699,  704,  705,  710,  711],
        [  46,   47,   52,   53,   58,   59,   64,   65,   70,   71,   76,   77,   82,   83,  676,  677,  682,  683,  688,  689,  694,  695,  700,  701,  706,  707,  712,  713],
        [  84,   85,   90,   91,   96,   97,  102,  103,  108,  109,  114,  115,  120,  121,  714,  715,  720,  721,  726,  727,  732,  733,  738,  739,  744,  745,  750,  751],
        [  86,   87,   92,   93,   98,   99,  104,  105,  110,  111,  116,  117,  122,  123,  716,  717,  722,  723,  728,  729,  734,  735,  740,  741,  746,  747,  752,  753],
        [  88,   89,   94,   95,  100,  101,  106,  107,  112,  113,  118,  119,  124,  125,  718,  719,  724,  725,  730,  731,  736,  737,  742,  743,  748,  749,  754,  755],
        [ 126,  127,  132,  133,  138,  139,  144,  145,  150,  151,  156,  157,  162,  163,  756,  757,  762,  763,  768,  769,  774,  775,  780,  781,  786,  787,  792,  793],
        [ 128,  129,  134,  135,  140,  141,  146,  147,  152,  153,  158,  159,  164,  165,  758,  759,  764,  765,  770,  771,  776,  777,  782,  783,  788,  789,  794,  795],
        [ 130,  131,  136,  137,  142,  143,  148,  149,  154,  155,  160,  161,  166,  167,  760,  761,  766,  767,  772,  773,  778,  779,  784,  785,  790,  791,  796,  797],
        [ 168,  169,  174,  175,  180,  181,  186,  187,  192,  193,  198,  199,  204,  205,  798,  799,  804,  805,  810,  811,  816,  817,  822,  823,  828,  829,  834,  835],
        [ 170,  171,  176,  177,  182,  183,  188,  189,  194,  195,  200,  201,  206,  207,  800,  801,  806,  807,  812,  813,  818,  819,  824,  825,  830,  831,  836,  837],
        [ 172,  173,  178,  179,  184,  185,  190,  191,  196,  197,  202,  203,  208,  209,  802,  803,  808,  809,  814,  815,  820,  821,  826,  827,  832,  833,  838,  839],
        [ 210,  211,  216,  217,  222,  223,  228,  229,  234,  235,  240,  241,  246,  247,  840,  841,  846,  847,  852,  853,  858,  859,  864,  865,  870,  871,  876,  877],
        [ 212,  213,  218,  219,  224,  225,  230,  231,  236,  237,  242,  243,  248,  249,  842,  843,  848,  849,  854,  855,  860,  861,  866,  867,  872,  873,  878,  879],
        [ 214,  215,  220,  221,  226,  227,  232,  233,  238,  239,  244,  245,  250,  251,  844,  845,  850,  851,  856,  857,  862,  863,  868,  869,  874,  875,  880,  881],
        [ 252,  253,  258,  259,  264,  265,  270,  271,  276,  277,  282,  283,  288,  289,  882,  883,  888,  889,  894,  895,  900,  901,  906,  907,  912,  913,  918,  919],
        [ 254,  255,  260,  261,  266,  267,  272,  273,  278,  279,  284,  285,  290,  291,  884,  885,  890,  891,  896,  897,  902,  903,  908,  909,  914,  915,  920,  921],
        [ 256,  257,  262,  263,  268,  269,  274,  275,  280,  281,  286,  287,  292,  293,  886,  887,  892,  893,  898,  899,  904,  905,  910,  911,  916,  917,  922,  923],
        [ 294,  295,  300,  301,  306,  307,  312,  313,  318,  319,  324,  325,  330,  331,  924,  925,  930,  931,  936,  937,  942,  943,  948,  949,  954,  955,  960,  961],
        [ 296,  297,  302,  303,  308,  309,  314,  315,  320,  321,  326,  327,  332,  333,  926,  927,  932,  933,  938,  939,  944,  945,  950,  951,  956,  957,  962,  963],
        [ 298,  299,  304,  305,  310,  311,  316,  317,  322,  323,  328,  329,  334,  335,  928,  929,  934,  935,  940,  941,  946,  947,  952,  953,  958,  959,  964,  965],
        [ 336,  337,  342,  343,  348,  349,  354,  355,  360,  361,  366,  367,  372,  373,  966,  967,  972,  973,  978,  979,  984,  985,  990,  991,  996,  997, 1002, 1003],
        [ 338,  339,  344,  345,  350,  351,  356,  357,  362,  363,  368,  369,  374,  375,  968,  969,  974,  975,  980,  981,  986,  987,  992,  993,  998,  999, 1004, 1005],
        [ 340,  341,  346,  347,  352,  353,  358,  359,  364,  365,  370,  371,  376,  377,  970,  971,  976,  977,  982,  983,  988,  989,  994,  995, 1000, 1001, 1006, 1007],
        [ 378,  379,  384,  385,  390,  391,  396,  397,  402,  403,  408,  409,  414,  415, 1008, 1009, 1014, 1015, 1020, 1021, 1026, 1027, 1032, 1033, 1038, 1039, 1044, 1045],
        [ 380,  381,  386,  387,  392,  393,  398,  399,  404,  405,  410,  411,  416,  417, 1010, 1011, 1016, 1017, 1022, 1023, 1028, 1029, 1034, 1035, 1040, 1041, 1046, 1047],
        [ 382,  383,  388,  389,  394,  395,  400,  401,  406,  407,  412,  413,  418,  419, 1012, 1013, 1018, 1019, 1024, 1025, 1030, 1031, 1036, 1037, 1042, 1043, 1048, 1049],
        [ 420,  421,  426,  427,  432,  433,  438,  439,  444,  445,  450,  451,  456,  457, 1050, 1051, 1056, 1057, 1062, 1063, 1068, 1069, 1074, 1075, 1080, 1081, 1086, 1087],
        [ 422,  423,  428,  429,  434,  435,  440,  441,  446,  447,  452,  453,  458,  459, 1052, 1053, 1058, 1059, 1064, 1065, 1070, 1071, 1076, 1077, 1082, 1083, 1088, 1089],
        [ 424,  425,  430,  431,  436,  437,  442,  443,  448,  449,  454,  455,  460,  461, 1054, 1055, 1060, 1061, 1066, 1067, 1072, 1073, 1078, 1079, 1084, 1085, 1090, 1091],
        [ 462,  463,  468,  469,  474,  475,  480,  481,  486,  487,  492,  493,  498,  499, 1092, 1093, 1098, 1099, 1104, 1105, 1110, 1111, 1116, 1117, 1122, 1123, 1128, 1129],
        [ 464,  465,  470,  471,  476,  477,  482,  483,  488,  489,  494,  495,  500,  501, 1094, 1095, 1100, 1101, 1106, 1107, 1112, 1113, 1118, 1119, 1124, 1125, 1130, 1131],
        [ 466,  467,  472,  473,  478,  479,  484,  485,  490,  491,  496,  497,  502,  503, 1096, 1097, 1102, 1103, 1108, 1109, 1114, 1115, 1120, 1121, 1126, 1127, 1132, 1133],
        [ 504,  505,  510,  511,  516,  517,  522,  523,  528,  529,  534,  535,  540,  541, 1134, 1135, 1140, 1141, 1146, 1147, 1152, 1153, 1158, 1159, 1164, 1165, 1170, 1171],
        [ 506,  507,  512,  513,  518,  519,  524,  525,  530,  531,  536,  537,  542,  543, 1136, 1137, 1142, 1143, 1148, 1149, 1154, 1155, 1160, 1161, 1166, 1167, 1172, 1173],
        [ 508,  509,  514,  515,  520,  521,  526,  527,  532,  533,  538,  539,  544,  545, 1138, 1139, 1144, 1145, 1150, 1151, 1156, 1157, 1162, 1163, 1168, 1169, 1174, 1175],
        [ 546,  547,  552,  553,  558,  559,  564,  565,  570,  571,  576,  577,  582,  583, 1176, 1177, 1182, 1183, 1188, 1189, 1194, 1195, 1200, 1201, 1206, 1207, 1212, 1213],
        [ 548,  549,  554,  555,  560,  561,  566,  567,  572,  573,  578,  579,  584,  585, 1178, 1179, 1184, 1185, 1190, 1191, 1196, 1197, 1202, 1203, 1208, 1209, 1214, 1215],
        [ 550,  551,  556,  557,  562,  563,  568,  569,  574,  575,  580,  581,  586,  587, 1180, 1181, 1186, 1187, 1192, 1193, 1198, 1199, 1204, 1205, 1210, 1211, 1216, 1217],
        [ 588,  589,  594,  595,  600,  601,  606,  607,  612,  613,  618,  619,  624,  625, 1218, 1219, 1224, 1225, 1230, 1231, 1236, 1237, 1242, 1243, 1248, 1249, 1254, 1255],
        [ 590,  591,  596,  597,  602,  603,  608,  609,  614,  615,  620,  621,  626,  627, 1220, 1221, 1226, 1227, 1232, 1233, 1238, 1239, 1244, 1245, 1250, 1251, 1256, 1257],
        [ 592,  593,  598,  599,  604,  605,  610,  611,  616,  617,  622,  623,  628,  629, 1222, 1223, 1228, 1229, 1234, 1235, 1240, 1241, 1246, 1247, 1252, 1253, 1258, 1259]])
    # fmt: on
    access_order, access_count = tiles_col_iter.access_tensors()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # tile_col_major
    tiles_tile_col_major = TensorTiler2D.group_tiler(
        (3 * 5 * 3, 2 * 7 * 2),
        tile_dims=(3, 2),
        tile_group_dims=(5, 7),
        tile_col_major=True,
    )
    tile0_0 = TensorTile(
        (3 * 5 * 3, 2 * 7 * 2), offset=0, sizes=[1, 5, 14, 3], strides=[0, 84, 1, 28]
    )
    assert tiles_tile_col_major[0] == tile0_0
    tile0_1 = TensorTile(
        (3 * 5 * 3, 2 * 7 * 2), offset=14, sizes=[1, 5, 14, 3], strides=[0, 84, 1, 28]
    )
    assert tiles_tile_col_major[1] == tile0_1
    tile1_0 = TensorTile(
        (3 * 5 * 3, 2 * 7 * 2), offset=420, sizes=[1, 5, 14, 3], strides=[0, 84, 1, 28]
    )
    assert tiles_tile_col_major[2] == tile1_0

    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    3,    6,    9,   12,   15,   18,   21,   24,   27,   30,   33,   36,   39,  210,  213,  216,  219,  222,  225,  228,  231,  234,  237,  240,  243,  246,  249],
        [   1,    4,    7,   10,   13,   16,   19,   22,   25,   28,   31,   34,   37,   40,  211,  214,  217,  220,  223,  226,  229,  232,  235,  238,  241,  244,  247,  250],
        [   2,    5,    8,   11,   14,   17,   20,   23,   26,   29,   32,   35,   38,   41,  212,  215,  218,  221,  224,  227,  230,  233,  236,  239,  242,  245,  248,  251],
        [  42,   45,   48,   51,   54,   57,   60,   63,   66,   69,   72,   75,   78,   81,  252,  255,  258,  261,  264,  267,  270,  273,  276,  279,  282,  285,  288,  291],
        [  43,   46,   49,   52,   55,   58,   61,   64,   67,   70,   73,   76,   79,   82,  253,  256,  259,  262,  265,  268,  271,  274,  277,  280,  283,  286,  289,  292],
        [  44,   47,   50,   53,   56,   59,   62,   65,   68,   71,   74,   77,   80,   83,  254,  257,  260,  263,  266,  269,  272,  275,  278,  281,  284,  287,  290,  293],
        [  84,   87,   90,   93,   96,   99,  102,  105,  108,  111,  114,  117,  120,  123,  294,  297,  300,  303,  306,  309,  312,  315,  318,  321,  324,  327,  330,  333],
        [  85,   88,   91,   94,   97,  100,  103,  106,  109,  112,  115,  118,  121,  124,  295,  298,  301,  304,  307,  310,  313,  316,  319,  322,  325,  328,  331,  334],
        [  86,   89,   92,   95,   98,  101,  104,  107,  110,  113,  116,  119,  122,  125,  296,  299,  302,  305,  308,  311,  314,  317,  320,  323,  326,  329,  332,  335],
        [ 126,  129,  132,  135,  138,  141,  144,  147,  150,  153,  156,  159,  162,  165,  336,  339,  342,  345,  348,  351,  354,  357,  360,  363,  366,  369,  372,  375],
        [ 127,  130,  133,  136,  139,  142,  145,  148,  151,  154,  157,  160,  163,  166,  337,  340,  343,  346,  349,  352,  355,  358,  361,  364,  367,  370,  373,  376],
        [ 128,  131,  134,  137,  140,  143,  146,  149,  152,  155,  158,  161,  164,  167,  338,  341,  344,  347,  350,  353,  356,  359,  362,  365,  368,  371,  374,  377],
        [ 168,  171,  174,  177,  180,  183,  186,  189,  192,  195,  198,  201,  204,  207,  378,  381,  384,  387,  390,  393,  396,  399,  402,  405,  408,  411,  414,  417],
        [ 169,  172,  175,  178,  181,  184,  187,  190,  193,  196,  199,  202,  205,  208,  379,  382,  385,  388,  391,  394,  397,  400,  403,  406,  409,  412,  415,  418],
        [ 170,  173,  176,  179,  182,  185,  188,  191,  194,  197,  200,  203,  206,  209,  380,  383,  386,  389,  392,  395,  398,  401,  404,  407,  410,  413,  416,  419],
        [ 420,  423,  426,  429,  432,  435,  438,  441,  444,  447,  450,  453,  456,  459,  630,  633,  636,  639,  642,  645,  648,  651,  654,  657,  660,  663,  666,  669],
        [ 421,  424,  427,  430,  433,  436,  439,  442,  445,  448,  451,  454,  457,  460,  631,  634,  637,  640,  643,  646,  649,  652,  655,  658,  661,  664,  667,  670],
        [ 422,  425,  428,  431,  434,  437,  440,  443,  446,  449,  452,  455,  458,  461,  632,  635,  638,  641,  644,  647,  650,  653,  656,  659,  662,  665,  668,  671],
        [ 462,  465,  468,  471,  474,  477,  480,  483,  486,  489,  492,  495,  498,  501,  672,  675,  678,  681,  684,  687,  690,  693,  696,  699,  702,  705,  708,  711],
        [ 463,  466,  469,  472,  475,  478,  481,  484,  487,  490,  493,  496,  499,  502,  673,  676,  679,  682,  685,  688,  691,  694,  697,  700,  703,  706,  709,  712],
        [ 464,  467,  470,  473,  476,  479,  482,  485,  488,  491,  494,  497,  500,  503,  674,  677,  680,  683,  686,  689,  692,  695,  698,  701,  704,  707,  710,  713],
        [ 504,  507,  510,  513,  516,  519,  522,  525,  528,  531,  534,  537,  540,  543,  714,  717,  720,  723,  726,  729,  732,  735,  738,  741,  744,  747,  750,  753],
        [ 505,  508,  511,  514,  517,  520,  523,  526,  529,  532,  535,  538,  541,  544,  715,  718,  721,  724,  727,  730,  733,  736,  739,  742,  745,  748,  751,  754],
        [ 506,  509,  512,  515,  518,  521,  524,  527,  530,  533,  536,  539,  542,  545,  716,  719,  722,  725,  728,  731,  734,  737,  740,  743,  746,  749,  752,  755],
        [ 546,  549,  552,  555,  558,  561,  564,  567,  570,  573,  576,  579,  582,  585,  756,  759,  762,  765,  768,  771,  774,  777,  780,  783,  786,  789,  792,  795],
        [ 547,  550,  553,  556,  559,  562,  565,  568,  571,  574,  577,  580,  583,  586,  757,  760,  763,  766,  769,  772,  775,  778,  781,  784,  787,  790,  793,  796],
        [ 548,  551,  554,  557,  560,  563,  566,  569,  572,  575,  578,  581,  584,  587,  758,  761,  764,  767,  770,  773,  776,  779,  782,  785,  788,  791,  794,  797],
        [ 588,  591,  594,  597,  600,  603,  606,  609,  612,  615,  618,  621,  624,  627,  798,  801,  804,  807,  810,  813,  816,  819,  822,  825,  828,  831,  834,  837],
        [ 589,  592,  595,  598,  601,  604,  607,  610,  613,  616,  619,  622,  625,  628,  799,  802,  805,  808,  811,  814,  817,  820,  823,  826,  829,  832,  835,  838],
        [ 590,  593,  596,  599,  602,  605,  608,  611,  614,  617,  620,  623,  626,  629,  800,  803,  806,  809,  812,  815,  818,  821,  824,  827,  830,  833,  836,  839],
        [ 840,  843,  846,  849,  852,  855,  858,  861,  864,  867,  870,  873,  876,  879, 1050, 1053, 1056, 1059, 1062, 1065, 1068, 1071, 1074, 1077, 1080, 1083, 1086, 1089],
        [ 841,  844,  847,  850,  853,  856,  859,  862,  865,  868,  871,  874,  877,  880, 1051, 1054, 1057, 1060, 1063, 1066, 1069, 1072, 1075, 1078, 1081, 1084, 1087, 1090],
        [ 842,  845,  848,  851,  854,  857,  860,  863,  866,  869,  872,  875,  878,  881, 1052, 1055, 1058, 1061, 1064, 1067, 1070, 1073, 1076, 1079, 1082, 1085, 1088, 1091],
        [ 882,  885,  888,  891,  894,  897,  900,  903,  906,  909,  912,  915,  918,  921, 1092, 1095, 1098, 1101, 1104, 1107, 1110, 1113, 1116, 1119, 1122, 1125, 1128, 1131],
        [ 883,  886,  889,  892,  895,  898,  901,  904,  907,  910,  913,  916,  919,  922, 1093, 1096, 1099, 1102, 1105, 1108, 1111, 1114, 1117, 1120, 1123, 1126, 1129, 1132],
        [ 884,  887,  890,  893,  896,  899,  902,  905,  908,  911,  914,  917,  920,  923, 1094, 1097, 1100, 1103, 1106, 1109, 1112, 1115, 1118, 1121, 1124, 1127, 1130, 1133],
        [ 924,  927,  930,  933,  936,  939,  942,  945,  948,  951,  954,  957,  960,  963, 1134, 1137, 1140, 1143, 1146, 1149, 1152, 1155, 1158, 1161, 1164, 1167, 1170, 1173],
        [ 925,  928,  931,  934,  937,  940,  943,  946,  949,  952,  955,  958,  961,  964, 1135, 1138, 1141, 1144, 1147, 1150, 1153, 1156, 1159, 1162, 1165, 1168, 1171, 1174],
        [ 926,  929,  932,  935,  938,  941,  944,  947,  950,  953,  956,  959,  962,  965, 1136, 1139, 1142, 1145, 1148, 1151, 1154, 1157, 1160, 1163, 1166, 1169, 1172, 1175],
        [ 966,  969,  972,  975,  978,  981,  984,  987,  990,  993,  996,  999, 1002, 1005, 1176, 1179, 1182, 1185, 1188, 1191, 1194, 1197, 1200, 1203, 1206, 1209, 1212, 1215],
        [ 967,  970,  973,  976,  979,  982,  985,  988,  991,  994,  997, 1000, 1003, 1006, 1177, 1180, 1183, 1186, 1189, 1192, 1195, 1198, 1201, 1204, 1207, 1210, 1213, 1216],
        [ 968,  971,  974,  977,  980,  983,  986,  989,  992,  995,  998, 1001, 1004, 1007, 1178, 1181, 1184, 1187, 1190, 1193, 1196, 1199, 1202, 1205, 1208, 1211, 1214, 1217],
        [1008, 1011, 1014, 1017, 1020, 1023, 1026, 1029, 1032, 1035, 1038, 1041, 1044, 1047, 1218, 1221, 1224, 1227, 1230, 1233, 1236, 1239, 1242, 1245, 1248, 1251, 1254, 1257],
        [1009, 1012, 1015, 1018, 1021, 1024, 1027, 1030, 1033, 1036, 1039, 1042, 1045, 1048, 1219, 1222, 1225, 1228, 1231, 1234, 1237, 1240, 1243, 1246, 1249, 1252, 1255, 1258],
        [1010, 1013, 1016, 1019, 1022, 1025, 1028, 1031, 1034, 1037, 1040, 1043, 1046, 1049, 1220, 1223, 1226, 1229, 1232, 1235, 1238, 1241, 1244, 1247, 1250, 1253, 1256, 1259]])
    # fmt: on
    access_order, access_count = tiles_tile_col_major.access_tensors()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # iter_col_major and tile_col_major
    tiles_tile_col_major_col_iter = TensorTiler2D.group_tiler(
        (3 * 5 * 3, 2 * 7 * 2),
        tile_dims=(3, 2),
        tile_group_dims=(5, 7),
        iter_col_major=True,
        tile_col_major=True,
    )
    assert tiles_tile_col_major_col_iter[0] == tile0_0
    assert tiles_tile_col_major_col_iter[1] == tile1_0
    assert tiles_tile_col_major_col_iter[3] == tile0_1

    # tile_col_major and pattern_repeat
    tiles_tile_col_major_pattern_repeat = TensorTiler2D.group_tiler(
        (3 * 5 * 3, 2 * 7 * 2),
        tile_dims=(3, 2),
        tile_group_dims=(5, 7),
        tile_col_major=True,
        pattern_repeat=2,
    )
    assert tiles_tile_col_major_pattern_repeat[0] == TensorTile(
        (3 * 5 * 3, 2 * 7 * 2), offset=0, sizes=[2, 5, 14, 3], strides=[0, 84, 1, 28]
    )

    # tile_group_col_major
    tiles_group_col_major = TensorTiler2D.group_tiler(
        (3 * 5 * 3, 2 * 7 * 2),
        tile_dims=(3, 2),
        tile_group_dims=(5, 7),
        tile_group_col_major=True,
    )
    tile0_0 = TensorTile(
        (3 * 5 * 3, 2 * 7 * 2), offset=0, sizes=[1, 7, 15, 2], strides=[0, 2, 28, 1]
    )
    assert tiles_group_col_major[0] == tile0_0
    tile0_1 = TensorTile(
        (3 * 5 * 3, 2 * 7 * 2), offset=14, sizes=[1, 7, 15, 2], strides=[0, 2, 28, 1]
    )
    assert tiles_group_col_major[1] == tile0_1
    tile1_0 = TensorTile(
        (3 * 5 * 3, 2 * 7 * 2), offset=420, sizes=[1, 7, 15, 2], strides=[0, 2, 28, 1]
    )
    assert tiles_group_col_major[2] == tile1_0

    # tile_group_col_major and tile_col_major
    tiles_group_col_major = TensorTiler2D.group_tiler(
        (3 * 5 * 3, 2 * 7 * 2),
        tile_dims=(3, 2),
        tile_group_dims=(5, 7),
        tile_col_major=True,
        tile_group_col_major=True,
    )
    tile0_0 = TensorTile(
        (3 * 5 * 3, 2 * 7 * 2), offset=0, sizes=[7, 5, 2, 3], strides=[2, 84, 1, 28]
    )
    assert tiles_group_col_major[0] == tile0_0
    tile0_1 = TensorTile(
        (3 * 5 * 3, 2 * 7 * 2), offset=14, sizes=[7, 5, 2, 3], strides=[2, 84, 1, 28]
    )
    assert tiles_group_col_major[1] == tile0_1
    tile1_0 = TensorTile(
        (3 * 5 * 3, 2 * 7 * 2), offset=420, sizes=[7, 5, 2, 3], strides=[2, 84, 1, 28]
    )
    assert tiles_group_col_major[2] == tile1_0

    # CHECK: Pass!
    print("Pass!")


# CHECK-LABEL: group_tiler_invalid
@construct_test
def group_tiler_invalid():
    try:
        tiles = TensorTiler2D.group_tiler(
            (), (3, 2), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Bad tensor dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.group_tiler(
            (10, 9, 4), (3, 2), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Too many tensor dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.group_tiler(
            (9, 4), (3, -1), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Bad tile dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.group_tiler(
            (9, 4), (3,), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Too few tile dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.group_tiler(
            (9, 4), (1, 1, 1), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Too many tile dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.group_tiler(
            (9, 4), (3, 2), (1, 1), tile_col_major=True, pattern_repeat=0
        )
        raise ValueError("Invalid repeat.")
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.group_tiler(
            (9, 4), (4, 2), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Indivisible tile (height)")
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.group_tiler(
            (9, 4), (3, 3), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Indivisible tile (width)")
    except ValueError:
        # good
        pass

    try:
        tiles = TensorTiler2D.group_tiler(
            (9, 4), (3, 2), (1,), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Too few tile group dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.group_tiler(
            (9, 4), (3, 2), (1, -1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Bad tile group dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.group_tiler(
            (9, 4), (3, 2), (1, 1, 1), tile_col_major=True
        )
        raise ValueError("Too many tile group dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.group_tiler((18, 8), (3, 2), (2, 3), tile_col_major=True)
        raise ValueError(
            "Indivisible by tile repeat width (but without allow_partial)."
        )
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.group_tiler((18, 8), (3, 2), (4, 2), tile_col_major=True)
        raise ValueError(
            "Indivisible by tile repeat height (but without allow_partial)."
        )
    except ValueError:
        # good
        pass

    # CHECK: Pass!
    print("Pass!")
