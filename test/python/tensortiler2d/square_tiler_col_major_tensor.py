import numpy as np

from aie.helpers.tensortiler.tensortiler2D import TensorTiler2D
from util import construct_test

# RUN: %python %s | FileCheck %s


# CHECK-LABEL: square_tiler_col_major_tensor
@construct_test
def square_tiler_col_major_tensor():
    tiler = TensorTiler2D(32, 32, 4, 4, tensor_col_major=True)
    access_order = tiler.access_order()
    reference_access = np.array(
        #fmt: off
        [
            [   0,   1,   2,   3, 128, 129, 130, 131, 256, 257, 258, 259, 384, 385, 386, 387, 512, 513, 514, 515, 640, 641, 642, 643, 768, 769, 770, 771, 896, 897, 898, 899,],
            [   4,   5,   6,   7, 132, 133, 134, 135, 260, 261, 262, 263, 388, 389, 390, 391, 516, 517, 518, 519, 644, 645, 646, 647, 772, 773, 774, 775, 900, 901, 902, 903,],
            [   8,   9,  10,  11, 136, 137, 138, 139, 264, 265, 266, 267, 392, 393, 394, 395, 520, 521, 522, 523, 648, 649, 650, 651, 776, 777, 778, 779, 904, 905, 906, 907,],
            [  12,  13,  14,  15, 140, 141, 142, 143, 268, 269, 270, 271, 396, 397, 398, 399, 524, 525, 526, 527, 652, 653, 654, 655, 780, 781, 782, 783, 908, 909, 910, 911,],
            [  16,  17,  18,  19, 144, 145, 146, 147, 272, 273, 274, 275, 400, 401, 402, 403, 528, 529, 530, 531, 656, 657, 658, 659, 784, 785, 786, 787, 912, 913, 914, 915,],
            [  20,  21,  22,  23, 148, 149, 150, 151, 276, 277, 278, 279, 404, 405, 406, 407, 532, 533, 534, 535, 660, 661, 662, 663, 788, 789, 790, 791, 916, 917, 918, 919,],
            [  24,  25,  26,  27, 152, 153, 154, 155, 280, 281, 282, 283, 408, 409, 410, 411, 536, 537, 538, 539, 664, 665, 666, 667, 792, 793, 794, 795, 920, 921, 922, 923,],
            [  28,  29,  30,  31, 156, 157, 158, 159, 284, 285, 286, 287, 412, 413, 414, 415, 540, 541, 542, 543, 668, 669, 670, 671, 796, 797, 798, 799, 924, 925, 926, 927,],
            [  32,  33,  34,  35, 160, 161, 162, 163, 288, 289, 290, 291, 416, 417, 418, 419, 544, 545, 546, 547, 672, 673, 674, 675, 800, 801, 802, 803, 928, 929, 930, 931,],
            [  36,  37,  38,  39, 164, 165, 166, 167, 292, 293, 294, 295, 420, 421, 422, 423, 548, 549, 550, 551, 676, 677, 678, 679, 804, 805, 806, 807, 932, 933, 934, 935,],
            [  40,  41,  42,  43, 168, 169, 170, 171, 296, 297, 298, 299, 424, 425, 426, 427, 552, 553, 554, 555, 680, 681, 682, 683, 808, 809, 810, 811, 936, 937, 938, 939,],
            [  44,  45,  46,  47, 172, 173, 174, 175, 300, 301, 302, 303, 428, 429, 430, 431, 556, 557, 558, 559, 684, 685, 686, 687, 812, 813, 814, 815, 940, 941, 942, 943,],
            [  48,  49,  50,  51, 176, 177, 178, 179, 304, 305, 306, 307, 432, 433, 434, 435, 560, 561, 562, 563, 688, 689, 690, 691, 816, 817, 818, 819, 944, 945, 946, 947,],
            [  52,  53,  54,  55, 180, 181, 182, 183, 308, 309, 310, 311, 436, 437, 438, 439, 564, 565, 566, 567, 692, 693, 694, 695, 820, 821, 822, 823, 948, 949, 950, 951,],
            [  56,  57,  58,  59, 184, 185, 186, 187, 312, 313, 314, 315, 440, 441, 442, 443, 568, 569, 570, 571, 696, 697, 698, 699, 824, 825, 826, 827, 952, 953, 954, 955,],
            [  60,  61,  62,  63, 188, 189, 190, 191, 316, 317, 318, 319, 444, 445, 446, 447, 572, 573, 574, 575, 700, 701, 702, 703, 828, 829, 830, 831, 956, 957, 958, 959,],
            [  64,  65,  66,  67, 192, 193, 194, 195, 320, 321, 322, 323, 448, 449, 450, 451, 576, 577, 578, 579, 704, 705, 706, 707, 832, 833, 834, 835, 960, 961, 962, 963,],
            [  68,  69,  70,  71, 196, 197, 198, 199, 324, 325, 326, 327, 452, 453, 454, 455, 580, 581, 582, 583, 708, 709, 710, 711, 836, 837, 838, 839, 964, 965, 966, 967,],
            [  72,  73,  74,  75, 200, 201, 202, 203, 328, 329, 330, 331, 456, 457, 458, 459, 584, 585, 586, 587, 712, 713, 714, 715, 840, 841, 842, 843, 968, 969, 970, 971,],
            [  76,  77,  78,  79, 204, 205, 206, 207, 332, 333, 334, 335, 460, 461, 462, 463, 588, 589, 590, 591, 716, 717, 718, 719, 844, 845, 846, 847, 972, 973, 974, 975,],
            [  80,  81,  82,  83, 208, 209, 210, 211, 336, 337, 338, 339, 464, 465, 466, 467, 592, 593, 594, 595, 720, 721, 722, 723, 848, 849, 850, 851, 976, 977, 978, 979,],
            [  84,  85,  86,  87, 212, 213, 214, 215, 340, 341, 342, 343, 468, 469, 470, 471, 596, 597, 598, 599, 724, 725, 726, 727, 852, 853, 854, 855, 980, 981, 982, 983,],
            [  88,  89,  90,  91, 216, 217, 218, 219, 344, 345, 346, 347, 472, 473, 474, 475, 600, 601, 602, 603, 728, 729, 730, 731, 856, 857, 858, 859, 984, 985, 986, 987,],
            [  92,  93,  94,  95, 220, 221, 222, 223, 348, 349, 350, 351, 476, 477, 478, 479, 604, 605, 606, 607, 732, 733, 734, 735, 860, 861, 862, 863, 988, 989, 990, 991,],
            [  96,  97,  98,  99, 224, 225, 226, 227, 352, 353, 354, 355, 480, 481, 482, 483, 608, 609, 610, 611, 736, 737, 738, 739, 864, 865, 866, 867, 992, 993, 994, 995,],
            [ 100, 101, 102, 103, 228, 229, 230, 231, 356, 357, 358, 359, 484, 485, 486, 487, 612, 613, 614, 615, 740, 741, 742, 743, 868, 869, 870, 871, 996, 997, 998, 999,],
            [ 104, 105, 106, 107, 232, 233, 234, 235, 360, 361, 362, 363, 488, 489, 490, 491, 616, 617, 618, 619, 744, 745, 746, 747, 872, 873, 874, 875,1000,1001,1002,1003,],
            [ 108, 109, 110, 111, 236, 237, 238, 239, 364, 365, 366, 367, 492, 493, 494, 495, 620, 621, 622, 623, 748, 749, 750, 751, 876, 877, 878, 879,1004,1005,1006,1007,],
            [ 112, 113, 114, 115, 240, 241, 242, 243, 368, 369, 370, 371, 496, 497, 498, 499, 624, 625, 626, 627, 752, 753, 754, 755, 880, 881, 882, 883,1008,1009,1010,1011,],
            [ 116, 117, 118, 119, 244, 245, 246, 247, 372, 373, 374, 375, 500, 501, 502, 503, 628, 629, 630, 631, 756, 757, 758, 759, 884, 885, 886, 887,1012,1013,1014,1015,],
            [ 120, 121, 122, 123, 248, 249, 250, 251, 376, 377, 378, 379, 504, 505, 506, 507, 632, 633, 634, 635, 760, 761, 762, 763, 888, 889, 890, 891,1016,1017,1018,1019,],
            [ 124, 125, 126, 127, 252, 253, 254, 255, 380, 381, 382, 383, 508, 509, 510, 511, 636, 637, 638, 639, 764, 765, 766, 767, 892, 893, 894, 895,1020,1021,1022,1023,],
        ],
        #fmt: on
        dtype=TensorTiler2D.DTYPE,
    )
    assert (reference_access == access_order).all()

    tile1_reference_order = np.array(
        #fmt: off
        [
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   0,   1,   2,   3,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   4,   5,   6,   7,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   8,   9,  10,  11,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  13,  14,  15,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
        ],
        #fmt: on
        dtype=TensorTiler2D.DTYPE,
    )

    tile_count = 0
    for t in tiler.tile_iter():
        if tile_count == 11:
            tile_access_order = t.access_order()
            assert (tile_access_order == tile1_reference_order).all()
        tile_count += 1
    assert tile_count == (32 // 4) * (32 // 4)

    # CHECK: Pass!
    print("Pass!")
