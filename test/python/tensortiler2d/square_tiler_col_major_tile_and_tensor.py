import numpy as np

from aie.helpers.tensortiler.tensortiler2D import TensorTiler2D
from util import construct_test

# RUN: %python %s | FileCheck %s


# CHECK-LABEL: square_tiler_col_major_tile_and_tensor
@construct_test
def square_tiler_col_major_tile_and_tensor():
    tiler = TensorTiler2D(32, 32, 4, 4, tensor_col_major=True, tile_col_major=True)
    access_order = tiler.access_order()
    reference_access = np.array(
        #fmt: off
        [
            [   0,   4,   8,  12, 128, 132, 136, 140, 256, 260, 264, 268, 384, 388, 392, 396, 512, 516, 520, 524, 640, 644, 648, 652, 768, 772, 776, 780, 896, 900, 904, 908,],
            [   1,   5,   9,  13, 129, 133, 137, 141, 257, 261, 265, 269, 385, 389, 393, 397, 513, 517, 521, 525, 641, 645, 649, 653, 769, 773, 777, 781, 897, 901, 905, 909,],
            [   2,   6,  10,  14, 130, 134, 138, 142, 258, 262, 266, 270, 386, 390, 394, 398, 514, 518, 522, 526, 642, 646, 650, 654, 770, 774, 778, 782, 898, 902, 906, 910,],
            [   3,   7,  11,  15, 131, 135, 139, 143, 259, 263, 267, 271, 387, 391, 395, 399, 515, 519, 523, 527, 643, 647, 651, 655, 771, 775, 779, 783, 899, 903, 907, 911,],
            [  16,  20,  24,  28, 144, 148, 152, 156, 272, 276, 280, 284, 400, 404, 408, 412, 528, 532, 536, 540, 656, 660, 664, 668, 784, 788, 792, 796, 912, 916, 920, 924,],
            [  17,  21,  25,  29, 145, 149, 153, 157, 273, 277, 281, 285, 401, 405, 409, 413, 529, 533, 537, 541, 657, 661, 665, 669, 785, 789, 793, 797, 913, 917, 921, 925,],
            [  18,  22,  26,  30, 146, 150, 154, 158, 274, 278, 282, 286, 402, 406, 410, 414, 530, 534, 538, 542, 658, 662, 666, 670, 786, 790, 794, 798, 914, 918, 922, 926,],
            [  19,  23,  27,  31, 147, 151, 155, 159, 275, 279, 283, 287, 403, 407, 411, 415, 531, 535, 539, 543, 659, 663, 667, 671, 787, 791, 795, 799, 915, 919, 923, 927,],
            [  32,  36,  40,  44, 160, 164, 168, 172, 288, 292, 296, 300, 416, 420, 424, 428, 544, 548, 552, 556, 672, 676, 680, 684, 800, 804, 808, 812, 928, 932, 936, 940,],
            [  33,  37,  41,  45, 161, 165, 169, 173, 289, 293, 297, 301, 417, 421, 425, 429, 545, 549, 553, 557, 673, 677, 681, 685, 801, 805, 809, 813, 929, 933, 937, 941,],
            [  34,  38,  42,  46, 162, 166, 170, 174, 290, 294, 298, 302, 418, 422, 426, 430, 546, 550, 554, 558, 674, 678, 682, 686, 802, 806, 810, 814, 930, 934, 938, 942,],
            [  35,  39,  43,  47, 163, 167, 171, 175, 291, 295, 299, 303, 419, 423, 427, 431, 547, 551, 555, 559, 675, 679, 683, 687, 803, 807, 811, 815, 931, 935, 939, 943,],
            [  48,  52,  56,  60, 176, 180, 184, 188, 304, 308, 312, 316, 432, 436, 440, 444, 560, 564, 568, 572, 688, 692, 696, 700, 816, 820, 824, 828, 944, 948, 952, 956,],
            [  49,  53,  57,  61, 177, 181, 185, 189, 305, 309, 313, 317, 433, 437, 441, 445, 561, 565, 569, 573, 689, 693, 697, 701, 817, 821, 825, 829, 945, 949, 953, 957,],
            [  50,  54,  58,  62, 178, 182, 186, 190, 306, 310, 314, 318, 434, 438, 442, 446, 562, 566, 570, 574, 690, 694, 698, 702, 818, 822, 826, 830, 946, 950, 954, 958,],
            [  51,  55,  59,  63, 179, 183, 187, 191, 307, 311, 315, 319, 435, 439, 443, 447, 563, 567, 571, 575, 691, 695, 699, 703, 819, 823, 827, 831, 947, 951, 955, 959,],
            [  64,  68,  72,  76, 192, 196, 200, 204, 320, 324, 328, 332, 448, 452, 456, 460, 576, 580, 584, 588, 704, 708, 712, 716, 832, 836, 840, 844, 960, 964, 968, 972,],
            [  65,  69,  73,  77, 193, 197, 201, 205, 321, 325, 329, 333, 449, 453, 457, 461, 577, 581, 585, 589, 705, 709, 713, 717, 833, 837, 841, 845, 961, 965, 969, 973,],
            [  66,  70,  74,  78, 194, 198, 202, 206, 322, 326, 330, 334, 450, 454, 458, 462, 578, 582, 586, 590, 706, 710, 714, 718, 834, 838, 842, 846, 962, 966, 970, 974,],
            [  67,  71,  75,  79, 195, 199, 203, 207, 323, 327, 331, 335, 451, 455, 459, 463, 579, 583, 587, 591, 707, 711, 715, 719, 835, 839, 843, 847, 963, 967, 971, 975,],
            [  80,  84,  88,  92, 208, 212, 216, 220, 336, 340, 344, 348, 464, 468, 472, 476, 592, 596, 600, 604, 720, 724, 728, 732, 848, 852, 856, 860, 976, 980, 984, 988,],
            [  81,  85,  89,  93, 209, 213, 217, 221, 337, 341, 345, 349, 465, 469, 473, 477, 593, 597, 601, 605, 721, 725, 729, 733, 849, 853, 857, 861, 977, 981, 985, 989,],
            [  82,  86,  90,  94, 210, 214, 218, 222, 338, 342, 346, 350, 466, 470, 474, 478, 594, 598, 602, 606, 722, 726, 730, 734, 850, 854, 858, 862, 978, 982, 986, 990,],
            [  83,  87,  91,  95, 211, 215, 219, 223, 339, 343, 347, 351, 467, 471, 475, 479, 595, 599, 603, 607, 723, 727, 731, 735, 851, 855, 859, 863, 979, 983, 987, 991,],
            [  96, 100, 104, 108, 224, 228, 232, 236, 352, 356, 360, 364, 480, 484, 488, 492, 608, 612, 616, 620, 736, 740, 744, 748, 864, 868, 872, 876, 992, 996,1000,1004,],
            [  97, 101, 105, 109, 225, 229, 233, 237, 353, 357, 361, 365, 481, 485, 489, 493, 609, 613, 617, 621, 737, 741, 745, 749, 865, 869, 873, 877, 993, 997,1001,1005,],
            [  98, 102, 106, 110, 226, 230, 234, 238, 354, 358, 362, 366, 482, 486, 490, 494, 610, 614, 618, 622, 738, 742, 746, 750, 866, 870, 874, 878, 994, 998,1002,1006,],
            [  99, 103, 107, 111, 227, 231, 235, 239, 355, 359, 363, 367, 483, 487, 491, 495, 611, 615, 619, 623, 739, 743, 747, 751, 867, 871, 875, 879, 995, 999,1003,1007,],
            [ 112, 116, 120, 124, 240, 244, 248, 252, 368, 372, 376, 380, 496, 500, 504, 508, 624, 628, 632, 636, 752, 756, 760, 764, 880, 884, 888, 892,1008,1012,1016,1020,],
            [ 113, 117, 121, 125, 241, 245, 249, 253, 369, 373, 377, 381, 497, 501, 505, 509, 625, 629, 633, 637, 753, 757, 761, 765, 881, 885, 889, 893,1009,1013,1017,1021,],
            [ 114, 118, 122, 126, 242, 246, 250, 254, 370, 374, 378, 382, 498, 502, 506, 510, 626, 630, 634, 638, 754, 758, 762, 766, 882, 886, 890, 894,1010,1014,1018,1022,],
            [ 115, 119, 123, 127, 243, 247, 251, 255, 371, 375, 379, 383, 499, 503, 507, 511, 627, 631, 635, 639, 755, 759, 763, 767, 883, 887, 891, 895,1011,1015,1019,1023,],
        ],
        #fmt: on
        dtype=TensorTiler2D.DTYPE,
    )
    assert (reference_access == access_order).all()

    tile1_reference_order = np.array(
        #fmt: off
        [
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   0,   4,   8,  12,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   1,   5,   9,  13,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   2,   6,  10,  14,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   3,   7,  11,  15,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
            [  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,],
        ],
        #fmt: on
        dtype=TensorTiler2D.DTYPE,
    )

    tile_count = 0
    for t in tiler.tile_iter():
        if tile_count == 7:
            tile_access_order = t.access_order()
            assert (tile_access_order == tile1_reference_order).all()
        tile_count += 1
    assert tile_count == (32 // 4) * (32 // 4)

    # CHECK: Pass!
    print("Pass!")
