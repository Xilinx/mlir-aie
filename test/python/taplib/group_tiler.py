import numpy as np

from aie.helpers.taplib import TensorAccessPattern, TensorTiler2D
from util import construct_test

# RUN: %python %s | FileCheck %s


# CHECK-LABEL: group_tiler
@construct_test
def group_tiler():
    # Default tile group dims
    taps = TensorTiler2D.group_tiler((3 * 5, 2 * 7), tile_dims=(3, 2))
    assert len(taps) == 5 * 7
    # fmt: off
    ref_access_order_tensor = np.array([
        [  0,   1,   6,   7,  12,  13,  18,  19,  24,  25,  30,  31,  36,  37],
        [  2,   3,   8,   9,  14,  15,  20,  21,  26,  27,  32,  33,  38,  39],
        [  4,   5,  10,  11,  16,  17,  22,  23,  28,  29,  34,  35,  40,  41],
        [ 42,  43,  48,  49,  54,  55,  60,  61,  66,  67,  72,  73,  78,  79],
        [ 44,  45,  50,  51,  56,  57,  62,  63,  68,  69,  74,  75,  80,  81],
        [ 46,  47,  52,  53,  58,  59,  64,  65,  70,  71,  76,  77,  82,  83],
        [ 84,  85,  90,  91,  96,  97, 102, 103, 108, 109, 114, 115, 120, 121],
        [ 86,  87,  92,  93,  98,  99, 104, 105, 110, 111, 116, 117, 122, 123],
        [ 88,  89,  94,  95, 100, 101, 106, 107, 112, 113, 118, 119, 124, 125],
        [126, 127, 132, 133, 138, 139, 144, 145, 150, 151, 156, 157, 162, 163],
        [128, 129, 134, 135, 140, 141, 146, 147, 152, 153, 158, 159, 164, 165],
        [130, 131, 136, 137, 142, 143, 148, 149, 154, 155, 160, 161, 166, 167],
        [168, 169, 174, 175, 180, 181, 186, 187, 192, 193, 198, 199, 204, 205],
        [170, 171, 176, 177, 182, 183, 188, 189, 194, 195, 200, 201, 206, 207],
        [172, 173, 178, 179, 184, 185, 190, 191, 196, 197, 202, 203, 208, 209]])
    # fmt: on
    access_order, access_count = taps.accesses()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    taps = TensorTiler2D.group_tiler(
        (3 * 5 * 3, 2 * 7 * 2), tile_dims=(3, 2), tile_group_dims=(5, 7)
    )
    assert len(taps) == 3 * 2
    tile0_0 = TensorAccessPattern(
        (3 * 5 * 3, 2 * 7 * 2), offset=0, sizes=[5, 7, 3, 2], strides=[84, 2, 28, 1]
    )
    assert taps[0] == tile0_0
    tile0_1 = TensorAccessPattern(
        (3 * 5 * 3, 2 * 7 * 2), offset=14, sizes=[5, 7, 3, 2], strides=[84, 2, 28, 1]
    )
    assert taps[1] == tile0_1
    tile1_0 = TensorAccessPattern(
        (3 * 5 * 3, 2 * 7 * 2), offset=420, sizes=[5, 7, 3, 2], strides=[84, 2, 28, 1]
    )
    assert taps[2] == tile1_0

    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    1,    6,    7,   12,   13,   18,   19,   24,   25,   30,   31,   36,   37,  210,  211,  216,  217,  222,  223,  228,  229,  234,  235,  240,  241,  246,  247],
        [   2,    3,    8,    9,   14,   15,   20,   21,   26,   27,   32,   33,   38,   39,  212,  213,  218,  219,  224,  225,  230,  231,  236,  237,  242,  243,  248,  249],
        [   4,    5,   10,   11,   16,   17,   22,   23,   28,   29,   34,   35,   40,   41,  214,  215,  220,  221,  226,  227,  232,  233,  238,  239,  244,  245,  250,  251],
        [  42,   43,   48,   49,   54,   55,   60,   61,   66,   67,   72,   73,   78,   79,  252,  253,  258,  259,  264,  265,  270,  271,  276,  277,  282,  283,  288,  289],
        [  44,   45,   50,   51,   56,   57,   62,   63,   68,   69,   74,   75,   80,   81,  254,  255,  260,  261,  266,  267,  272,  273,  278,  279,  284,  285,  290,  291],
        [  46,   47,   52,   53,   58,   59,   64,   65,   70,   71,   76,   77,   82,   83,  256,  257,  262,  263,  268,  269,  274,  275,  280,  281,  286,  287,  292,  293],
        [  84,   85,   90,   91,   96,   97,  102,  103,  108,  109,  114,  115,  120,  121,  294,  295,  300,  301,  306,  307,  312,  313,  318,  319,  324,  325,  330,  331],
        [  86,   87,   92,   93,   98,   99,  104,  105,  110,  111,  116,  117,  122,  123,  296,  297,  302,  303,  308,  309,  314,  315,  320,  321,  326,  327,  332,  333],
        [  88,   89,   94,   95,  100,  101,  106,  107,  112,  113,  118,  119,  124,  125,  298,  299,  304,  305,  310,  311,  316,  317,  322,  323,  328,  329,  334,  335],
        [ 126,  127,  132,  133,  138,  139,  144,  145,  150,  151,  156,  157,  162,  163,  336,  337,  342,  343,  348,  349,  354,  355,  360,  361,  366,  367,  372,  373],
        [ 128,  129,  134,  135,  140,  141,  146,  147,  152,  153,  158,  159,  164,  165,  338,  339,  344,  345,  350,  351,  356,  357,  362,  363,  368,  369,  374,  375],
        [ 130,  131,  136,  137,  142,  143,  148,  149,  154,  155,  160,  161,  166,  167,  340,  341,  346,  347,  352,  353,  358,  359,  364,  365,  370,  371,  376,  377],
        [ 168,  169,  174,  175,  180,  181,  186,  187,  192,  193,  198,  199,  204,  205,  378,  379,  384,  385,  390,  391,  396,  397,  402,  403,  408,  409,  414,  415],
        [ 170,  171,  176,  177,  182,  183,  188,  189,  194,  195,  200,  201,  206,  207,  380,  381,  386,  387,  392,  393,  398,  399,  404,  405,  410,  411,  416,  417],
        [ 172,  173,  178,  179,  184,  185,  190,  191,  196,  197,  202,  203,  208,  209,  382,  383,  388,  389,  394,  395,  400,  401,  406,  407,  412,  413,  418,  419],
        [ 420,  421,  426,  427,  432,  433,  438,  439,  444,  445,  450,  451,  456,  457,  630,  631,  636,  637,  642,  643,  648,  649,  654,  655,  660,  661,  666,  667],
        [ 422,  423,  428,  429,  434,  435,  440,  441,  446,  447,  452,  453,  458,  459,  632,  633,  638,  639,  644,  645,  650,  651,  656,  657,  662,  663,  668,  669],
        [ 424,  425,  430,  431,  436,  437,  442,  443,  448,  449,  454,  455,  460,  461,  634,  635,  640,  641,  646,  647,  652,  653,  658,  659,  664,  665,  670,  671],
        [ 462,  463,  468,  469,  474,  475,  480,  481,  486,  487,  492,  493,  498,  499,  672,  673,  678,  679,  684,  685,  690,  691,  696,  697,  702,  703,  708,  709],
        [ 464,  465,  470,  471,  476,  477,  482,  483,  488,  489,  494,  495,  500,  501,  674,  675,  680,  681,  686,  687,  692,  693,  698,  699,  704,  705,  710,  711],
        [ 466,  467,  472,  473,  478,  479,  484,  485,  490,  491,  496,  497,  502,  503,  676,  677,  682,  683,  688,  689,  694,  695,  700,  701,  706,  707,  712,  713],
        [ 504,  505,  510,  511,  516,  517,  522,  523,  528,  529,  534,  535,  540,  541,  714,  715,  720,  721,  726,  727,  732,  733,  738,  739,  744,  745,  750,  751],
        [ 506,  507,  512,  513,  518,  519,  524,  525,  530,  531,  536,  537,  542,  543,  716,  717,  722,  723,  728,  729,  734,  735,  740,  741,  746,  747,  752,  753],
        [ 508,  509,  514,  515,  520,  521,  526,  527,  532,  533,  538,  539,  544,  545,  718,  719,  724,  725,  730,  731,  736,  737,  742,  743,  748,  749,  754,  755],
        [ 546,  547,  552,  553,  558,  559,  564,  565,  570,  571,  576,  577,  582,  583,  756,  757,  762,  763,  768,  769,  774,  775,  780,  781,  786,  787,  792,  793],
        [ 548,  549,  554,  555,  560,  561,  566,  567,  572,  573,  578,  579,  584,  585,  758,  759,  764,  765,  770,  771,  776,  777,  782,  783,  788,  789,  794,  795],
        [ 550,  551,  556,  557,  562,  563,  568,  569,  574,  575,  580,  581,  586,  587,  760,  761,  766,  767,  772,  773,  778,  779,  784,  785,  790,  791,  796,  797],
        [ 588,  589,  594,  595,  600,  601,  606,  607,  612,  613,  618,  619,  624,  625,  798,  799,  804,  805,  810,  811,  816,  817,  822,  823,  828,  829,  834,  835],
        [ 590,  591,  596,  597,  602,  603,  608,  609,  614,  615,  620,  621,  626,  627,  800,  801,  806,  807,  812,  813,  818,  819,  824,  825,  830,  831,  836,  837],
        [ 592,  593,  598,  599,  604,  605,  610,  611,  616,  617,  622,  623,  628,  629,  802,  803,  808,  809,  814,  815,  820,  821,  826,  827,  832,  833,  838,  839],
        [ 840,  841,  846,  847,  852,  853,  858,  859,  864,  865,  870,  871,  876,  877, 1050, 1051, 1056, 1057, 1062, 1063, 1068, 1069, 1074, 1075, 1080, 1081, 1086, 1087],
        [ 842,  843,  848,  849,  854,  855,  860,  861,  866,  867,  872,  873,  878,  879, 1052, 1053, 1058, 1059, 1064, 1065, 1070, 1071, 1076, 1077, 1082, 1083, 1088, 1089],
        [ 844,  845,  850,  851,  856,  857,  862,  863,  868,  869,  874,  875,  880,  881, 1054, 1055, 1060, 1061, 1066, 1067, 1072, 1073, 1078, 1079, 1084, 1085, 1090, 1091],
        [ 882,  883,  888,  889,  894,  895,  900,  901,  906,  907,  912,  913,  918,  919, 1092, 1093, 1098, 1099, 1104, 1105, 1110, 1111, 1116, 1117, 1122, 1123, 1128, 1129],
        [ 884,  885,  890,  891,  896,  897,  902,  903,  908,  909,  914,  915,  920,  921, 1094, 1095, 1100, 1101, 1106, 1107, 1112, 1113, 1118, 1119, 1124, 1125, 1130, 1131],
        [ 886,  887,  892,  893,  898,  899,  904,  905,  910,  911,  916,  917,  922,  923, 1096, 1097, 1102, 1103, 1108, 1109, 1114, 1115, 1120, 1121, 1126, 1127, 1132, 1133],
        [ 924,  925,  930,  931,  936,  937,  942,  943,  948,  949,  954,  955,  960,  961, 1134, 1135, 1140, 1141, 1146, 1147, 1152, 1153, 1158, 1159, 1164, 1165, 1170, 1171],
        [ 926,  927,  932,  933,  938,  939,  944,  945,  950,  951,  956,  957,  962,  963, 1136, 1137, 1142, 1143, 1148, 1149, 1154, 1155, 1160, 1161, 1166, 1167, 1172, 1173],
        [ 928,  929,  934,  935,  940,  941,  946,  947,  952,  953,  958,  959,  964,  965, 1138, 1139, 1144, 1145, 1150, 1151, 1156, 1157, 1162, 1163, 1168, 1169, 1174, 1175],
        [ 966,  967,  972,  973,  978,  979,  984,  985,  990,  991,  996,  997, 1002, 1003, 1176, 1177, 1182, 1183, 1188, 1189, 1194, 1195, 1200, 1201, 1206, 1207, 1212, 1213],
        [ 968,  969,  974,  975,  980,  981,  986,  987,  992,  993,  998,  999, 1004, 1005, 1178, 1179, 1184, 1185, 1190, 1191, 1196, 1197, 1202, 1203, 1208, 1209, 1214, 1215],
        [ 970,  971,  976,  977,  982,  983,  988,  989,  994,  995, 1000, 1001, 1006, 1007, 1180, 1181, 1186, 1187, 1192, 1193, 1198, 1199, 1204, 1205, 1210, 1211, 1216, 1217],
        [1008, 1009, 1014, 1015, 1020, 1021, 1026, 1027, 1032, 1033, 1038, 1039, 1044, 1045, 1218, 1219, 1224, 1225, 1230, 1231, 1236, 1237, 1242, 1243, 1248, 1249, 1254, 1255],
        [1010, 1011, 1016, 1017, 1022, 1023, 1028, 1029, 1034, 1035, 1040, 1041, 1046, 1047, 1220, 1221, 1226, 1227, 1232, 1233, 1238, 1239, 1244, 1245, 1250, 1251, 1256, 1257],
        [1012, 1013, 1018, 1019, 1024, 1025, 1030, 1031, 1036, 1037, 1042, 1043, 1048, 1049, 1222, 1223, 1228, 1229, 1234, 1235, 1240, 1241, 1246, 1247, 1252, 1253, 1258, 1259]])
    # fmt: on
    access_order, access_count = taps.accesses()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # iter_col_major
    taps_col_iter = TensorTiler2D.group_tiler(
        (3 * 5 * 3, 2 * 7 * 2),
        tile_dims=(3, 2),
        tile_group_dims=(5, 7),
        iter_col_major=True,
    )
    assert taps_col_iter[0] == tile0_0
    assert taps_col_iter[1] == tile1_0
    assert taps_col_iter[3] == tile0_1

    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    1,    6,    7,   12,   13,   18,   19,   24,   25,   30,   31,   36,   37,  630,  631,  636,  637,  642,  643,  648,  649,  654,  655,  660,  661,  666,  667],
        [   2,    3,    8,    9,   14,   15,   20,   21,   26,   27,   32,   33,   38,   39,  632,  633,  638,  639,  644,  645,  650,  651,  656,  657,  662,  663,  668,  669],
        [   4,    5,   10,   11,   16,   17,   22,   23,   28,   29,   34,   35,   40,   41,  634,  635,  640,  641,  646,  647,  652,  653,  658,  659,  664,  665,  670,  671],
        [  42,   43,   48,   49,   54,   55,   60,   61,   66,   67,   72,   73,   78,   79,  672,  673,  678,  679,  684,  685,  690,  691,  696,  697,  702,  703,  708,  709],
        [  44,   45,   50,   51,   56,   57,   62,   63,   68,   69,   74,   75,   80,   81,  674,  675,  680,  681,  686,  687,  692,  693,  698,  699,  704,  705,  710,  711],
        [  46,   47,   52,   53,   58,   59,   64,   65,   70,   71,   76,   77,   82,   83,  676,  677,  682,  683,  688,  689,  694,  695,  700,  701,  706,  707,  712,  713],
        [  84,   85,   90,   91,   96,   97,  102,  103,  108,  109,  114,  115,  120,  121,  714,  715,  720,  721,  726,  727,  732,  733,  738,  739,  744,  745,  750,  751],
        [  86,   87,   92,   93,   98,   99,  104,  105,  110,  111,  116,  117,  122,  123,  716,  717,  722,  723,  728,  729,  734,  735,  740,  741,  746,  747,  752,  753],
        [  88,   89,   94,   95,  100,  101,  106,  107,  112,  113,  118,  119,  124,  125,  718,  719,  724,  725,  730,  731,  736,  737,  742,  743,  748,  749,  754,  755],
        [ 126,  127,  132,  133,  138,  139,  144,  145,  150,  151,  156,  157,  162,  163,  756,  757,  762,  763,  768,  769,  774,  775,  780,  781,  786,  787,  792,  793],
        [ 128,  129,  134,  135,  140,  141,  146,  147,  152,  153,  158,  159,  164,  165,  758,  759,  764,  765,  770,  771,  776,  777,  782,  783,  788,  789,  794,  795],
        [ 130,  131,  136,  137,  142,  143,  148,  149,  154,  155,  160,  161,  166,  167,  760,  761,  766,  767,  772,  773,  778,  779,  784,  785,  790,  791,  796,  797],
        [ 168,  169,  174,  175,  180,  181,  186,  187,  192,  193,  198,  199,  204,  205,  798,  799,  804,  805,  810,  811,  816,  817,  822,  823,  828,  829,  834,  835],
        [ 170,  171,  176,  177,  182,  183,  188,  189,  194,  195,  200,  201,  206,  207,  800,  801,  806,  807,  812,  813,  818,  819,  824,  825,  830,  831,  836,  837],
        [ 172,  173,  178,  179,  184,  185,  190,  191,  196,  197,  202,  203,  208,  209,  802,  803,  808,  809,  814,  815,  820,  821,  826,  827,  832,  833,  838,  839],
        [ 210,  211,  216,  217,  222,  223,  228,  229,  234,  235,  240,  241,  246,  247,  840,  841,  846,  847,  852,  853,  858,  859,  864,  865,  870,  871,  876,  877],
        [ 212,  213,  218,  219,  224,  225,  230,  231,  236,  237,  242,  243,  248,  249,  842,  843,  848,  849,  854,  855,  860,  861,  866,  867,  872,  873,  878,  879],
        [ 214,  215,  220,  221,  226,  227,  232,  233,  238,  239,  244,  245,  250,  251,  844,  845,  850,  851,  856,  857,  862,  863,  868,  869,  874,  875,  880,  881],
        [ 252,  253,  258,  259,  264,  265,  270,  271,  276,  277,  282,  283,  288,  289,  882,  883,  888,  889,  894,  895,  900,  901,  906,  907,  912,  913,  918,  919],
        [ 254,  255,  260,  261,  266,  267,  272,  273,  278,  279,  284,  285,  290,  291,  884,  885,  890,  891,  896,  897,  902,  903,  908,  909,  914,  915,  920,  921],
        [ 256,  257,  262,  263,  268,  269,  274,  275,  280,  281,  286,  287,  292,  293,  886,  887,  892,  893,  898,  899,  904,  905,  910,  911,  916,  917,  922,  923],
        [ 294,  295,  300,  301,  306,  307,  312,  313,  318,  319,  324,  325,  330,  331,  924,  925,  930,  931,  936,  937,  942,  943,  948,  949,  954,  955,  960,  961],
        [ 296,  297,  302,  303,  308,  309,  314,  315,  320,  321,  326,  327,  332,  333,  926,  927,  932,  933,  938,  939,  944,  945,  950,  951,  956,  957,  962,  963],
        [ 298,  299,  304,  305,  310,  311,  316,  317,  322,  323,  328,  329,  334,  335,  928,  929,  934,  935,  940,  941,  946,  947,  952,  953,  958,  959,  964,  965],
        [ 336,  337,  342,  343,  348,  349,  354,  355,  360,  361,  366,  367,  372,  373,  966,  967,  972,  973,  978,  979,  984,  985,  990,  991,  996,  997, 1002, 1003],
        [ 338,  339,  344,  345,  350,  351,  356,  357,  362,  363,  368,  369,  374,  375,  968,  969,  974,  975,  980,  981,  986,  987,  992,  993,  998,  999, 1004, 1005],
        [ 340,  341,  346,  347,  352,  353,  358,  359,  364,  365,  370,  371,  376,  377,  970,  971,  976,  977,  982,  983,  988,  989,  994,  995, 1000, 1001, 1006, 1007],
        [ 378,  379,  384,  385,  390,  391,  396,  397,  402,  403,  408,  409,  414,  415, 1008, 1009, 1014, 1015, 1020, 1021, 1026, 1027, 1032, 1033, 1038, 1039, 1044, 1045],
        [ 380,  381,  386,  387,  392,  393,  398,  399,  404,  405,  410,  411,  416,  417, 1010, 1011, 1016, 1017, 1022, 1023, 1028, 1029, 1034, 1035, 1040, 1041, 1046, 1047],
        [ 382,  383,  388,  389,  394,  395,  400,  401,  406,  407,  412,  413,  418,  419, 1012, 1013, 1018, 1019, 1024, 1025, 1030, 1031, 1036, 1037, 1042, 1043, 1048, 1049],
        [ 420,  421,  426,  427,  432,  433,  438,  439,  444,  445,  450,  451,  456,  457, 1050, 1051, 1056, 1057, 1062, 1063, 1068, 1069, 1074, 1075, 1080, 1081, 1086, 1087],
        [ 422,  423,  428,  429,  434,  435,  440,  441,  446,  447,  452,  453,  458,  459, 1052, 1053, 1058, 1059, 1064, 1065, 1070, 1071, 1076, 1077, 1082, 1083, 1088, 1089],
        [ 424,  425,  430,  431,  436,  437,  442,  443,  448,  449,  454,  455,  460,  461, 1054, 1055, 1060, 1061, 1066, 1067, 1072, 1073, 1078, 1079, 1084, 1085, 1090, 1091],
        [ 462,  463,  468,  469,  474,  475,  480,  481,  486,  487,  492,  493,  498,  499, 1092, 1093, 1098, 1099, 1104, 1105, 1110, 1111, 1116, 1117, 1122, 1123, 1128, 1129],
        [ 464,  465,  470,  471,  476,  477,  482,  483,  488,  489,  494,  495,  500,  501, 1094, 1095, 1100, 1101, 1106, 1107, 1112, 1113, 1118, 1119, 1124, 1125, 1130, 1131],
        [ 466,  467,  472,  473,  478,  479,  484,  485,  490,  491,  496,  497,  502,  503, 1096, 1097, 1102, 1103, 1108, 1109, 1114, 1115, 1120, 1121, 1126, 1127, 1132, 1133],
        [ 504,  505,  510,  511,  516,  517,  522,  523,  528,  529,  534,  535,  540,  541, 1134, 1135, 1140, 1141, 1146, 1147, 1152, 1153, 1158, 1159, 1164, 1165, 1170, 1171],
        [ 506,  507,  512,  513,  518,  519,  524,  525,  530,  531,  536,  537,  542,  543, 1136, 1137, 1142, 1143, 1148, 1149, 1154, 1155, 1160, 1161, 1166, 1167, 1172, 1173],
        [ 508,  509,  514,  515,  520,  521,  526,  527,  532,  533,  538,  539,  544,  545, 1138, 1139, 1144, 1145, 1150, 1151, 1156, 1157, 1162, 1163, 1168, 1169, 1174, 1175],
        [ 546,  547,  552,  553,  558,  559,  564,  565,  570,  571,  576,  577,  582,  583, 1176, 1177, 1182, 1183, 1188, 1189, 1194, 1195, 1200, 1201, 1206, 1207, 1212, 1213],
        [ 548,  549,  554,  555,  560,  561,  566,  567,  572,  573,  578,  579,  584,  585, 1178, 1179, 1184, 1185, 1190, 1191, 1196, 1197, 1202, 1203, 1208, 1209, 1214, 1215],
        [ 550,  551,  556,  557,  562,  563,  568,  569,  574,  575,  580,  581,  586,  587, 1180, 1181, 1186, 1187, 1192, 1193, 1198, 1199, 1204, 1205, 1210, 1211, 1216, 1217],
        [ 588,  589,  594,  595,  600,  601,  606,  607,  612,  613,  618,  619,  624,  625, 1218, 1219, 1224, 1225, 1230, 1231, 1236, 1237, 1242, 1243, 1248, 1249, 1254, 1255],
        [ 590,  591,  596,  597,  602,  603,  608,  609,  614,  615,  620,  621,  626,  627, 1220, 1221, 1226, 1227, 1232, 1233, 1238, 1239, 1244, 1245, 1250, 1251, 1256, 1257],
        [ 592,  593,  598,  599,  604,  605,  610,  611,  616,  617,  622,  623,  628,  629, 1222, 1223, 1228, 1229, 1234, 1235, 1240, 1241, 1246, 1247, 1252, 1253, 1258, 1259]])
    # fmt: on
    access_order, access_count = taps_col_iter.accesses()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # tile_col_major
    taps_tile_col_major = TensorTiler2D.group_tiler(
        (3 * 5 * 3, 2 * 7 * 2),
        tile_dims=(3, 2),
        tile_group_dims=(5, 7),
        tile_col_major=True,
    )
    tile0_0 = TensorAccessPattern(
        (3 * 5 * 3, 2 * 7 * 2), offset=0, sizes=[1, 5, 14, 3], strides=[0, 84, 1, 28]
    )
    assert taps_tile_col_major[0] == tile0_0
    tile0_1 = TensorAccessPattern(
        (3 * 5 * 3, 2 * 7 * 2), offset=14, sizes=[1, 5, 14, 3], strides=[0, 84, 1, 28]
    )
    assert taps_tile_col_major[1] == tile0_1
    tile1_0 = TensorAccessPattern(
        (3 * 5 * 3, 2 * 7 * 2), offset=420, sizes=[1, 5, 14, 3], strides=[0, 84, 1, 28]
    )
    assert taps_tile_col_major[2] == tile1_0

    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    3,    6,    9,   12,   15,   18,   21,   24,   27,   30,   33,   36,   39,  210,  213,  216,  219,  222,  225,  228,  231,  234,  237,  240,  243,  246,  249],
        [   1,    4,    7,   10,   13,   16,   19,   22,   25,   28,   31,   34,   37,   40,  211,  214,  217,  220,  223,  226,  229,  232,  235,  238,  241,  244,  247,  250],
        [   2,    5,    8,   11,   14,   17,   20,   23,   26,   29,   32,   35,   38,   41,  212,  215,  218,  221,  224,  227,  230,  233,  236,  239,  242,  245,  248,  251],
        [  42,   45,   48,   51,   54,   57,   60,   63,   66,   69,   72,   75,   78,   81,  252,  255,  258,  261,  264,  267,  270,  273,  276,  279,  282,  285,  288,  291],
        [  43,   46,   49,   52,   55,   58,   61,   64,   67,   70,   73,   76,   79,   82,  253,  256,  259,  262,  265,  268,  271,  274,  277,  280,  283,  286,  289,  292],
        [  44,   47,   50,   53,   56,   59,   62,   65,   68,   71,   74,   77,   80,   83,  254,  257,  260,  263,  266,  269,  272,  275,  278,  281,  284,  287,  290,  293],
        [  84,   87,   90,   93,   96,   99,  102,  105,  108,  111,  114,  117,  120,  123,  294,  297,  300,  303,  306,  309,  312,  315,  318,  321,  324,  327,  330,  333],
        [  85,   88,   91,   94,   97,  100,  103,  106,  109,  112,  115,  118,  121,  124,  295,  298,  301,  304,  307,  310,  313,  316,  319,  322,  325,  328,  331,  334],
        [  86,   89,   92,   95,   98,  101,  104,  107,  110,  113,  116,  119,  122,  125,  296,  299,  302,  305,  308,  311,  314,  317,  320,  323,  326,  329,  332,  335],
        [ 126,  129,  132,  135,  138,  141,  144,  147,  150,  153,  156,  159,  162,  165,  336,  339,  342,  345,  348,  351,  354,  357,  360,  363,  366,  369,  372,  375],
        [ 127,  130,  133,  136,  139,  142,  145,  148,  151,  154,  157,  160,  163,  166,  337,  340,  343,  346,  349,  352,  355,  358,  361,  364,  367,  370,  373,  376],
        [ 128,  131,  134,  137,  140,  143,  146,  149,  152,  155,  158,  161,  164,  167,  338,  341,  344,  347,  350,  353,  356,  359,  362,  365,  368,  371,  374,  377],
        [ 168,  171,  174,  177,  180,  183,  186,  189,  192,  195,  198,  201,  204,  207,  378,  381,  384,  387,  390,  393,  396,  399,  402,  405,  408,  411,  414,  417],
        [ 169,  172,  175,  178,  181,  184,  187,  190,  193,  196,  199,  202,  205,  208,  379,  382,  385,  388,  391,  394,  397,  400,  403,  406,  409,  412,  415,  418],
        [ 170,  173,  176,  179,  182,  185,  188,  191,  194,  197,  200,  203,  206,  209,  380,  383,  386,  389,  392,  395,  398,  401,  404,  407,  410,  413,  416,  419],
        [ 420,  423,  426,  429,  432,  435,  438,  441,  444,  447,  450,  453,  456,  459,  630,  633,  636,  639,  642,  645,  648,  651,  654,  657,  660,  663,  666,  669],
        [ 421,  424,  427,  430,  433,  436,  439,  442,  445,  448,  451,  454,  457,  460,  631,  634,  637,  640,  643,  646,  649,  652,  655,  658,  661,  664,  667,  670],
        [ 422,  425,  428,  431,  434,  437,  440,  443,  446,  449,  452,  455,  458,  461,  632,  635,  638,  641,  644,  647,  650,  653,  656,  659,  662,  665,  668,  671],
        [ 462,  465,  468,  471,  474,  477,  480,  483,  486,  489,  492,  495,  498,  501,  672,  675,  678,  681,  684,  687,  690,  693,  696,  699,  702,  705,  708,  711],
        [ 463,  466,  469,  472,  475,  478,  481,  484,  487,  490,  493,  496,  499,  502,  673,  676,  679,  682,  685,  688,  691,  694,  697,  700,  703,  706,  709,  712],
        [ 464,  467,  470,  473,  476,  479,  482,  485,  488,  491,  494,  497,  500,  503,  674,  677,  680,  683,  686,  689,  692,  695,  698,  701,  704,  707,  710,  713],
        [ 504,  507,  510,  513,  516,  519,  522,  525,  528,  531,  534,  537,  540,  543,  714,  717,  720,  723,  726,  729,  732,  735,  738,  741,  744,  747,  750,  753],
        [ 505,  508,  511,  514,  517,  520,  523,  526,  529,  532,  535,  538,  541,  544,  715,  718,  721,  724,  727,  730,  733,  736,  739,  742,  745,  748,  751,  754],
        [ 506,  509,  512,  515,  518,  521,  524,  527,  530,  533,  536,  539,  542,  545,  716,  719,  722,  725,  728,  731,  734,  737,  740,  743,  746,  749,  752,  755],
        [ 546,  549,  552,  555,  558,  561,  564,  567,  570,  573,  576,  579,  582,  585,  756,  759,  762,  765,  768,  771,  774,  777,  780,  783,  786,  789,  792,  795],
        [ 547,  550,  553,  556,  559,  562,  565,  568,  571,  574,  577,  580,  583,  586,  757,  760,  763,  766,  769,  772,  775,  778,  781,  784,  787,  790,  793,  796],
        [ 548,  551,  554,  557,  560,  563,  566,  569,  572,  575,  578,  581,  584,  587,  758,  761,  764,  767,  770,  773,  776,  779,  782,  785,  788,  791,  794,  797],
        [ 588,  591,  594,  597,  600,  603,  606,  609,  612,  615,  618,  621,  624,  627,  798,  801,  804,  807,  810,  813,  816,  819,  822,  825,  828,  831,  834,  837],
        [ 589,  592,  595,  598,  601,  604,  607,  610,  613,  616,  619,  622,  625,  628,  799,  802,  805,  808,  811,  814,  817,  820,  823,  826,  829,  832,  835,  838],
        [ 590,  593,  596,  599,  602,  605,  608,  611,  614,  617,  620,  623,  626,  629,  800,  803,  806,  809,  812,  815,  818,  821,  824,  827,  830,  833,  836,  839],
        [ 840,  843,  846,  849,  852,  855,  858,  861,  864,  867,  870,  873,  876,  879, 1050, 1053, 1056, 1059, 1062, 1065, 1068, 1071, 1074, 1077, 1080, 1083, 1086, 1089],
        [ 841,  844,  847,  850,  853,  856,  859,  862,  865,  868,  871,  874,  877,  880, 1051, 1054, 1057, 1060, 1063, 1066, 1069, 1072, 1075, 1078, 1081, 1084, 1087, 1090],
        [ 842,  845,  848,  851,  854,  857,  860,  863,  866,  869,  872,  875,  878,  881, 1052, 1055, 1058, 1061, 1064, 1067, 1070, 1073, 1076, 1079, 1082, 1085, 1088, 1091],
        [ 882,  885,  888,  891,  894,  897,  900,  903,  906,  909,  912,  915,  918,  921, 1092, 1095, 1098, 1101, 1104, 1107, 1110, 1113, 1116, 1119, 1122, 1125, 1128, 1131],
        [ 883,  886,  889,  892,  895,  898,  901,  904,  907,  910,  913,  916,  919,  922, 1093, 1096, 1099, 1102, 1105, 1108, 1111, 1114, 1117, 1120, 1123, 1126, 1129, 1132],
        [ 884,  887,  890,  893,  896,  899,  902,  905,  908,  911,  914,  917,  920,  923, 1094, 1097, 1100, 1103, 1106, 1109, 1112, 1115, 1118, 1121, 1124, 1127, 1130, 1133],
        [ 924,  927,  930,  933,  936,  939,  942,  945,  948,  951,  954,  957,  960,  963, 1134, 1137, 1140, 1143, 1146, 1149, 1152, 1155, 1158, 1161, 1164, 1167, 1170, 1173],
        [ 925,  928,  931,  934,  937,  940,  943,  946,  949,  952,  955,  958,  961,  964, 1135, 1138, 1141, 1144, 1147, 1150, 1153, 1156, 1159, 1162, 1165, 1168, 1171, 1174],
        [ 926,  929,  932,  935,  938,  941,  944,  947,  950,  953,  956,  959,  962,  965, 1136, 1139, 1142, 1145, 1148, 1151, 1154, 1157, 1160, 1163, 1166, 1169, 1172, 1175],
        [ 966,  969,  972,  975,  978,  981,  984,  987,  990,  993,  996,  999, 1002, 1005, 1176, 1179, 1182, 1185, 1188, 1191, 1194, 1197, 1200, 1203, 1206, 1209, 1212, 1215],
        [ 967,  970,  973,  976,  979,  982,  985,  988,  991,  994,  997, 1000, 1003, 1006, 1177, 1180, 1183, 1186, 1189, 1192, 1195, 1198, 1201, 1204, 1207, 1210, 1213, 1216],
        [ 968,  971,  974,  977,  980,  983,  986,  989,  992,  995,  998, 1001, 1004, 1007, 1178, 1181, 1184, 1187, 1190, 1193, 1196, 1199, 1202, 1205, 1208, 1211, 1214, 1217],
        [1008, 1011, 1014, 1017, 1020, 1023, 1026, 1029, 1032, 1035, 1038, 1041, 1044, 1047, 1218, 1221, 1224, 1227, 1230, 1233, 1236, 1239, 1242, 1245, 1248, 1251, 1254, 1257],
        [1009, 1012, 1015, 1018, 1021, 1024, 1027, 1030, 1033, 1036, 1039, 1042, 1045, 1048, 1219, 1222, 1225, 1228, 1231, 1234, 1237, 1240, 1243, 1246, 1249, 1252, 1255, 1258],
        [1010, 1013, 1016, 1019, 1022, 1025, 1028, 1031, 1034, 1037, 1040, 1043, 1046, 1049, 1220, 1223, 1226, 1229, 1232, 1235, 1238, 1241, 1244, 1247, 1250, 1253, 1256, 1259]])
    # fmt: on
    access_order, access_count = taps_tile_col_major.accesses()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # iter_col_major and tile_col_major
    taps_tile_col_major_col_iter = TensorTiler2D.group_tiler(
        (3 * 5 * 3, 2 * 7 * 2),
        tile_dims=(3, 2),
        tile_group_dims=(5, 7),
        iter_col_major=True,
        tile_col_major=True,
    )
    assert taps_tile_col_major_col_iter[0] == tile0_0
    assert taps_tile_col_major_col_iter[1] == tile1_0
    assert taps_tile_col_major_col_iter[3] == tile0_1

    # tile_col_major and pattern_repeat
    taps_tile_col_major_pattern_repeat = TensorTiler2D.group_tiler(
        (3 * 5 * 3, 2 * 7 * 2),
        tile_dims=(3, 2),
        tile_group_dims=(5, 7),
        tile_col_major=True,
        pattern_repeat=2,
    )
    assert taps_tile_col_major_pattern_repeat[0] == TensorAccessPattern(
        (3 * 5 * 3, 2 * 7 * 2), offset=0, sizes=[2, 5, 14, 3], strides=[0, 84, 1, 28]
    )

    # fmt: off
    ref_access_order_tensor = np.array([
        [ 210,  213,  216,  219,  222,  225,  228,  231,  234,  237,  240,  243,  246,  249,  630,  633,  636,  639,  642,  645,  648,  651,  654,  657,  660,  663,  666,  669],
        [ 211,  214,  217,  220,  223,  226,  229,  232,  235,  238,  241,  244,  247,  250,  631,  634,  637,  640,  643,  646,  649,  652,  655,  658,  661,  664,  667,  670],
        [ 212,  215,  218,  221,  224,  227,  230,  233,  236,  239,  242,  245,  248,  251,  632,  635,  638,  641,  644,  647,  650,  653,  656,  659,  662,  665,  668,  671],
        [ 252,  255,  258,  261,  264,  267,  270,  273,  276,  279,  282,  285,  288,  291,  672,  675,  678,  681,  684,  687,  690,  693,  696,  699,  702,  705,  708,  711],
        [ 253,  256,  259,  262,  265,  268,  271,  274,  277,  280,  283,  286,  289,  292,  673,  676,  679,  682,  685,  688,  691,  694,  697,  700,  703,  706,  709,  712],
        [ 254,  257,  260,  263,  266,  269,  272,  275,  278,  281,  284,  287,  290,  293,  674,  677,  680,  683,  686,  689,  692,  695,  698,  701,  704,  707,  710,  713],
        [ 294,  297,  300,  303,  306,  309,  312,  315,  318,  321,  324,  327,  330,  333,  714,  717,  720,  723,  726,  729,  732,  735,  738,  741,  744,  747,  750,  753],
        [ 295,  298,  301,  304,  307,  310,  313,  316,  319,  322,  325,  328,  331,  334,  715,  718,  721,  724,  727,  730,  733,  736,  739,  742,  745,  748,  751,  754],
        [ 296,  299,  302,  305,  308,  311,  314,  317,  320,  323,  326,  329,  332,  335,  716,  719,  722,  725,  728,  731,  734,  737,  740,  743,  746,  749,  752,  755],
        [ 336,  339,  342,  345,  348,  351,  354,  357,  360,  363,  366,  369,  372,  375,  756,  759,  762,  765,  768,  771,  774,  777,  780,  783,  786,  789,  792,  795],
        [ 337,  340,  343,  346,  349,  352,  355,  358,  361,  364,  367,  370,  373,  376,  757,  760,  763,  766,  769,  772,  775,  778,  781,  784,  787,  790,  793,  796],
        [ 338,  341,  344,  347,  350,  353,  356,  359,  362,  365,  368,  371,  374,  377,  758,  761,  764,  767,  770,  773,  776,  779,  782,  785,  788,  791,  794,  797],
        [ 378,  381,  384,  387,  390,  393,  396,  399,  402,  405,  408,  411,  414,  417,  798,  801,  804,  807,  810,  813,  816,  819,  822,  825,  828,  831,  834,  837],
        [ 379,  382,  385,  388,  391,  394,  397,  400,  403,  406,  409,  412,  415,  418,  799,  802,  805,  808,  811,  814,  817,  820,  823,  826,  829,  832,  835,  838],
        [ 380,  383,  386,  389,  392,  395,  398,  401,  404,  407,  410,  413,  416,  419,  800,  803,  806,  809,  812,  815,  818,  821,  824,  827,  830,  833,  836,  839],
        [1050, 1053, 1056, 1059, 1062, 1065, 1068, 1071, 1074, 1077, 1080, 1083, 1086, 1089, 1470, 1473, 1476, 1479, 1482, 1485, 1488, 1491, 1494, 1497, 1500, 1503, 1506, 1509],
        [1051, 1054, 1057, 1060, 1063, 1066, 1069, 1072, 1075, 1078, 1081, 1084, 1087, 1090, 1471, 1474, 1477, 1480, 1483, 1486, 1489, 1492, 1495, 1498, 1501, 1504, 1507, 1510],
        [1052, 1055, 1058, 1061, 1064, 1067, 1070, 1073, 1076, 1079, 1082, 1085, 1088, 1091, 1472, 1475, 1478, 1481, 1484, 1487, 1490, 1493, 1496, 1499, 1502, 1505, 1508, 1511],
        [1092, 1095, 1098, 1101, 1104, 1107, 1110, 1113, 1116, 1119, 1122, 1125, 1128, 1131, 1512, 1515, 1518, 1521, 1524, 1527, 1530, 1533, 1536, 1539, 1542, 1545, 1548, 1551],
        [1093, 1096, 1099, 1102, 1105, 1108, 1111, 1114, 1117, 1120, 1123, 1126, 1129, 1132, 1513, 1516, 1519, 1522, 1525, 1528, 1531, 1534, 1537, 1540, 1543, 1546, 1549, 1552],
        [1094, 1097, 1100, 1103, 1106, 1109, 1112, 1115, 1118, 1121, 1124, 1127, 1130, 1133, 1514, 1517, 1520, 1523, 1526, 1529, 1532, 1535, 1538, 1541, 1544, 1547, 1550, 1553],
        [1134, 1137, 1140, 1143, 1146, 1149, 1152, 1155, 1158, 1161, 1164, 1167, 1170, 1173, 1554, 1557, 1560, 1563, 1566, 1569, 1572, 1575, 1578, 1581, 1584, 1587, 1590, 1593],
        [1135, 1138, 1141, 1144, 1147, 1150, 1153, 1156, 1159, 1162, 1165, 1168, 1171, 1174, 1555, 1558, 1561, 1564, 1567, 1570, 1573, 1576, 1579, 1582, 1585, 1588, 1591, 1594],
        [1136, 1139, 1142, 1145, 1148, 1151, 1154, 1157, 1160, 1163, 1166, 1169, 1172, 1175, 1556, 1559, 1562, 1565, 1568, 1571, 1574, 1577, 1580, 1583, 1586, 1589, 1592, 1595],
        [1176, 1179, 1182, 1185, 1188, 1191, 1194, 1197, 1200, 1203, 1206, 1209, 1212, 1215, 1596, 1599, 1602, 1605, 1608, 1611, 1614, 1617, 1620, 1623, 1626, 1629, 1632, 1635],
        [1177, 1180, 1183, 1186, 1189, 1192, 1195, 1198, 1201, 1204, 1207, 1210, 1213, 1216, 1597, 1600, 1603, 1606, 1609, 1612, 1615, 1618, 1621, 1624, 1627, 1630, 1633, 1636],
        [1178, 1181, 1184, 1187, 1190, 1193, 1196, 1199, 1202, 1205, 1208, 1211, 1214, 1217, 1598, 1601, 1604, 1607, 1610, 1613, 1616, 1619, 1622, 1625, 1628, 1631, 1634, 1637],
        [1218, 1221, 1224, 1227, 1230, 1233, 1236, 1239, 1242, 1245, 1248, 1251, 1254, 1257, 1638, 1641, 1644, 1647, 1650, 1653, 1656, 1659, 1662, 1665, 1668, 1671, 1674, 1677],
        [1219, 1222, 1225, 1228, 1231, 1234, 1237, 1240, 1243, 1246, 1249, 1252, 1255, 1258, 1639, 1642, 1645, 1648, 1651, 1654, 1657, 1660, 1663, 1666, 1669, 1672, 1675, 1678],
        [1220, 1223, 1226, 1229, 1232, 1235, 1238, 1241, 1244, 1247, 1250, 1253, 1256, 1259, 1640, 1643, 1646, 1649, 1652, 1655, 1658, 1661, 1664, 1667, 1670, 1673, 1676, 1679],
        [1890, 1893, 1896, 1899, 1902, 1905, 1908, 1911, 1914, 1917, 1920, 1923, 1926, 1929, 2310, 2313, 2316, 2319, 2322, 2325, 2328, 2331, 2334, 2337, 2340, 2343, 2346, 2349],
        [1891, 1894, 1897, 1900, 1903, 1906, 1909, 1912, 1915, 1918, 1921, 1924, 1927, 1930, 2311, 2314, 2317, 2320, 2323, 2326, 2329, 2332, 2335, 2338, 2341, 2344, 2347, 2350],
        [1892, 1895, 1898, 1901, 1904, 1907, 1910, 1913, 1916, 1919, 1922, 1925, 1928, 1931, 2312, 2315, 2318, 2321, 2324, 2327, 2330, 2333, 2336, 2339, 2342, 2345, 2348, 2351],
        [1932, 1935, 1938, 1941, 1944, 1947, 1950, 1953, 1956, 1959, 1962, 1965, 1968, 1971, 2352, 2355, 2358, 2361, 2364, 2367, 2370, 2373, 2376, 2379, 2382, 2385, 2388, 2391],
        [1933, 1936, 1939, 1942, 1945, 1948, 1951, 1954, 1957, 1960, 1963, 1966, 1969, 1972, 2353, 2356, 2359, 2362, 2365, 2368, 2371, 2374, 2377, 2380, 2383, 2386, 2389, 2392],
        [1934, 1937, 1940, 1943, 1946, 1949, 1952, 1955, 1958, 1961, 1964, 1967, 1970, 1973, 2354, 2357, 2360, 2363, 2366, 2369, 2372, 2375, 2378, 2381, 2384, 2387, 2390, 2393],
        [1974, 1977, 1980, 1983, 1986, 1989, 1992, 1995, 1998, 2001, 2004, 2007, 2010, 2013, 2394, 2397, 2400, 2403, 2406, 2409, 2412, 2415, 2418, 2421, 2424, 2427, 2430, 2433],
        [1975, 1978, 1981, 1984, 1987, 1990, 1993, 1996, 1999, 2002, 2005, 2008, 2011, 2014, 2395, 2398, 2401, 2404, 2407, 2410, 2413, 2416, 2419, 2422, 2425, 2428, 2431, 2434],
        [1976, 1979, 1982, 1985, 1988, 1991, 1994, 1997, 2000, 2003, 2006, 2009, 2012, 2015, 2396, 2399, 2402, 2405, 2408, 2411, 2414, 2417, 2420, 2423, 2426, 2429, 2432, 2435],
        [2016, 2019, 2022, 2025, 2028, 2031, 2034, 2037, 2040, 2043, 2046, 2049, 2052, 2055, 2436, 2439, 2442, 2445, 2448, 2451, 2454, 2457, 2460, 2463, 2466, 2469, 2472, 2475],
        [2017, 2020, 2023, 2026, 2029, 2032, 2035, 2038, 2041, 2044, 2047, 2050, 2053, 2056, 2437, 2440, 2443, 2446, 2449, 2452, 2455, 2458, 2461, 2464, 2467, 2470, 2473, 2476],
        [2018, 2021, 2024, 2027, 2030, 2033, 2036, 2039, 2042, 2045, 2048, 2051, 2054, 2057, 2438, 2441, 2444, 2447, 2450, 2453, 2456, 2459, 2462, 2465, 2468, 2471, 2474, 2477],
        [2058, 2061, 2064, 2067, 2070, 2073, 2076, 2079, 2082, 2085, 2088, 2091, 2094, 2097, 2478, 2481, 2484, 2487, 2490, 2493, 2496, 2499, 2502, 2505, 2508, 2511, 2514, 2517],
        [2059, 2062, 2065, 2068, 2071, 2074, 2077, 2080, 2083, 2086, 2089, 2092, 2095, 2098, 2479, 2482, 2485, 2488, 2491, 2494, 2497, 2500, 2503, 2506, 2509, 2512, 2515, 2518],
        [2060, 2063, 2066, 2069, 2072, 2075, 2078, 2081, 2084, 2087, 2090, 2093, 2096, 2099, 2480, 2483, 2486, 2489, 2492, 2495, 2498, 2501, 2504, 2507, 2510, 2513, 2516, 2519]])
    # fmt: on
    access_order, access_count = taps_tile_col_major_pattern_repeat.accesses()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 2).all()

    # tile_group_col_major
    taps_group_col_major = TensorTiler2D.group_tiler(
        (3 * 5 * 3, 2 * 7 * 2),
        tile_dims=(3, 2),
        tile_group_dims=(5, 7),
        tile_group_col_major=True,
    )
    tile0_0 = TensorAccessPattern(
        (3 * 5 * 3, 2 * 7 * 2), offset=0, sizes=[1, 7, 15, 2], strides=[0, 2, 28, 1]
    )
    assert taps_group_col_major[0] == tile0_0
    tile0_1 = TensorAccessPattern(
        (3 * 5 * 3, 2 * 7 * 2), offset=14, sizes=[1, 7, 15, 2], strides=[0, 2, 28, 1]
    )
    assert taps_group_col_major[1] == tile0_1
    tile1_0 = TensorAccessPattern(
        (3 * 5 * 3, 2 * 7 * 2), offset=420, sizes=[1, 7, 15, 2], strides=[0, 2, 28, 1]
    )
    assert taps_group_col_major[2] == tile1_0

    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    1,   30,   31,   60,   61,   90,   91,  120,  121,  150,  151,  180,  181,  210,  211,  240,  241,  270,  271,  300,  301,  330,  331,  360,  361,  390,  391],
        [   2,    3,   32,   33,   62,   63,   92,   93,  122,  123,  152,  153,  182,  183,  212,  213,  242,  243,  272,  273,  302,  303,  332,  333,  362,  363,  392,  393],
        [   4,    5,   34,   35,   64,   65,   94,   95,  124,  125,  154,  155,  184,  185,  214,  215,  244,  245,  274,  275,  304,  305,  334,  335,  364,  365,  394,  395],
        [   6,    7,   36,   37,   66,   67,   96,   97,  126,  127,  156,  157,  186,  187,  216,  217,  246,  247,  276,  277,  306,  307,  336,  337,  366,  367,  396,  397],
        [   8,    9,   38,   39,   68,   69,   98,   99,  128,  129,  158,  159,  188,  189,  218,  219,  248,  249,  278,  279,  308,  309,  338,  339,  368,  369,  398,  399],
        [  10,   11,   40,   41,   70,   71,  100,  101,  130,  131,  160,  161,  190,  191,  220,  221,  250,  251,  280,  281,  310,  311,  340,  341,  370,  371,  400,  401],
        [  12,   13,   42,   43,   72,   73,  102,  103,  132,  133,  162,  163,  192,  193,  222,  223,  252,  253,  282,  283,  312,  313,  342,  343,  372,  373,  402,  403],
        [  14,   15,   44,   45,   74,   75,  104,  105,  134,  135,  164,  165,  194,  195,  224,  225,  254,  255,  284,  285,  314,  315,  344,  345,  374,  375,  404,  405],
        [  16,   17,   46,   47,   76,   77,  106,  107,  136,  137,  166,  167,  196,  197,  226,  227,  256,  257,  286,  287,  316,  317,  346,  347,  376,  377,  406,  407],
        [  18,   19,   48,   49,   78,   79,  108,  109,  138,  139,  168,  169,  198,  199,  228,  229,  258,  259,  288,  289,  318,  319,  348,  349,  378,  379,  408,  409],
        [  20,   21,   50,   51,   80,   81,  110,  111,  140,  141,  170,  171,  200,  201,  230,  231,  260,  261,  290,  291,  320,  321,  350,  351,  380,  381,  410,  411],
        [  22,   23,   52,   53,   82,   83,  112,  113,  142,  143,  172,  173,  202,  203,  232,  233,  262,  263,  292,  293,  322,  323,  352,  353,  382,  383,  412,  413],
        [  24,   25,   54,   55,   84,   85,  114,  115,  144,  145,  174,  175,  204,  205,  234,  235,  264,  265,  294,  295,  324,  325,  354,  355,  384,  385,  414,  415],
        [  26,   27,   56,   57,   86,   87,  116,  117,  146,  147,  176,  177,  206,  207,  236,  237,  266,  267,  296,  297,  326,  327,  356,  357,  386,  387,  416,  417],
        [  28,   29,   58,   59,   88,   89,  118,  119,  148,  149,  178,  179,  208,  209,  238,  239,  268,  269,  298,  299,  328,  329,  358,  359,  388,  389,  418,  419],
        [ 420,  421,  450,  451,  480,  481,  510,  511,  540,  541,  570,  571,  600,  601,  630,  631,  660,  661,  690,  691,  720,  721,  750,  751,  780,  781,  810,  811],
        [ 422,  423,  452,  453,  482,  483,  512,  513,  542,  543,  572,  573,  602,  603,  632,  633,  662,  663,  692,  693,  722,  723,  752,  753,  782,  783,  812,  813],
        [ 424,  425,  454,  455,  484,  485,  514,  515,  544,  545,  574,  575,  604,  605,  634,  635,  664,  665,  694,  695,  724,  725,  754,  755,  784,  785,  814,  815],
        [ 426,  427,  456,  457,  486,  487,  516,  517,  546,  547,  576,  577,  606,  607,  636,  637,  666,  667,  696,  697,  726,  727,  756,  757,  786,  787,  816,  817],
        [ 428,  429,  458,  459,  488,  489,  518,  519,  548,  549,  578,  579,  608,  609,  638,  639,  668,  669,  698,  699,  728,  729,  758,  759,  788,  789,  818,  819],
        [ 430,  431,  460,  461,  490,  491,  520,  521,  550,  551,  580,  581,  610,  611,  640,  641,  670,  671,  700,  701,  730,  731,  760,  761,  790,  791,  820,  821],
        [ 432,  433,  462,  463,  492,  493,  522,  523,  552,  553,  582,  583,  612,  613,  642,  643,  672,  673,  702,  703,  732,  733,  762,  763,  792,  793,  822,  823],
        [ 434,  435,  464,  465,  494,  495,  524,  525,  554,  555,  584,  585,  614,  615,  644,  645,  674,  675,  704,  705,  734,  735,  764,  765,  794,  795,  824,  825],
        [ 436,  437,  466,  467,  496,  497,  526,  527,  556,  557,  586,  587,  616,  617,  646,  647,  676,  677,  706,  707,  736,  737,  766,  767,  796,  797,  826,  827],
        [ 438,  439,  468,  469,  498,  499,  528,  529,  558,  559,  588,  589,  618,  619,  648,  649,  678,  679,  708,  709,  738,  739,  768,  769,  798,  799,  828,  829],
        [ 440,  441,  470,  471,  500,  501,  530,  531,  560,  561,  590,  591,  620,  621,  650,  651,  680,  681,  710,  711,  740,  741,  770,  771,  800,  801,  830,  831],
        [ 442,  443,  472,  473,  502,  503,  532,  533,  562,  563,  592,  593,  622,  623,  652,  653,  682,  683,  712,  713,  742,  743,  772,  773,  802,  803,  832,  833],
        [ 444,  445,  474,  475,  504,  505,  534,  535,  564,  565,  594,  595,  624,  625,  654,  655,  684,  685,  714,  715,  744,  745,  774,  775,  804,  805,  834,  835],
        [ 446,  447,  476,  477,  506,  507,  536,  537,  566,  567,  596,  597,  626,  627,  656,  657,  686,  687,  716,  717,  746,  747,  776,  777,  806,  807,  836,  837],
        [ 448,  449,  478,  479,  508,  509,  538,  539,  568,  569,  598,  599,  628,  629,  658,  659,  688,  689,  718,  719,  748,  749,  778,  779,  808,  809,  838,  839],
        [ 840,  841,  870,  871,  900,  901,  930,  931,  960,  961,  990,  991, 1020, 1021, 1050, 1051, 1080, 1081, 1110, 1111, 1140, 1141, 1170, 1171, 1200, 1201, 1230, 1231],
        [ 842,  843,  872,  873,  902,  903,  932,  933,  962,  963,  992,  993, 1022, 1023, 1052, 1053, 1082, 1083, 1112, 1113, 1142, 1143, 1172, 1173, 1202, 1203, 1232, 1233],
        [ 844,  845,  874,  875,  904,  905,  934,  935,  964,  965,  994,  995, 1024, 1025, 1054, 1055, 1084, 1085, 1114, 1115, 1144, 1145, 1174, 1175, 1204, 1205, 1234, 1235],
        [ 846,  847,  876,  877,  906,  907,  936,  937,  966,  967,  996,  997, 1026, 1027, 1056, 1057, 1086, 1087, 1116, 1117, 1146, 1147, 1176, 1177, 1206, 1207, 1236, 1237],
        [ 848,  849,  878,  879,  908,  909,  938,  939,  968,  969,  998,  999, 1028, 1029, 1058, 1059, 1088, 1089, 1118, 1119, 1148, 1149, 1178, 1179, 1208, 1209, 1238, 1239],
        [ 850,  851,  880,  881,  910,  911,  940,  941,  970,  971, 1000, 1001, 1030, 1031, 1060, 1061, 1090, 1091, 1120, 1121, 1150, 1151, 1180, 1181, 1210, 1211, 1240, 1241],
        [ 852,  853,  882,  883,  912,  913,  942,  943,  972,  973, 1002, 1003, 1032, 1033, 1062, 1063, 1092, 1093, 1122, 1123, 1152, 1153, 1182, 1183, 1212, 1213, 1242, 1243],
        [ 854,  855,  884,  885,  914,  915,  944,  945,  974,  975, 1004, 1005, 1034, 1035, 1064, 1065, 1094, 1095, 1124, 1125, 1154, 1155, 1184, 1185, 1214, 1215, 1244, 1245],
        [ 856,  857,  886,  887,  916,  917,  946,  947,  976,  977, 1006, 1007, 1036, 1037, 1066, 1067, 1096, 1097, 1126, 1127, 1156, 1157, 1186, 1187, 1216, 1217, 1246, 1247],
        [ 858,  859,  888,  889,  918,  919,  948,  949,  978,  979, 1008, 1009, 1038, 1039, 1068, 1069, 1098, 1099, 1128, 1129, 1158, 1159, 1188, 1189, 1218, 1219, 1248, 1249],
        [ 860,  861,  890,  891,  920,  921,  950,  951,  980,  981, 1010, 1011, 1040, 1041, 1070, 1071, 1100, 1101, 1130, 1131, 1160, 1161, 1190, 1191, 1220, 1221, 1250, 1251],
        [ 862,  863,  892,  893,  922,  923,  952,  953,  982,  983, 1012, 1013, 1042, 1043, 1072, 1073, 1102, 1103, 1132, 1133, 1162, 1163, 1192, 1193, 1222, 1223, 1252, 1253],
        [ 864,  865,  894,  895,  924,  925,  954,  955,  984,  985, 1014, 1015, 1044, 1045, 1074, 1075, 1104, 1105, 1134, 1135, 1164, 1165, 1194, 1195, 1224, 1225, 1254, 1255],
        [ 866,  867,  896,  897,  926,  927,  956,  957,  986,  987, 1016, 1017, 1046, 1047, 1076, 1077, 1106, 1107, 1136, 1137, 1166, 1167, 1196, 1197, 1226, 1227, 1256, 1257],
        [ 868,  869,  898,  899,  928,  929,  958,  959,  988,  989, 1018, 1019, 1048, 1049, 1078, 1079, 1108, 1109, 1138, 1139, 1168, 1169, 1198, 1199, 1228, 1229, 1258, 1259]])
    # fmt: on
    access_order, access_count = taps_group_col_major.accesses()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # tile_group_col_major and tile_col_major
    taps_group_col_major = TensorTiler2D.group_tiler(
        (3 * 5 * 3, 2 * 7 * 2),
        tile_dims=(3, 2),
        tile_group_dims=(5, 7),
        tile_col_major=True,
        tile_group_col_major=True,
    )
    tile0_0 = TensorAccessPattern(
        (3 * 5 * 3, 2 * 7 * 2), offset=0, sizes=[7, 5, 2, 3], strides=[2, 84, 1, 28]
    )
    assert taps_group_col_major[0] == tile0_0
    tile0_1 = TensorAccessPattern(
        (3 * 5 * 3, 2 * 7 * 2), offset=14, sizes=[7, 5, 2, 3], strides=[2, 84, 1, 28]
    )
    assert taps_group_col_major[1] == tile0_1
    tile1_0 = TensorAccessPattern(
        (3 * 5 * 3, 2 * 7 * 2), offset=420, sizes=[7, 5, 2, 3], strides=[2, 84, 1, 28]
    )
    assert taps_group_col_major[2] == tile1_0

    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    3,   30,   33,   60,   63,   90,   93,  120,  123,  150,  153,  180,  183,  210,  213,  240,  243,  270,  273,  300,  303,  330,  333,  360,  363,  390,  393],
        [   1,    4,   31,   34,   61,   64,   91,   94,  121,  124,  151,  154,  181,  184,  211,  214,  241,  244,  271,  274,  301,  304,  331,  334,  361,  364,  391,  394],
        [   2,    5,   32,   35,   62,   65,   92,   95,  122,  125,  152,  155,  182,  185,  212,  215,  242,  245,  272,  275,  302,  305,  332,  335,  362,  365,  392,  395],
        [   6,    9,   36,   39,   66,   69,   96,   99,  126,  129,  156,  159,  186,  189,  216,  219,  246,  249,  276,  279,  306,  309,  336,  339,  366,  369,  396,  399],
        [   7,   10,   37,   40,   67,   70,   97,  100,  127,  130,  157,  160,  187,  190,  217,  220,  247,  250,  277,  280,  307,  310,  337,  340,  367,  370,  397,  400],
        [   8,   11,   38,   41,   68,   71,   98,  101,  128,  131,  158,  161,  188,  191,  218,  221,  248,  251,  278,  281,  308,  311,  338,  341,  368,  371,  398,  401],
        [  12,   15,   42,   45,   72,   75,  102,  105,  132,  135,  162,  165,  192,  195,  222,  225,  252,  255,  282,  285,  312,  315,  342,  345,  372,  375,  402,  405],
        [  13,   16,   43,   46,   73,   76,  103,  106,  133,  136,  163,  166,  193,  196,  223,  226,  253,  256,  283,  286,  313,  316,  343,  346,  373,  376,  403,  406],
        [  14,   17,   44,   47,   74,   77,  104,  107,  134,  137,  164,  167,  194,  197,  224,  227,  254,  257,  284,  287,  314,  317,  344,  347,  374,  377,  404,  407],
        [  18,   21,   48,   51,   78,   81,  108,  111,  138,  141,  168,  171,  198,  201,  228,  231,  258,  261,  288,  291,  318,  321,  348,  351,  378,  381,  408,  411],
        [  19,   22,   49,   52,   79,   82,  109,  112,  139,  142,  169,  172,  199,  202,  229,  232,  259,  262,  289,  292,  319,  322,  349,  352,  379,  382,  409,  412],
        [  20,   23,   50,   53,   80,   83,  110,  113,  140,  143,  170,  173,  200,  203,  230,  233,  260,  263,  290,  293,  320,  323,  350,  353,  380,  383,  410,  413],
        [  24,   27,   54,   57,   84,   87,  114,  117,  144,  147,  174,  177,  204,  207,  234,  237,  264,  267,  294,  297,  324,  327,  354,  357,  384,  387,  414,  417],
        [  25,   28,   55,   58,   85,   88,  115,  118,  145,  148,  175,  178,  205,  208,  235,  238,  265,  268,  295,  298,  325,  328,  355,  358,  385,  388,  415,  418],
        [  26,   29,   56,   59,   86,   89,  116,  119,  146,  149,  176,  179,  206,  209,  236,  239,  266,  269,  296,  299,  326,  329,  356,  359,  386,  389,  416,  419],
        [ 420,  423,  450,  453,  480,  483,  510,  513,  540,  543,  570,  573,  600,  603,  630,  633,  660,  663,  690,  693,  720,  723,  750,  753,  780,  783,  810,  813],
        [ 421,  424,  451,  454,  481,  484,  511,  514,  541,  544,  571,  574,  601,  604,  631,  634,  661,  664,  691,  694,  721,  724,  751,  754,  781,  784,  811,  814],
        [ 422,  425,  452,  455,  482,  485,  512,  515,  542,  545,  572,  575,  602,  605,  632,  635,  662,  665,  692,  695,  722,  725,  752,  755,  782,  785,  812,  815],
        [ 426,  429,  456,  459,  486,  489,  516,  519,  546,  549,  576,  579,  606,  609,  636,  639,  666,  669,  696,  699,  726,  729,  756,  759,  786,  789,  816,  819],
        [ 427,  430,  457,  460,  487,  490,  517,  520,  547,  550,  577,  580,  607,  610,  637,  640,  667,  670,  697,  700,  727,  730,  757,  760,  787,  790,  817,  820],
        [ 428,  431,  458,  461,  488,  491,  518,  521,  548,  551,  578,  581,  608,  611,  638,  641,  668,  671,  698,  701,  728,  731,  758,  761,  788,  791,  818,  821],
        [ 432,  435,  462,  465,  492,  495,  522,  525,  552,  555,  582,  585,  612,  615,  642,  645,  672,  675,  702,  705,  732,  735,  762,  765,  792,  795,  822,  825],
        [ 433,  436,  463,  466,  493,  496,  523,  526,  553,  556,  583,  586,  613,  616,  643,  646,  673,  676,  703,  706,  733,  736,  763,  766,  793,  796,  823,  826],
        [ 434,  437,  464,  467,  494,  497,  524,  527,  554,  557,  584,  587,  614,  617,  644,  647,  674,  677,  704,  707,  734,  737,  764,  767,  794,  797,  824,  827],
        [ 438,  441,  468,  471,  498,  501,  528,  531,  558,  561,  588,  591,  618,  621,  648,  651,  678,  681,  708,  711,  738,  741,  768,  771,  798,  801,  828,  831],
        [ 439,  442,  469,  472,  499,  502,  529,  532,  559,  562,  589,  592,  619,  622,  649,  652,  679,  682,  709,  712,  739,  742,  769,  772,  799,  802,  829,  832],
        [ 440,  443,  470,  473,  500,  503,  530,  533,  560,  563,  590,  593,  620,  623,  650,  653,  680,  683,  710,  713,  740,  743,  770,  773,  800,  803,  830,  833],
        [ 444,  447,  474,  477,  504,  507,  534,  537,  564,  567,  594,  597,  624,  627,  654,  657,  684,  687,  714,  717,  744,  747,  774,  777,  804,  807,  834,  837],
        [ 445,  448,  475,  478,  505,  508,  535,  538,  565,  568,  595,  598,  625,  628,  655,  658,  685,  688,  715,  718,  745,  748,  775,  778,  805,  808,  835,  838],
        [ 446,  449,  476,  479,  506,  509,  536,  539,  566,  569,  596,  599,  626,  629,  656,  659,  686,  689,  716,  719,  746,  749,  776,  779,  806,  809,  836,  839],
        [ 840,  843,  870,  873,  900,  903,  930,  933,  960,  963,  990,  993, 1020, 1023, 1050, 1053, 1080, 1083, 1110, 1113, 1140, 1143, 1170, 1173, 1200, 1203, 1230, 1233],
        [ 841,  844,  871,  874,  901,  904,  931,  934,  961,  964,  991,  994, 1021, 1024, 1051, 1054, 1081, 1084, 1111, 1114, 1141, 1144, 1171, 1174, 1201, 1204, 1231, 1234],
        [ 842,  845,  872,  875,  902,  905,  932,  935,  962,  965,  992,  995, 1022, 1025, 1052, 1055, 1082, 1085, 1112, 1115, 1142, 1145, 1172, 1175, 1202, 1205, 1232, 1235],
        [ 846,  849,  876,  879,  906,  909,  936,  939,  966,  969,  996,  999, 1026, 1029, 1056, 1059, 1086, 1089, 1116, 1119, 1146, 1149, 1176, 1179, 1206, 1209, 1236, 1239],
        [ 847,  850,  877,  880,  907,  910,  937,  940,  967,  970,  997, 1000, 1027, 1030, 1057, 1060, 1087, 1090, 1117, 1120, 1147, 1150, 1177, 1180, 1207, 1210, 1237, 1240],
        [ 848,  851,  878,  881,  908,  911,  938,  941,  968,  971,  998, 1001, 1028, 1031, 1058, 1061, 1088, 1091, 1118, 1121, 1148, 1151, 1178, 1181, 1208, 1211, 1238, 1241],
        [ 852,  855,  882,  885,  912,  915,  942,  945,  972,  975, 1002, 1005, 1032, 1035, 1062, 1065, 1092, 1095, 1122, 1125, 1152, 1155, 1182, 1185, 1212, 1215, 1242, 1245],
        [ 853,  856,  883,  886,  913,  916,  943,  946,  973,  976, 1003, 1006, 1033, 1036, 1063, 1066, 1093, 1096, 1123, 1126, 1153, 1156, 1183, 1186, 1213, 1216, 1243, 1246],
        [ 854,  857,  884,  887,  914,  917,  944,  947,  974,  977, 1004, 1007, 1034, 1037, 1064, 1067, 1094, 1097, 1124, 1127, 1154, 1157, 1184, 1187, 1214, 1217, 1244, 1247],
        [ 858,  861,  888,  891,  918,  921,  948,  951,  978,  981, 1008, 1011, 1038, 1041, 1068, 1071, 1098, 1101, 1128, 1131, 1158, 1161, 1188, 1191, 1218, 1221, 1248, 1251],
        [ 859,  862,  889,  892,  919,  922,  949,  952,  979,  982, 1009, 1012, 1039, 1042, 1069, 1072, 1099, 1102, 1129, 1132, 1159, 1162, 1189, 1192, 1219, 1222, 1249, 1252],
        [ 860,  863,  890,  893,  920,  923,  950,  953,  980,  983, 1010, 1013, 1040, 1043, 1070, 1073, 1100, 1103, 1130, 1133, 1160, 1163, 1190, 1193, 1220, 1223, 1250, 1253],
        [ 864,  867,  894,  897,  924,  927,  954,  957,  984,  987, 1014, 1017, 1044, 1047, 1074, 1077, 1104, 1107, 1134, 1137, 1164, 1167, 1194, 1197, 1224, 1227, 1254, 1257],
        [ 865,  868,  895,  898,  925,  928,  955,  958,  985,  988, 1015, 1018, 1045, 1048, 1075, 1078, 1105, 1108, 1135, 1138, 1165, 1168, 1195, 1198, 1225, 1228, 1255, 1258],
        [ 866,  869,  896,  899,  926,  929,  956,  959,  986,  989, 1016, 1019, 1046, 1049, 1076, 1079, 1106, 1109, 1136, 1139, 1166, 1169, 1196, 1199, 1226, 1229, 1256, 1259]])
    # fmt: on
    access_order, access_count = taps_group_col_major.accesses()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # CHECK: Pass!
    print("Pass!")


# CHECK-LABEL: group_tiler_invalid
@construct_test
def group_tiler_invalid():
    try:
        taps = TensorTiler2D.group_tiler(
            (), (3, 2), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Bad tensor dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        taps = TensorTiler2D.group_tiler(
            (10, 9, 4), (3, 2), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Too many tensor dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        taps = TensorTiler2D.group_tiler(
            (9, 4), (3, -1), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Bad tile dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        taps = TensorTiler2D.group_tiler(
            (9, 4), (3,), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Too few tile dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        taps = TensorTiler2D.group_tiler(
            (9, 4), (1, 1, 1), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Too many tile dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        taps = TensorTiler2D.group_tiler(
            (9, 4), (3, 2), (1, 1), tile_col_major=True, pattern_repeat=0
        )
        raise ValueError("Invalid repeat.")
    except ValueError:
        # good
        pass
    try:
        taps = TensorTiler2D.group_tiler(
            (9, 4), (4, 2), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Indivisible tile (height)")
    except ValueError:
        # good
        pass
    try:
        taps = TensorTiler2D.group_tiler(
            (9, 4), (3, 3), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Indivisible tile (width)")
    except ValueError:
        # good
        pass

    try:
        taps = TensorTiler2D.group_tiler(
            (9, 4), (3, 2), (1,), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Too few tile group dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        taps = TensorTiler2D.group_tiler(
            (9, 4), (3, 2), (1, -1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Bad tile group dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        taps = TensorTiler2D.group_tiler((9, 4), (3, 2), (1, 1, 1), tile_col_major=True)
        raise ValueError("Too many tile group dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        taps = TensorTiler2D.group_tiler((18, 8), (3, 2), (2, 3), tile_col_major=True)
        raise ValueError(
            "Indivisible by tile repeat width (but without allow_partial)."
        )
    except ValueError:
        # good
        pass
    try:
        taps = TensorTiler2D.group_tiler((18, 8), (3, 2), (4, 2), tile_col_major=True)
        raise ValueError(
            "Indivisible by tile repeat height (but without allow_partial)."
        )
    except ValueError:
        # good
        pass

    # CHECK: Pass!
    print("Pass!")
