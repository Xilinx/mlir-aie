import numpy as np

from aie.helpers.taplib import TensorTiler2D
from util import construct_test

# RUN: %python %s | FileCheck %s


# CHECK-LABEL: square_tiler_col_major_tensor_tile_grouping_rectangular_col_major_groups
@construct_test
def square_tiler_col_major_tensor_tile_grouping_rectangular_col_major_groups():
    tiler = TensorTiler2D.group_tiler(
        (16, 16), (4, 4), (2, 1), tile_group_col_major=True, iter_col_major=True
    )
    access_order, access_count = tiler.accesses()
    reference_access = np.array(
        # fmt: off
        [
            [  0,  1,  2,  3, 64, 65, 66, 67,128,129,130,131,192,193,194,195,],
            [  4,  5,  6,  7, 68, 69, 70, 71,132,133,134,135,196,197,198,199,],
            [  8,  9, 10, 11, 72, 73, 74, 75,136,137,138,139,200,201,202,203,],
            [ 12, 13, 14, 15, 76, 77, 78, 79,140,141,142,143,204,205,206,207,],
            [ 16, 17, 18, 19, 80, 81, 82, 83,144,145,146,147,208,209,210,211,],
            [ 20, 21, 22, 23, 84, 85, 86, 87,148,149,150,151,212,213,214,215,],
            [ 24, 25, 26, 27, 88, 89, 90, 91,152,153,154,155,216,217,218,219,],
            [ 28, 29, 30, 31, 92, 93, 94, 95,156,157,158,159,220,221,222,223,],
            [ 32, 33, 34, 35, 96, 97, 98, 99,160,161,162,163,224,225,226,227,],
            [ 36, 37, 38, 39,100,101,102,103,164,165,166,167,228,229,230,231,],
            [ 40, 41, 42, 43,104,105,106,107,168,169,170,171,232,233,234,235,],
            [ 44, 45, 46, 47,108,109,110,111,172,173,174,175,236,237,238,239,],
            [ 48, 49, 50, 51,112,113,114,115,176,177,178,179,240,241,242,243,],
            [ 52, 53, 54, 55,116,117,118,119,180,181,182,183,244,245,246,247,],
            [ 56, 57, 58, 59,120,121,122,123,184,185,186,187,248,249,250,251,],
            [ 60, 61, 62, 63,124,125,126,127,188,189,190,191,252,253,254,255,],
        ],
        # fmt: on
    )
    assert (reference_access == access_order).all()
    assert (access_count == 1).all()

    tile1_reference_order = np.array(
        # fmt: off
        [
            [ 0,  1,  2,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 4,  5,  6,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 8,  9, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [16, 17, 18, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [20, 21, 22, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [24, 25, 26, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [28, 29, 30, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        ],
        # fmt: on
    )

    tile_access_order = tiler[0].access_order()
    assert (tile_access_order == tile1_reference_order).all()
    assert len(tiler) == (16 // (2 * 4)) * (16 // (1 * 4))

    # CHECK: Pass!
    print("Pass!")
