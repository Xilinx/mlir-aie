import numpy as np

from aie.helpers.taplib import TensorAccessPattern, TensorTiler2D
from util import construct_test

# RUN: %python %s | FileCheck %s


# CHECK-LABEL: step_tiler
@construct_test
def step_tiler():
    # Start with Step == (1, 1)
    tiles = TensorTiler2D.step_tiler(
        (32, 32),
        tile_dims=(2, 2),
        tile_group_repeats=(2, 2),
        tile_group_steps=(1, 1),
    )
    assert len(tiles) == (32 // (2 * 2)) * (32 // (2 * 2))
    assert tiles[0] == TensorAccessPattern(
        (32, 32), offset=0, sizes=[2, 2, 2, 2], strides=[64, 2, 32, 1]
    )
    assert tiles[1] == TensorAccessPattern(
        (32, 32), offset=4, sizes=[2, 2, 2, 2], strides=[64, 2, 32, 1]
    )
    assert tiles[26] == TensorAccessPattern(
        (32, 32), offset=392, sizes=[2, 2, 2, 2], strides=[64, 2, 32, 1]
    )
    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    1,    4,    5,   16,   17,   20,   21,   32,   33,   36,   37,   48,   49,   52,   53,   64,   65,   68,   69,   80,   81,   84,   85,   96,   97,  100,  101,  112,  113,  116,  117],
        [   2,    3,    6,    7,   18,   19,   22,   23,   34,   35,   38,   39,   50,   51,   54,   55,   66,   67,   70,   71,   82,   83,   86,   87,   98,   99,  102,  103,  114,  115,  118,  119],
        [   8,    9,   12,   13,   24,   25,   28,   29,   40,   41,   44,   45,   56,   57,   60,   61,   72,   73,   76,   77,   88,   89,   92,   93,  104,  105,  108,  109,  120,  121,  124,  125],
        [  10,   11,   14,   15,   26,   27,   30,   31,   42,   43,   46,   47,   58,   59,   62,   63,   74,   75,   78,   79,   90,   91,   94,   95,  106,  107,  110,  111,  122,  123,  126,  127],
        [ 128,  129,  132,  133,  144,  145,  148,  149,  160,  161,  164,  165,  176,  177,  180,  181,  192,  193,  196,  197,  208,  209,  212,  213,  224,  225,  228,  229,  240,  241,  244,  245],
        [ 130,  131,  134,  135,  146,  147,  150,  151,  162,  163,  166,  167,  178,  179,  182,  183,  194,  195,  198,  199,  210,  211,  214,  215,  226,  227,  230,  231,  242,  243,  246,  247],
        [ 136,  137,  140,  141,  152,  153,  156,  157,  168,  169,  172,  173,  184,  185,  188,  189,  200,  201,  204,  205,  216,  217,  220,  221,  232,  233,  236,  237,  248,  249,  252,  253],
        [ 138,  139,  142,  143,  154,  155,  158,  159,  170,  171,  174,  175,  186,  187,  190,  191,  202,  203,  206,  207,  218,  219,  222,  223,  234,  235,  238,  239,  250,  251,  254,  255],
        [ 256,  257,  260,  261,  272,  273,  276,  277,  288,  289,  292,  293,  304,  305,  308,  309,  320,  321,  324,  325,  336,  337,  340,  341,  352,  353,  356,  357,  368,  369,  372,  373],
        [ 258,  259,  262,  263,  274,  275,  278,  279,  290,  291,  294,  295,  306,  307,  310,  311,  322,  323,  326,  327,  338,  339,  342,  343,  354,  355,  358,  359,  370,  371,  374,  375],
        [ 264,  265,  268,  269,  280,  281,  284,  285,  296,  297,  300,  301,  312,  313,  316,  317,  328,  329,  332,  333,  344,  345,  348,  349,  360,  361,  364,  365,  376,  377,  380,  381],
        [ 266,  267,  270,  271,  282,  283,  286,  287,  298,  299,  302,  303,  314,  315,  318,  319,  330,  331,  334,  335,  346,  347,  350,  351,  362,  363,  366,  367,  378,  379,  382,  383],
        [ 384,  385,  388,  389,  400,  401,  404,  405,  416,  417,  420,  421,  432,  433,  436,  437,  448,  449,  452,  453,  464,  465,  468,  469,  480,  481,  484,  485,  496,  497,  500,  501],
        [ 386,  387,  390,  391,  402,  403,  406,  407,  418,  419,  422,  423,  434,  435,  438,  439,  450,  451,  454,  455,  466,  467,  470,  471,  482,  483,  486,  487,  498,  499,  502,  503],
        [ 392,  393,  396,  397,  408,  409,  412,  413,  424,  425,  428,  429,  440,  441,  444,  445,  456,  457,  460,  461,  472,  473,  476,  477,  488,  489,  492,  493,  504,  505,  508,  509],
        [ 394,  395,  398,  399,  410,  411,  414,  415,  426,  427,  430,  431,  442,  443,  446,  447,  458,  459,  462,  463,  474,  475,  478,  479,  490,  491,  494,  495,  506,  507,  510,  511],
        [ 512,  513,  516,  517,  528,  529,  532,  533,  544,  545,  548,  549,  560,  561,  564,  565,  576,  577,  580,  581,  592,  593,  596,  597,  608,  609,  612,  613,  624,  625,  628,  629],
        [ 514,  515,  518,  519,  530,  531,  534,  535,  546,  547,  550,  551,  562,  563,  566,  567,  578,  579,  582,  583,  594,  595,  598,  599,  610,  611,  614,  615,  626,  627,  630,  631],
        [ 520,  521,  524,  525,  536,  537,  540,  541,  552,  553,  556,  557,  568,  569,  572,  573,  584,  585,  588,  589,  600,  601,  604,  605,  616,  617,  620,  621,  632,  633,  636,  637],
        [ 522,  523,  526,  527,  538,  539,  542,  543,  554,  555,  558,  559,  570,  571,  574,  575,  586,  587,  590,  591,  602,  603,  606,  607,  618,  619,  622,  623,  634,  635,  638,  639],
        [ 640,  641,  644,  645,  656,  657,  660,  661,  672,  673,  676,  677,  688,  689,  692,  693,  704,  705,  708,  709,  720,  721,  724,  725,  736,  737,  740,  741,  752,  753,  756,  757],
        [ 642,  643,  646,  647,  658,  659,  662,  663,  674,  675,  678,  679,  690,  691,  694,  695,  706,  707,  710,  711,  722,  723,  726,  727,  738,  739,  742,  743,  754,  755,  758,  759],
        [ 648,  649,  652,  653,  664,  665,  668,  669,  680,  681,  684,  685,  696,  697,  700,  701,  712,  713,  716,  717,  728,  729,  732,  733,  744,  745,  748,  749,  760,  761,  764,  765],
        [ 650,  651,  654,  655,  666,  667,  670,  671,  682,  683,  686,  687,  698,  699,  702,  703,  714,  715,  718,  719,  730,  731,  734,  735,  746,  747,  750,  751,  762,  763,  766,  767],
        [ 768,  769,  772,  773,  784,  785,  788,  789,  800,  801,  804,  805,  816,  817,  820,  821,  832,  833,  836,  837,  848,  849,  852,  853,  864,  865,  868,  869,  880,  881,  884,  885],
        [ 770,  771,  774,  775,  786,  787,  790,  791,  802,  803,  806,  807,  818,  819,  822,  823,  834,  835,  838,  839,  850,  851,  854,  855,  866,  867,  870,  871,  882,  883,  886,  887],
        [ 776,  777,  780,  781,  792,  793,  796,  797,  808,  809,  812,  813,  824,  825,  828,  829,  840,  841,  844,  845,  856,  857,  860,  861,  872,  873,  876,  877,  888,  889,  892,  893],
        [ 778,  779,  782,  783,  794,  795,  798,  799,  810,  811,  814,  815,  826,  827,  830,  831,  842,  843,  846,  847,  858,  859,  862,  863,  874,  875,  878,  879,  890,  891,  894,  895],
        [ 896,  897,  900,  901,  912,  913,  916,  917,  928,  929,  932,  933,  944,  945,  948,  949,  960,  961,  964,  965,  976,  977,  980,  981,  992,  993,  996,  997, 1008, 1009, 1012, 1013],
        [ 898,  899,  902,  903,  914,  915,  918,  919,  930,  931,  934,  935,  946,  947,  950,  951,  962,  963,  966,  967,  978,  979,  982,  983,  994,  995,  998,  999, 1010, 1011, 1014, 1015],
        [ 904,  905,  908,  909,  920,  921,  924,  925,  936,  937,  940,  941,  952,  953,  956,  957,  968,  969,  972,  973,  984,  985,  988,  989, 1000, 1001, 1004, 1005, 1016, 1017, 1020, 1021],
        [ 906,  907,  910,  911,  922,  923,  926,  927,  938,  939,  942,  943,  954,  955,  958,  959,  970,  971,  974,  975,  986,  987,  990,  991, 1002, 1003, 1006, 1007, 1018, 1019, 1022, 1023]])
    # fmt: on
    access_order, access_count = tiles.accesses()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # Step == (2, 1)
    tiles = TensorTiler2D.step_tiler(
        (32, 32),
        tile_dims=(2, 2),
        tile_group_repeats=(2, 2),
        tile_group_steps=(2, 1),
    )
    assert len(tiles) == (32 // (2 * 2)) * (32 // (2 * 2))
    assert tiles[0] == TensorAccessPattern(
        (32, 32), offset=0, sizes=[2, 2, 2, 2], strides=[128, 2, 32, 1]
    )
    assert tiles[1] == TensorAccessPattern(
        (32, 32), offset=4, sizes=[2, 2, 2, 2], strides=[128, 2, 32, 1]
    )
    assert tiles[26] == TensorAccessPattern(
        (32, 32), offset=328, sizes=[2, 2, 2, 2], strides=[128, 2, 32, 1]
    )
    assert tiles[-1] == TensorAccessPattern(
        (32, 32), offset=860, sizes=[2, 2, 2, 2], strides=[128, 2, 32, 1]
    )
    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    1,    4,    5,   16,   17,   20,   21,   32,   33,   36,   37,   48,   49,   52,   53,   64,   65,   68,   69,   80,   81,   84,   85,   96,   97,  100,  101,  112,  113,  116,  117],
        [   2,    3,    6,    7,   18,   19,   22,   23,   34,   35,   38,   39,   50,   51,   54,   55,   66,   67,   70,   71,   82,   83,   86,   87,   98,   99,  102,  103,  114,  115,  118,  119],
        [ 128,  129,  132,  133,  144,  145,  148,  149,  160,  161,  164,  165,  176,  177,  180,  181,  192,  193,  196,  197,  208,  209,  212,  213,  224,  225,  228,  229,  240,  241,  244,  245],
        [ 130,  131,  134,  135,  146,  147,  150,  151,  162,  163,  166,  167,  178,  179,  182,  183,  194,  195,  198,  199,  210,  211,  214,  215,  226,  227,  230,  231,  242,  243,  246,  247],
        [   8,    9,   12,   13,   24,   25,   28,   29,   40,   41,   44,   45,   56,   57,   60,   61,   72,   73,   76,   77,   88,   89,   92,   93,  104,  105,  108,  109,  120,  121,  124,  125],
        [  10,   11,   14,   15,   26,   27,   30,   31,   42,   43,   46,   47,   58,   59,   62,   63,   74,   75,   78,   79,   90,   91,   94,   95,  106,  107,  110,  111,  122,  123,  126,  127],
        [ 136,  137,  140,  141,  152,  153,  156,  157,  168,  169,  172,  173,  184,  185,  188,  189,  200,  201,  204,  205,  216,  217,  220,  221,  232,  233,  236,  237,  248,  249,  252,  253],
        [ 138,  139,  142,  143,  154,  155,  158,  159,  170,  171,  174,  175,  186,  187,  190,  191,  202,  203,  206,  207,  218,  219,  222,  223,  234,  235,  238,  239,  250,  251,  254,  255],
        [ 256,  257,  260,  261,  272,  273,  276,  277,  288,  289,  292,  293,  304,  305,  308,  309,  320,  321,  324,  325,  336,  337,  340,  341,  352,  353,  356,  357,  368,  369,  372,  373],
        [ 258,  259,  262,  263,  274,  275,  278,  279,  290,  291,  294,  295,  306,  307,  310,  311,  322,  323,  326,  327,  338,  339,  342,  343,  354,  355,  358,  359,  370,  371,  374,  375],
        [ 384,  385,  388,  389,  400,  401,  404,  405,  416,  417,  420,  421,  432,  433,  436,  437,  448,  449,  452,  453,  464,  465,  468,  469,  480,  481,  484,  485,  496,  497,  500,  501],
        [ 386,  387,  390,  391,  402,  403,  406,  407,  418,  419,  422,  423,  434,  435,  438,  439,  450,  451,  454,  455,  466,  467,  470,  471,  482,  483,  486,  487,  498,  499,  502,  503],
        [ 264,  265,  268,  269,  280,  281,  284,  285,  296,  297,  300,  301,  312,  313,  316,  317,  328,  329,  332,  333,  344,  345,  348,  349,  360,  361,  364,  365,  376,  377,  380,  381],
        [ 266,  267,  270,  271,  282,  283,  286,  287,  298,  299,  302,  303,  314,  315,  318,  319,  330,  331,  334,  335,  346,  347,  350,  351,  362,  363,  366,  367,  378,  379,  382,  383],
        [ 392,  393,  396,  397,  408,  409,  412,  413,  424,  425,  428,  429,  440,  441,  444,  445,  456,  457,  460,  461,  472,  473,  476,  477,  488,  489,  492,  493,  504,  505,  508,  509],
        [ 394,  395,  398,  399,  410,  411,  414,  415,  426,  427,  430,  431,  442,  443,  446,  447,  458,  459,  462,  463,  474,  475,  478,  479,  490,  491,  494,  495,  506,  507,  510,  511],
        [ 512,  513,  516,  517,  528,  529,  532,  533,  544,  545,  548,  549,  560,  561,  564,  565,  576,  577,  580,  581,  592,  593,  596,  597,  608,  609,  612,  613,  624,  625,  628,  629],
        [ 514,  515,  518,  519,  530,  531,  534,  535,  546,  547,  550,  551,  562,  563,  566,  567,  578,  579,  582,  583,  594,  595,  598,  599,  610,  611,  614,  615,  626,  627,  630,  631],
        [ 640,  641,  644,  645,  656,  657,  660,  661,  672,  673,  676,  677,  688,  689,  692,  693,  704,  705,  708,  709,  720,  721,  724,  725,  736,  737,  740,  741,  752,  753,  756,  757],
        [ 642,  643,  646,  647,  658,  659,  662,  663,  674,  675,  678,  679,  690,  691,  694,  695,  706,  707,  710,  711,  722,  723,  726,  727,  738,  739,  742,  743,  754,  755,  758,  759],
        [ 520,  521,  524,  525,  536,  537,  540,  541,  552,  553,  556,  557,  568,  569,  572,  573,  584,  585,  588,  589,  600,  601,  604,  605,  616,  617,  620,  621,  632,  633,  636,  637],
        [ 522,  523,  526,  527,  538,  539,  542,  543,  554,  555,  558,  559,  570,  571,  574,  575,  586,  587,  590,  591,  602,  603,  606,  607,  618,  619,  622,  623,  634,  635,  638,  639],
        [ 648,  649,  652,  653,  664,  665,  668,  669,  680,  681,  684,  685,  696,  697,  700,  701,  712,  713,  716,  717,  728,  729,  732,  733,  744,  745,  748,  749,  760,  761,  764,  765],
        [ 650,  651,  654,  655,  666,  667,  670,  671,  682,  683,  686,  687,  698,  699,  702,  703,  714,  715,  718,  719,  730,  731,  734,  735,  746,  747,  750,  751,  762,  763,  766,  767],
        [ 768,  769,  772,  773,  784,  785,  788,  789,  800,  801,  804,  805,  816,  817,  820,  821,  832,  833,  836,  837,  848,  849,  852,  853,  864,  865,  868,  869,  880,  881,  884,  885],
        [ 770,  771,  774,  775,  786,  787,  790,  791,  802,  803,  806,  807,  818,  819,  822,  823,  834,  835,  838,  839,  850,  851,  854,  855,  866,  867,  870,  871,  882,  883,  886,  887],
        [ 896,  897,  900,  901,  912,  913,  916,  917,  928,  929,  932,  933,  944,  945,  948,  949,  960,  961,  964,  965,  976,  977,  980,  981,  992,  993,  996,  997, 1008, 1009, 1012, 1013],
        [ 898,  899,  902,  903,  914,  915,  918,  919,  930,  931,  934,  935,  946,  947,  950,  951,  962,  963,  966,  967,  978,  979,  982,  983,  994,  995,  998,  999, 1010, 1011, 1014, 1015],
        [ 776,  777,  780,  781,  792,  793,  796,  797,  808,  809,  812,  813,  824,  825,  828,  829,  840,  841,  844,  845,  856,  857,  860,  861,  872,  873,  876,  877,  888,  889,  892,  893],
        [ 778,  779,  782,  783,  794,  795,  798,  799,  810,  811,  814,  815,  826,  827,  830,  831,  842,  843,  846,  847,  858,  859,  862,  863,  874,  875,  878,  879,  890,  891,  894,  895],
        [ 904,  905,  908,  909,  920,  921,  924,  925,  936,  937,  940,  941,  952,  953,  956,  957,  968,  969,  972,  973,  984,  985,  988,  989, 1000, 1001, 1004, 1005, 1016, 1017, 1020, 1021],
        [ 906,  907,  910,  911,  922,  923,  926,  927,  938,  939,  942,  943,  954,  955,  958,  959,  970,  971,  974,  975,  986,  987,  990,  991, 1002, 1003, 1006, 1007, 1018, 1019, 1022, 1023]])
    # fmt: on
    access_order, access_count = tiles.accesses()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # Step == (1, 2)
    tiles = TensorTiler2D.step_tiler(
        (32, 32),
        tile_dims=(2, 2),
        tile_group_repeats=(2, 2),
        tile_group_steps=(1, 2),
    )
    assert len(tiles) == (32 // (2 * 2)) * (32 // (2 * 2))
    assert tiles[0] == TensorAccessPattern(
        (32, 32), offset=0, sizes=[2, 2, 2, 2], strides=[64, 4, 32, 1]
    )
    assert tiles[1] == TensorAccessPattern(
        (32, 32), offset=2, sizes=[2, 2, 2, 2], strides=[64, 4, 32, 1]
    )
    assert tiles[26] == TensorAccessPattern(
        (32, 32), offset=392, sizes=[2, 2, 2, 2], strides=[64, 4, 32, 1]
    )
    assert tiles[-1] == TensorAccessPattern(
        (32, 32), offset=922, sizes=[2, 2, 2, 2], strides=[64, 4, 32, 1]
    )
    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    1,   16,   17,    4,    5,   20,   21,   32,   33,   48,   49,   36,   37,   52,   53,   64,   65,   80,   81,   68,   69,   84,   85,   96,   97,  112,  113,  100,  101,  116,  117],
        [   2,    3,   18,   19,    6,    7,   22,   23,   34,   35,   50,   51,   38,   39,   54,   55,   66,   67,   82,   83,   70,   71,   86,   87,   98,   99,  114,  115,  102,  103,  118,  119],
        [   8,    9,   24,   25,   12,   13,   28,   29,   40,   41,   56,   57,   44,   45,   60,   61,   72,   73,   88,   89,   76,   77,   92,   93,  104,  105,  120,  121,  108,  109,  124,  125],
        [  10,   11,   26,   27,   14,   15,   30,   31,   42,   43,   58,   59,   46,   47,   62,   63,   74,   75,   90,   91,   78,   79,   94,   95,  106,  107,  122,  123,  110,  111,  126,  127],
        [ 128,  129,  144,  145,  132,  133,  148,  149,  160,  161,  176,  177,  164,  165,  180,  181,  192,  193,  208,  209,  196,  197,  212,  213,  224,  225,  240,  241,  228,  229,  244,  245],
        [ 130,  131,  146,  147,  134,  135,  150,  151,  162,  163,  178,  179,  166,  167,  182,  183,  194,  195,  210,  211,  198,  199,  214,  215,  226,  227,  242,  243,  230,  231,  246,  247],
        [ 136,  137,  152,  153,  140,  141,  156,  157,  168,  169,  184,  185,  172,  173,  188,  189,  200,  201,  216,  217,  204,  205,  220,  221,  232,  233,  248,  249,  236,  237,  252,  253],
        [ 138,  139,  154,  155,  142,  143,  158,  159,  170,  171,  186,  187,  174,  175,  190,  191,  202,  203,  218,  219,  206,  207,  222,  223,  234,  235,  250,  251,  238,  239,  254,  255],
        [ 256,  257,  272,  273,  260,  261,  276,  277,  288,  289,  304,  305,  292,  293,  308,  309,  320,  321,  336,  337,  324,  325,  340,  341,  352,  353,  368,  369,  356,  357,  372,  373],
        [ 258,  259,  274,  275,  262,  263,  278,  279,  290,  291,  306,  307,  294,  295,  310,  311,  322,  323,  338,  339,  326,  327,  342,  343,  354,  355,  370,  371,  358,  359,  374,  375],
        [ 264,  265,  280,  281,  268,  269,  284,  285,  296,  297,  312,  313,  300,  301,  316,  317,  328,  329,  344,  345,  332,  333,  348,  349,  360,  361,  376,  377,  364,  365,  380,  381],
        [ 266,  267,  282,  283,  270,  271,  286,  287,  298,  299,  314,  315,  302,  303,  318,  319,  330,  331,  346,  347,  334,  335,  350,  351,  362,  363,  378,  379,  366,  367,  382,  383],
        [ 384,  385,  400,  401,  388,  389,  404,  405,  416,  417,  432,  433,  420,  421,  436,  437,  448,  449,  464,  465,  452,  453,  468,  469,  480,  481,  496,  497,  484,  485,  500,  501],
        [ 386,  387,  402,  403,  390,  391,  406,  407,  418,  419,  434,  435,  422,  423,  438,  439,  450,  451,  466,  467,  454,  455,  470,  471,  482,  483,  498,  499,  486,  487,  502,  503],
        [ 392,  393,  408,  409,  396,  397,  412,  413,  424,  425,  440,  441,  428,  429,  444,  445,  456,  457,  472,  473,  460,  461,  476,  477,  488,  489,  504,  505,  492,  493,  508,  509],
        [ 394,  395,  410,  411,  398,  399,  414,  415,  426,  427,  442,  443,  430,  431,  446,  447,  458,  459,  474,  475,  462,  463,  478,  479,  490,  491,  506,  507,  494,  495,  510,  511],
        [ 512,  513,  528,  529,  516,  517,  532,  533,  544,  545,  560,  561,  548,  549,  564,  565,  576,  577,  592,  593,  580,  581,  596,  597,  608,  609,  624,  625,  612,  613,  628,  629],
        [ 514,  515,  530,  531,  518,  519,  534,  535,  546,  547,  562,  563,  550,  551,  566,  567,  578,  579,  594,  595,  582,  583,  598,  599,  610,  611,  626,  627,  614,  615,  630,  631],
        [ 520,  521,  536,  537,  524,  525,  540,  541,  552,  553,  568,  569,  556,  557,  572,  573,  584,  585,  600,  601,  588,  589,  604,  605,  616,  617,  632,  633,  620,  621,  636,  637],
        [ 522,  523,  538,  539,  526,  527,  542,  543,  554,  555,  570,  571,  558,  559,  574,  575,  586,  587,  602,  603,  590,  591,  606,  607,  618,  619,  634,  635,  622,  623,  638,  639],
        [ 640,  641,  656,  657,  644,  645,  660,  661,  672,  673,  688,  689,  676,  677,  692,  693,  704,  705,  720,  721,  708,  709,  724,  725,  736,  737,  752,  753,  740,  741,  756,  757],
        [ 642,  643,  658,  659,  646,  647,  662,  663,  674,  675,  690,  691,  678,  679,  694,  695,  706,  707,  722,  723,  710,  711,  726,  727,  738,  739,  754,  755,  742,  743,  758,  759],
        [ 648,  649,  664,  665,  652,  653,  668,  669,  680,  681,  696,  697,  684,  685,  700,  701,  712,  713,  728,  729,  716,  717,  732,  733,  744,  745,  760,  761,  748,  749,  764,  765],
        [ 650,  651,  666,  667,  654,  655,  670,  671,  682,  683,  698,  699,  686,  687,  702,  703,  714,  715,  730,  731,  718,  719,  734,  735,  746,  747,  762,  763,  750,  751,  766,  767],
        [ 768,  769,  784,  785,  772,  773,  788,  789,  800,  801,  816,  817,  804,  805,  820,  821,  832,  833,  848,  849,  836,  837,  852,  853,  864,  865,  880,  881,  868,  869,  884,  885],
        [ 770,  771,  786,  787,  774,  775,  790,  791,  802,  803,  818,  819,  806,  807,  822,  823,  834,  835,  850,  851,  838,  839,  854,  855,  866,  867,  882,  883,  870,  871,  886,  887],
        [ 776,  777,  792,  793,  780,  781,  796,  797,  808,  809,  824,  825,  812,  813,  828,  829,  840,  841,  856,  857,  844,  845,  860,  861,  872,  873,  888,  889,  876,  877,  892,  893],
        [ 778,  779,  794,  795,  782,  783,  798,  799,  810,  811,  826,  827,  814,  815,  830,  831,  842,  843,  858,  859,  846,  847,  862,  863,  874,  875,  890,  891,  878,  879,  894,  895],
        [ 896,  897,  912,  913,  900,  901,  916,  917,  928,  929,  944,  945,  932,  933,  948,  949,  960,  961,  976,  977,  964,  965,  980,  981,  992,  993, 1008, 1009,  996,  997, 1012, 1013],
        [ 898,  899,  914,  915,  902,  903,  918,  919,  930,  931,  946,  947,  934,  935,  950,  951,  962,  963,  978,  979,  966,  967,  982,  983,  994,  995, 1010, 1011,  998,  999, 1014, 1015],
        [ 904,  905,  920,  921,  908,  909,  924,  925,  936,  937,  952,  953,  940,  941,  956,  957,  968,  969,  984,  985,  972,  973,  988,  989, 1000, 1001, 1016, 1017, 1004, 1005, 1020, 1021],
        [ 906,  907,  922,  923,  910,  911,  926,  927,  938,  939,  954,  955,  942,  943,  958,  959,  970,  971,  986,  987,  974,  975,  990,  991, 1002, 1003, 1018, 1019, 1006, 1007, 1022, 1023]])
    # fmt: on
    access_order, access_count = tiles.accesses()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # Step == (2, 2)
    tiles = TensorTiler2D.step_tiler(
        (32, 32),
        tile_dims=(2, 2),
        tile_group_repeats=(2, 2),
        tile_group_steps=(2, 2),
    )
    assert len(tiles) == (32 // (2 * 2)) * (32 // (2 * 2))
    assert tiles[0] == TensorAccessPattern(
        (32, 32), offset=0, sizes=[2, 2, 2, 2], strides=[128, 4, 32, 1]
    )
    assert tiles[1] == TensorAccessPattern(
        (32, 32), offset=2, sizes=[2, 2, 2, 2], strides=[128, 4, 32, 1]
    )
    assert tiles[26] == TensorAccessPattern(
        (32, 32), offset=328, sizes=[2, 2, 2, 2], strides=[128, 4, 32, 1]
    )
    assert tiles[-1] == TensorAccessPattern(
        (32, 32), offset=858, sizes=[2, 2, 2, 2], strides=[128, 4, 32, 1]
    )
    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    1,   16,   17,    4,    5,   20,   21,   32,   33,   48,   49,   36,   37,   52,   53,   64,   65,   80,   81,   68,   69,   84,   85,   96,   97,  112,  113,  100,  101,  116,  117],
        [   2,    3,   18,   19,    6,    7,   22,   23,   34,   35,   50,   51,   38,   39,   54,   55,   66,   67,   82,   83,   70,   71,   86,   87,   98,   99,  114,  115,  102,  103,  118,  119],
        [ 128,  129,  144,  145,  132,  133,  148,  149,  160,  161,  176,  177,  164,  165,  180,  181,  192,  193,  208,  209,  196,  197,  212,  213,  224,  225,  240,  241,  228,  229,  244,  245],
        [ 130,  131,  146,  147,  134,  135,  150,  151,  162,  163,  178,  179,  166,  167,  182,  183,  194,  195,  210,  211,  198,  199,  214,  215,  226,  227,  242,  243,  230,  231,  246,  247],
        [   8,    9,   24,   25,   12,   13,   28,   29,   40,   41,   56,   57,   44,   45,   60,   61,   72,   73,   88,   89,   76,   77,   92,   93,  104,  105,  120,  121,  108,  109,  124,  125],
        [  10,   11,   26,   27,   14,   15,   30,   31,   42,   43,   58,   59,   46,   47,   62,   63,   74,   75,   90,   91,   78,   79,   94,   95,  106,  107,  122,  123,  110,  111,  126,  127],
        [ 136,  137,  152,  153,  140,  141,  156,  157,  168,  169,  184,  185,  172,  173,  188,  189,  200,  201,  216,  217,  204,  205,  220,  221,  232,  233,  248,  249,  236,  237,  252,  253],
        [ 138,  139,  154,  155,  142,  143,  158,  159,  170,  171,  186,  187,  174,  175,  190,  191,  202,  203,  218,  219,  206,  207,  222,  223,  234,  235,  250,  251,  238,  239,  254,  255],
        [ 256,  257,  272,  273,  260,  261,  276,  277,  288,  289,  304,  305,  292,  293,  308,  309,  320,  321,  336,  337,  324,  325,  340,  341,  352,  353,  368,  369,  356,  357,  372,  373],
        [ 258,  259,  274,  275,  262,  263,  278,  279,  290,  291,  306,  307,  294,  295,  310,  311,  322,  323,  338,  339,  326,  327,  342,  343,  354,  355,  370,  371,  358,  359,  374,  375],
        [ 384,  385,  400,  401,  388,  389,  404,  405,  416,  417,  432,  433,  420,  421,  436,  437,  448,  449,  464,  465,  452,  453,  468,  469,  480,  481,  496,  497,  484,  485,  500,  501],
        [ 386,  387,  402,  403,  390,  391,  406,  407,  418,  419,  434,  435,  422,  423,  438,  439,  450,  451,  466,  467,  454,  455,  470,  471,  482,  483,  498,  499,  486,  487,  502,  503],
        [ 264,  265,  280,  281,  268,  269,  284,  285,  296,  297,  312,  313,  300,  301,  316,  317,  328,  329,  344,  345,  332,  333,  348,  349,  360,  361,  376,  377,  364,  365,  380,  381],
        [ 266,  267,  282,  283,  270,  271,  286,  287,  298,  299,  314,  315,  302,  303,  318,  319,  330,  331,  346,  347,  334,  335,  350,  351,  362,  363,  378,  379,  366,  367,  382,  383],
        [ 392,  393,  408,  409,  396,  397,  412,  413,  424,  425,  440,  441,  428,  429,  444,  445,  456,  457,  472,  473,  460,  461,  476,  477,  488,  489,  504,  505,  492,  493,  508,  509],
        [ 394,  395,  410,  411,  398,  399,  414,  415,  426,  427,  442,  443,  430,  431,  446,  447,  458,  459,  474,  475,  462,  463,  478,  479,  490,  491,  506,  507,  494,  495,  510,  511],
        [ 512,  513,  528,  529,  516,  517,  532,  533,  544,  545,  560,  561,  548,  549,  564,  565,  576,  577,  592,  593,  580,  581,  596,  597,  608,  609,  624,  625,  612,  613,  628,  629],
        [ 514,  515,  530,  531,  518,  519,  534,  535,  546,  547,  562,  563,  550,  551,  566,  567,  578,  579,  594,  595,  582,  583,  598,  599,  610,  611,  626,  627,  614,  615,  630,  631],
        [ 640,  641,  656,  657,  644,  645,  660,  661,  672,  673,  688,  689,  676,  677,  692,  693,  704,  705,  720,  721,  708,  709,  724,  725,  736,  737,  752,  753,  740,  741,  756,  757],
        [ 642,  643,  658,  659,  646,  647,  662,  663,  674,  675,  690,  691,  678,  679,  694,  695,  706,  707,  722,  723,  710,  711,  726,  727,  738,  739,  754,  755,  742,  743,  758,  759],
        [ 520,  521,  536,  537,  524,  525,  540,  541,  552,  553,  568,  569,  556,  557,  572,  573,  584,  585,  600,  601,  588,  589,  604,  605,  616,  617,  632,  633,  620,  621,  636,  637],
        [ 522,  523,  538,  539,  526,  527,  542,  543,  554,  555,  570,  571,  558,  559,  574,  575,  586,  587,  602,  603,  590,  591,  606,  607,  618,  619,  634,  635,  622,  623,  638,  639],
        [ 648,  649,  664,  665,  652,  653,  668,  669,  680,  681,  696,  697,  684,  685,  700,  701,  712,  713,  728,  729,  716,  717,  732,  733,  744,  745,  760,  761,  748,  749,  764,  765],
        [ 650,  651,  666,  667,  654,  655,  670,  671,  682,  683,  698,  699,  686,  687,  702,  703,  714,  715,  730,  731,  718,  719,  734,  735,  746,  747,  762,  763,  750,  751,  766,  767],
        [ 768,  769,  784,  785,  772,  773,  788,  789,  800,  801,  816,  817,  804,  805,  820,  821,  832,  833,  848,  849,  836,  837,  852,  853,  864,  865,  880,  881,  868,  869,  884,  885],
        [ 770,  771,  786,  787,  774,  775,  790,  791,  802,  803,  818,  819,  806,  807,  822,  823,  834,  835,  850,  851,  838,  839,  854,  855,  866,  867,  882,  883,  870,  871,  886,  887],
        [ 896,  897,  912,  913,  900,  901,  916,  917,  928,  929,  944,  945,  932,  933,  948,  949,  960,  961,  976,  977,  964,  965,  980,  981,  992,  993, 1008, 1009,  996,  997, 1012, 1013],
        [ 898,  899,  914,  915,  902,  903,  918,  919,  930,  931,  946,  947,  934,  935,  950,  951,  962,  963,  978,  979,  966,  967,  982,  983,  994,  995, 1010, 1011,  998,  999, 1014, 1015],
        [ 776,  777,  792,  793,  780,  781,  796,  797,  808,  809,  824,  825,  812,  813,  828,  829,  840,  841,  856,  857,  844,  845,  860,  861,  872,  873,  888,  889,  876,  877,  892,  893],
        [ 778,  779,  794,  795,  782,  783,  798,  799,  810,  811,  826,  827,  814,  815,  830,  831,  842,  843,  858,  859,  846,  847,  862,  863,  874,  875,  890,  891,  878,  879,  894,  895],
        [ 904,  905,  920,  921,  908,  909,  924,  925,  936,  937,  952,  953,  940,  941,  956,  957,  968,  969,  984,  985,  972,  973,  988,  989, 1000, 1001, 1016, 1017, 1004, 1005, 1020, 1021],
        [ 906,  907,  922,  923,  910,  911,  926,  927,  938,  939,  954,  955,  942,  943,  958,  959,  970,  971,  986,  987,  974,  975,  990,  991, 1002, 1003, 1018, 1019, 1006, 1007, 1022, 1023]])
    # fmt: on
    access_order, access_count = tiles.accesses()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # Step == (2, 2)
    tiles = TensorTiler2D.step_tiler(
        (32, 32),
        tile_dims=(2, 2),
        tile_group_repeats=(2, 2),
        tile_group_steps=(2, 2),
    )
    assert len(tiles) == (32 // (2 * 2)) * (32 // (2 * 2))
    assert tiles[0] == TensorAccessPattern(
        (32, 32), offset=0, sizes=[2, 2, 2, 2], strides=[128, 4, 32, 1]
    )
    assert tiles[1] == TensorAccessPattern(
        (32, 32), offset=2, sizes=[2, 2, 2, 2], strides=[128, 4, 32, 1]
    )
    assert tiles[26] == TensorAccessPattern(
        (32, 32), offset=328, sizes=[2, 2, 2, 2], strides=[128, 4, 32, 1]
    )
    assert tiles[-1] == TensorAccessPattern(
        (32, 32), offset=858, sizes=[2, 2, 2, 2], strides=[128, 4, 32, 1]
    )
    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    1,   16,   17,    4,    5,   20,   21,   32,   33,   48,   49,   36,   37,   52,   53,   64,   65,   80,   81,   68,   69,   84,   85,   96,   97,  112,  113,  100,  101,  116,  117],
        [   2,    3,   18,   19,    6,    7,   22,   23,   34,   35,   50,   51,   38,   39,   54,   55,   66,   67,   82,   83,   70,   71,   86,   87,   98,   99,  114,  115,  102,  103,  118,  119],
        [ 128,  129,  144,  145,  132,  133,  148,  149,  160,  161,  176,  177,  164,  165,  180,  181,  192,  193,  208,  209,  196,  197,  212,  213,  224,  225,  240,  241,  228,  229,  244,  245],
        [ 130,  131,  146,  147,  134,  135,  150,  151,  162,  163,  178,  179,  166,  167,  182,  183,  194,  195,  210,  211,  198,  199,  214,  215,  226,  227,  242,  243,  230,  231,  246,  247],
        [   8,    9,   24,   25,   12,   13,   28,   29,   40,   41,   56,   57,   44,   45,   60,   61,   72,   73,   88,   89,   76,   77,   92,   93,  104,  105,  120,  121,  108,  109,  124,  125],
        [  10,   11,   26,   27,   14,   15,   30,   31,   42,   43,   58,   59,   46,   47,   62,   63,   74,   75,   90,   91,   78,   79,   94,   95,  106,  107,  122,  123,  110,  111,  126,  127],
        [ 136,  137,  152,  153,  140,  141,  156,  157,  168,  169,  184,  185,  172,  173,  188,  189,  200,  201,  216,  217,  204,  205,  220,  221,  232,  233,  248,  249,  236,  237,  252,  253],
        [ 138,  139,  154,  155,  142,  143,  158,  159,  170,  171,  186,  187,  174,  175,  190,  191,  202,  203,  218,  219,  206,  207,  222,  223,  234,  235,  250,  251,  238,  239,  254,  255],
        [ 256,  257,  272,  273,  260,  261,  276,  277,  288,  289,  304,  305,  292,  293,  308,  309,  320,  321,  336,  337,  324,  325,  340,  341,  352,  353,  368,  369,  356,  357,  372,  373],
        [ 258,  259,  274,  275,  262,  263,  278,  279,  290,  291,  306,  307,  294,  295,  310,  311,  322,  323,  338,  339,  326,  327,  342,  343,  354,  355,  370,  371,  358,  359,  374,  375],
        [ 384,  385,  400,  401,  388,  389,  404,  405,  416,  417,  432,  433,  420,  421,  436,  437,  448,  449,  464,  465,  452,  453,  468,  469,  480,  481,  496,  497,  484,  485,  500,  501],
        [ 386,  387,  402,  403,  390,  391,  406,  407,  418,  419,  434,  435,  422,  423,  438,  439,  450,  451,  466,  467,  454,  455,  470,  471,  482,  483,  498,  499,  486,  487,  502,  503],
        [ 264,  265,  280,  281,  268,  269,  284,  285,  296,  297,  312,  313,  300,  301,  316,  317,  328,  329,  344,  345,  332,  333,  348,  349,  360,  361,  376,  377,  364,  365,  380,  381],
        [ 266,  267,  282,  283,  270,  271,  286,  287,  298,  299,  314,  315,  302,  303,  318,  319,  330,  331,  346,  347,  334,  335,  350,  351,  362,  363,  378,  379,  366,  367,  382,  383],
        [ 392,  393,  408,  409,  396,  397,  412,  413,  424,  425,  440,  441,  428,  429,  444,  445,  456,  457,  472,  473,  460,  461,  476,  477,  488,  489,  504,  505,  492,  493,  508,  509],
        [ 394,  395,  410,  411,  398,  399,  414,  415,  426,  427,  442,  443,  430,  431,  446,  447,  458,  459,  474,  475,  462,  463,  478,  479,  490,  491,  506,  507,  494,  495,  510,  511],
        [ 512,  513,  528,  529,  516,  517,  532,  533,  544,  545,  560,  561,  548,  549,  564,  565,  576,  577,  592,  593,  580,  581,  596,  597,  608,  609,  624,  625,  612,  613,  628,  629],
        [ 514,  515,  530,  531,  518,  519,  534,  535,  546,  547,  562,  563,  550,  551,  566,  567,  578,  579,  594,  595,  582,  583,  598,  599,  610,  611,  626,  627,  614,  615,  630,  631],
        [ 640,  641,  656,  657,  644,  645,  660,  661,  672,  673,  688,  689,  676,  677,  692,  693,  704,  705,  720,  721,  708,  709,  724,  725,  736,  737,  752,  753,  740,  741,  756,  757],
        [ 642,  643,  658,  659,  646,  647,  662,  663,  674,  675,  690,  691,  678,  679,  694,  695,  706,  707,  722,  723,  710,  711,  726,  727,  738,  739,  754,  755,  742,  743,  758,  759],
        [ 520,  521,  536,  537,  524,  525,  540,  541,  552,  553,  568,  569,  556,  557,  572,  573,  584,  585,  600,  601,  588,  589,  604,  605,  616,  617,  632,  633,  620,  621,  636,  637],
        [ 522,  523,  538,  539,  526,  527,  542,  543,  554,  555,  570,  571,  558,  559,  574,  575,  586,  587,  602,  603,  590,  591,  606,  607,  618,  619,  634,  635,  622,  623,  638,  639],
        [ 648,  649,  664,  665,  652,  653,  668,  669,  680,  681,  696,  697,  684,  685,  700,  701,  712,  713,  728,  729,  716,  717,  732,  733,  744,  745,  760,  761,  748,  749,  764,  765],
        [ 650,  651,  666,  667,  654,  655,  670,  671,  682,  683,  698,  699,  686,  687,  702,  703,  714,  715,  730,  731,  718,  719,  734,  735,  746,  747,  762,  763,  750,  751,  766,  767],
        [ 768,  769,  784,  785,  772,  773,  788,  789,  800,  801,  816,  817,  804,  805,  820,  821,  832,  833,  848,  849,  836,  837,  852,  853,  864,  865,  880,  881,  868,  869,  884,  885],
        [ 770,  771,  786,  787,  774,  775,  790,  791,  802,  803,  818,  819,  806,  807,  822,  823,  834,  835,  850,  851,  838,  839,  854,  855,  866,  867,  882,  883,  870,  871,  886,  887],
        [ 896,  897,  912,  913,  900,  901,  916,  917,  928,  929,  944,  945,  932,  933,  948,  949,  960,  961,  976,  977,  964,  965,  980,  981,  992,  993, 1008, 1009,  996,  997, 1012, 1013],
        [ 898,  899,  914,  915,  902,  903,  918,  919,  930,  931,  946,  947,  934,  935,  950,  951,  962,  963,  978,  979,  966,  967,  982,  983,  994,  995, 1010, 1011,  998,  999, 1014, 1015],
        [ 776,  777,  792,  793,  780,  781,  796,  797,  808,  809,  824,  825,  812,  813,  828,  829,  840,  841,  856,  857,  844,  845,  860,  861,  872,  873,  888,  889,  876,  877,  892,  893],
        [ 778,  779,  794,  795,  782,  783,  798,  799,  810,  811,  826,  827,  814,  815,  830,  831,  842,  843,  858,  859,  846,  847,  862,  863,  874,  875,  890,  891,  878,  879,  894,  895],
        [ 904,  905,  920,  921,  908,  909,  924,  925,  936,  937,  952,  953,  940,  941,  956,  957,  968,  969,  984,  985,  972,  973,  988,  989, 1000, 1001, 1016, 1017, 1004, 1005, 1020, 1021],
        [ 906,  907,  922,  923,  910,  911,  926,  927,  938,  939,  954,  955,  942,  943,  958,  959,  970,  971,  986,  987,  974,  975,  990,  991, 1002, 1003, 1018, 1019, 1006, 1007, 1022, 1023]])
    # fmt: on
    access_order, access_count = tiles.accesses()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # Repeat across column/row
    tiles = TensorTiler2D.step_tiler(
        (32, 32),
        tile_dims=(2, 2),
        tile_group_repeats=(32 // 4, 32 // 4),
        tile_group_steps=(2, 2),
    )
    assert len(tiles) == 4  # (32//(2*(32//4))) * (32//(2*(32//4)))
    assert tiles[0] == TensorAccessPattern(
        (32, 32), offset=0, sizes=[8, 8, 2, 2], strides=[128, 4, 32, 1]
    )
    assert tiles[1] == TensorAccessPattern(
        (32, 32), offset=2, sizes=[8, 8, 2, 2], strides=[128, 4, 32, 1]
    )
    assert tiles[2] == TensorAccessPattern(
        (32, 32), offset=64, sizes=[8, 8, 2, 2], strides=[128, 4, 32, 1]
    )
    assert tiles[3] == TensorAccessPattern(
        (32, 32), offset=66, sizes=[8, 8, 2, 2], strides=[128, 4, 32, 1]
    )
    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    1,  256,  257,    4,    5,  260,  261,    8,    9,  264,  265,   12,   13,  268,  269,   16,   17,  272,  273,   20,   21,  276,  277,   24,   25,  280,  281,   28,   29,  284,  285],
        [   2,    3,  258,  259,    6,    7,  262,  263,   10,   11,  266,  267,   14,   15,  270,  271,   18,   19,  274,  275,   22,   23,  278,  279,   26,   27,  282,  283,   30,   31,  286,  287],
        [ 512,  513,  768,  769,  516,  517,  772,  773,  520,  521,  776,  777,  524,  525,  780,  781,  528,  529,  784,  785,  532,  533,  788,  789,  536,  537,  792,  793,  540,  541,  796,  797],
        [ 514,  515,  770,  771,  518,  519,  774,  775,  522,  523,  778,  779,  526,  527,  782,  783,  530,  531,  786,  787,  534,  535,  790,  791,  538,  539,  794,  795,  542,  543,  798,  799],
        [  32,   33,  288,  289,   36,   37,  292,  293,   40,   41,  296,  297,   44,   45,  300,  301,   48,   49,  304,  305,   52,   53,  308,  309,   56,   57,  312,  313,   60,   61,  316,  317],
        [  34,   35,  290,  291,   38,   39,  294,  295,   42,   43,  298,  299,   46,   47,  302,  303,   50,   51,  306,  307,   54,   55,  310,  311,   58,   59,  314,  315,   62,   63,  318,  319],
        [ 544,  545,  800,  801,  548,  549,  804,  805,  552,  553,  808,  809,  556,  557,  812,  813,  560,  561,  816,  817,  564,  565,  820,  821,  568,  569,  824,  825,  572,  573,  828,  829],
        [ 546,  547,  802,  803,  550,  551,  806,  807,  554,  555,  810,  811,  558,  559,  814,  815,  562,  563,  818,  819,  566,  567,  822,  823,  570,  571,  826,  827,  574,  575,  830,  831],
        [  64,   65,  320,  321,   68,   69,  324,  325,   72,   73,  328,  329,   76,   77,  332,  333,   80,   81,  336,  337,   84,   85,  340,  341,   88,   89,  344,  345,   92,   93,  348,  349],
        [  66,   67,  322,  323,   70,   71,  326,  327,   74,   75,  330,  331,   78,   79,  334,  335,   82,   83,  338,  339,   86,   87,  342,  343,   90,   91,  346,  347,   94,   95,  350,  351],
        [ 576,  577,  832,  833,  580,  581,  836,  837,  584,  585,  840,  841,  588,  589,  844,  845,  592,  593,  848,  849,  596,  597,  852,  853,  600,  601,  856,  857,  604,  605,  860,  861],
        [ 578,  579,  834,  835,  582,  583,  838,  839,  586,  587,  842,  843,  590,  591,  846,  847,  594,  595,  850,  851,  598,  599,  854,  855,  602,  603,  858,  859,  606,  607,  862,  863],
        [  96,   97,  352,  353,  100,  101,  356,  357,  104,  105,  360,  361,  108,  109,  364,  365,  112,  113,  368,  369,  116,  117,  372,  373,  120,  121,  376,  377,  124,  125,  380,  381],
        [  98,   99,  354,  355,  102,  103,  358,  359,  106,  107,  362,  363,  110,  111,  366,  367,  114,  115,  370,  371,  118,  119,  374,  375,  122,  123,  378,  379,  126,  127,  382,  383],
        [ 608,  609,  864,  865,  612,  613,  868,  869,  616,  617,  872,  873,  620,  621,  876,  877,  624,  625,  880,  881,  628,  629,  884,  885,  632,  633,  888,  889,  636,  637,  892,  893],
        [ 610,  611,  866,  867,  614,  615,  870,  871,  618,  619,  874,  875,  622,  623,  878,  879,  626,  627,  882,  883,  630,  631,  886,  887,  634,  635,  890,  891,  638,  639,  894,  895],
        [ 128,  129,  384,  385,  132,  133,  388,  389,  136,  137,  392,  393,  140,  141,  396,  397,  144,  145,  400,  401,  148,  149,  404,  405,  152,  153,  408,  409,  156,  157,  412,  413],
        [ 130,  131,  386,  387,  134,  135,  390,  391,  138,  139,  394,  395,  142,  143,  398,  399,  146,  147,  402,  403,  150,  151,  406,  407,  154,  155,  410,  411,  158,  159,  414,  415],
        [ 640,  641,  896,  897,  644,  645,  900,  901,  648,  649,  904,  905,  652,  653,  908,  909,  656,  657,  912,  913,  660,  661,  916,  917,  664,  665,  920,  921,  668,  669,  924,  925],
        [ 642,  643,  898,  899,  646,  647,  902,  903,  650,  651,  906,  907,  654,  655,  910,  911,  658,  659,  914,  915,  662,  663,  918,  919,  666,  667,  922,  923,  670,  671,  926,  927],
        [ 160,  161,  416,  417,  164,  165,  420,  421,  168,  169,  424,  425,  172,  173,  428,  429,  176,  177,  432,  433,  180,  181,  436,  437,  184,  185,  440,  441,  188,  189,  444,  445],
        [ 162,  163,  418,  419,  166,  167,  422,  423,  170,  171,  426,  427,  174,  175,  430,  431,  178,  179,  434,  435,  182,  183,  438,  439,  186,  187,  442,  443,  190,  191,  446,  447],
        [ 672,  673,  928,  929,  676,  677,  932,  933,  680,  681,  936,  937,  684,  685,  940,  941,  688,  689,  944,  945,  692,  693,  948,  949,  696,  697,  952,  953,  700,  701,  956,  957],
        [ 674,  675,  930,  931,  678,  679,  934,  935,  682,  683,  938,  939,  686,  687,  942,  943,  690,  691,  946,  947,  694,  695,  950,  951,  698,  699,  954,  955,  702,  703,  958,  959],
        [ 192,  193,  448,  449,  196,  197,  452,  453,  200,  201,  456,  457,  204,  205,  460,  461,  208,  209,  464,  465,  212,  213,  468,  469,  216,  217,  472,  473,  220,  221,  476,  477],
        [ 194,  195,  450,  451,  198,  199,  454,  455,  202,  203,  458,  459,  206,  207,  462,  463,  210,  211,  466,  467,  214,  215,  470,  471,  218,  219,  474,  475,  222,  223,  478,  479],
        [ 704,  705,  960,  961,  708,  709,  964,  965,  712,  713,  968,  969,  716,  717,  972,  973,  720,  721,  976,  977,  724,  725,  980,  981,  728,  729,  984,  985,  732,  733,  988,  989],
        [ 706,  707,  962,  963,  710,  711,  966,  967,  714,  715,  970,  971,  718,  719,  974,  975,  722,  723,  978,  979,  726,  727,  982,  983,  730,  731,  986,  987,  734,  735,  990,  991],
        [ 224,  225,  480,  481,  228,  229,  484,  485,  232,  233,  488,  489,  236,  237,  492,  493,  240,  241,  496,  497,  244,  245,  500,  501,  248,  249,  504,  505,  252,  253,  508,  509],
        [ 226,  227,  482,  483,  230,  231,  486,  487,  234,  235,  490,  491,  238,  239,  494,  495,  242,  243,  498,  499,  246,  247,  502,  503,  250,  251,  506,  507,  254,  255,  510,  511],
        [ 736,  737,  992,  993,  740,  741,  996,  997,  744,  745, 1000, 1001,  748,  749, 1004, 1005,  752,  753, 1008, 1009,  756,  757, 1012, 1013,  760,  761, 1016, 1017,  764,  765, 1020, 1021],
        [ 738,  739,  994,  995,  742,  743,  998,  999,  746,  747, 1002, 1003,  750,  751, 1006, 1007,  754,  755, 1010, 1011,  758,  759, 1014, 1015,  762,  763, 1018, 1019,  766,  767, 1022, 1023]])
    # fmt: on
    access_order, access_count = tiles.accesses()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # Repeat one dimension
    tiles = TensorTiler2D.step_tiler(
        (32, 32),
        tile_dims=(2, 2),
        tile_group_repeats=(1, 32 // 4),
        tile_group_steps=(2, 2),
    )
    assert len(tiles) == (32 // (2 * 1)) * (32 // (2 * (32 // 4)))
    assert tiles[0] == TensorAccessPattern(
        (32, 32), offset=0, sizes=[1, 8, 2, 2], strides=[0, 4, 32, 1]
    )
    assert tiles[1] == TensorAccessPattern(
        (32, 32), offset=2, sizes=[1, 8, 2, 2], strides=[0, 4, 32, 1]
    )
    assert tiles[26] == TensorAccessPattern(
        (32, 32), offset=832, sizes=[1, 8, 2, 2], strides=[0, 4, 32, 1]
    )
    assert tiles[-1] == TensorAccessPattern(
        (32, 32), offset=962, sizes=[1, 8, 2, 2], strides=[0, 4, 32, 1]
    )
    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    1,   32,   33,    4,    5,   36,   37,    8,    9,   40,   41,   12,   13,   44,   45,   16,   17,   48,   49,   20,   21,   52,   53,   24,   25,   56,   57,   28,   29,   60,   61],
        [   2,    3,   34,   35,    6,    7,   38,   39,   10,   11,   42,   43,   14,   15,   46,   47,   18,   19,   50,   51,   22,   23,   54,   55,   26,   27,   58,   59,   30,   31,   62,   63],
        [  64,   65,   96,   97,   68,   69,  100,  101,   72,   73,  104,  105,   76,   77,  108,  109,   80,   81,  112,  113,   84,   85,  116,  117,   88,   89,  120,  121,   92,   93,  124,  125],
        [  66,   67,   98,   99,   70,   71,  102,  103,   74,   75,  106,  107,   78,   79,  110,  111,   82,   83,  114,  115,   86,   87,  118,  119,   90,   91,  122,  123,   94,   95,  126,  127],
        [ 128,  129,  160,  161,  132,  133,  164,  165,  136,  137,  168,  169,  140,  141,  172,  173,  144,  145,  176,  177,  148,  149,  180,  181,  152,  153,  184,  185,  156,  157,  188,  189],
        [ 130,  131,  162,  163,  134,  135,  166,  167,  138,  139,  170,  171,  142,  143,  174,  175,  146,  147,  178,  179,  150,  151,  182,  183,  154,  155,  186,  187,  158,  159,  190,  191],
        [ 192,  193,  224,  225,  196,  197,  228,  229,  200,  201,  232,  233,  204,  205,  236,  237,  208,  209,  240,  241,  212,  213,  244,  245,  216,  217,  248,  249,  220,  221,  252,  253],
        [ 194,  195,  226,  227,  198,  199,  230,  231,  202,  203,  234,  235,  206,  207,  238,  239,  210,  211,  242,  243,  214,  215,  246,  247,  218,  219,  250,  251,  222,  223,  254,  255],
        [ 256,  257,  288,  289,  260,  261,  292,  293,  264,  265,  296,  297,  268,  269,  300,  301,  272,  273,  304,  305,  276,  277,  308,  309,  280,  281,  312,  313,  284,  285,  316,  317],
        [ 258,  259,  290,  291,  262,  263,  294,  295,  266,  267,  298,  299,  270,  271,  302,  303,  274,  275,  306,  307,  278,  279,  310,  311,  282,  283,  314,  315,  286,  287,  318,  319],
        [ 320,  321,  352,  353,  324,  325,  356,  357,  328,  329,  360,  361,  332,  333,  364,  365,  336,  337,  368,  369,  340,  341,  372,  373,  344,  345,  376,  377,  348,  349,  380,  381],
        [ 322,  323,  354,  355,  326,  327,  358,  359,  330,  331,  362,  363,  334,  335,  366,  367,  338,  339,  370,  371,  342,  343,  374,  375,  346,  347,  378,  379,  350,  351,  382,  383],
        [ 384,  385,  416,  417,  388,  389,  420,  421,  392,  393,  424,  425,  396,  397,  428,  429,  400,  401,  432,  433,  404,  405,  436,  437,  408,  409,  440,  441,  412,  413,  444,  445],
        [ 386,  387,  418,  419,  390,  391,  422,  423,  394,  395,  426,  427,  398,  399,  430,  431,  402,  403,  434,  435,  406,  407,  438,  439,  410,  411,  442,  443,  414,  415,  446,  447],
        [ 448,  449,  480,  481,  452,  453,  484,  485,  456,  457,  488,  489,  460,  461,  492,  493,  464,  465,  496,  497,  468,  469,  500,  501,  472,  473,  504,  505,  476,  477,  508,  509],
        [ 450,  451,  482,  483,  454,  455,  486,  487,  458,  459,  490,  491,  462,  463,  494,  495,  466,  467,  498,  499,  470,  471,  502,  503,  474,  475,  506,  507,  478,  479,  510,  511],
        [ 512,  513,  544,  545,  516,  517,  548,  549,  520,  521,  552,  553,  524,  525,  556,  557,  528,  529,  560,  561,  532,  533,  564,  565,  536,  537,  568,  569,  540,  541,  572,  573],
        [ 514,  515,  546,  547,  518,  519,  550,  551,  522,  523,  554,  555,  526,  527,  558,  559,  530,  531,  562,  563,  534,  535,  566,  567,  538,  539,  570,  571,  542,  543,  574,  575],
        [ 576,  577,  608,  609,  580,  581,  612,  613,  584,  585,  616,  617,  588,  589,  620,  621,  592,  593,  624,  625,  596,  597,  628,  629,  600,  601,  632,  633,  604,  605,  636,  637],
        [ 578,  579,  610,  611,  582,  583,  614,  615,  586,  587,  618,  619,  590,  591,  622,  623,  594,  595,  626,  627,  598,  599,  630,  631,  602,  603,  634,  635,  606,  607,  638,  639],
        [ 640,  641,  672,  673,  644,  645,  676,  677,  648,  649,  680,  681,  652,  653,  684,  685,  656,  657,  688,  689,  660,  661,  692,  693,  664,  665,  696,  697,  668,  669,  700,  701],
        [ 642,  643,  674,  675,  646,  647,  678,  679,  650,  651,  682,  683,  654,  655,  686,  687,  658,  659,  690,  691,  662,  663,  694,  695,  666,  667,  698,  699,  670,  671,  702,  703],
        [ 704,  705,  736,  737,  708,  709,  740,  741,  712,  713,  744,  745,  716,  717,  748,  749,  720,  721,  752,  753,  724,  725,  756,  757,  728,  729,  760,  761,  732,  733,  764,  765],
        [ 706,  707,  738,  739,  710,  711,  742,  743,  714,  715,  746,  747,  718,  719,  750,  751,  722,  723,  754,  755,  726,  727,  758,  759,  730,  731,  762,  763,  734,  735,  766,  767],
        [ 768,  769,  800,  801,  772,  773,  804,  805,  776,  777,  808,  809,  780,  781,  812,  813,  784,  785,  816,  817,  788,  789,  820,  821,  792,  793,  824,  825,  796,  797,  828,  829],
        [ 770,  771,  802,  803,  774,  775,  806,  807,  778,  779,  810,  811,  782,  783,  814,  815,  786,  787,  818,  819,  790,  791,  822,  823,  794,  795,  826,  827,  798,  799,  830,  831],
        [ 832,  833,  864,  865,  836,  837,  868,  869,  840,  841,  872,  873,  844,  845,  876,  877,  848,  849,  880,  881,  852,  853,  884,  885,  856,  857,  888,  889,  860,  861,  892,  893],
        [ 834,  835,  866,  867,  838,  839,  870,  871,  842,  843,  874,  875,  846,  847,  878,  879,  850,  851,  882,  883,  854,  855,  886,  887,  858,  859,  890,  891,  862,  863,  894,  895],
        [ 896,  897,  928,  929,  900,  901,  932,  933,  904,  905,  936,  937,  908,  909,  940,  941,  912,  913,  944,  945,  916,  917,  948,  949,  920,  921,  952,  953,  924,  925,  956,  957],
        [ 898,  899,  930,  931,  902,  903,  934,  935,  906,  907,  938,  939,  910,  911,  942,  943,  914,  915,  946,  947,  918,  919,  950,  951,  922,  923,  954,  955,  926,  927,  958,  959],
        [ 960,  961,  992,  993,  964,  965,  996,  997,  968,  969, 1000, 1001,  972,  973, 1004, 1005,  976,  977, 1008, 1009,  980,  981, 1012, 1013,  984,  985, 1016, 1017,  988,  989, 1020, 1021],
        [ 962,  963,  994,  995,  966,  967,  998,  999,  970,  971, 1002, 1003,  974,  975, 1006, 1007,  978,  979, 1010, 1011,  982,  983, 1014, 1015,  986,  987, 1018, 1019,  990,  991, 1022, 1023]])
    # fmt: on
    access_order, access_count = tiles.accesses()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # Repeat other dimension
    tiles = TensorTiler2D.step_tiler(
        (32, 32),
        tile_dims=(2, 2),
        tile_group_repeats=(32 // 4, 1),
        tile_group_steps=(2, 2),
    )
    assert len(tiles) == (32 // (2 * 1)) * (32 // (2 * (32 // 4)))
    assert tiles[0] == TensorAccessPattern(
        (32, 32), offset=0, sizes=[1, 8, 2, 2], strides=[0, 128, 32, 1]
    )
    assert tiles[1] == TensorAccessPattern(
        (32, 32), offset=2, sizes=[1, 8, 2, 2], strides=[0, 128, 32, 1]
    )
    assert tiles[26] == TensorAccessPattern(
        (32, 32), offset=84, sizes=[1, 8, 2, 2], strides=[0, 128, 32, 1]
    )
    assert tiles[-1] == TensorAccessPattern(
        (32, 32), offset=94, sizes=[1, 8, 2, 2], strides=[0, 128, 32, 1]
    )
    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    1,   32,   33,   64,   65,   96,   97,  128,  129,  160,  161,  192,  193,  224,  225,  256,  257,  288,  289,  320,  321,  352,  353,  384,  385,  416,  417,  448,  449,  480,  481],
        [   2,    3,   34,   35,   66,   67,   98,   99,  130,  131,  162,  163,  194,  195,  226,  227,  258,  259,  290,  291,  322,  323,  354,  355,  386,  387,  418,  419,  450,  451,  482,  483],
        [ 512,  513,  544,  545,  576,  577,  608,  609,  640,  641,  672,  673,  704,  705,  736,  737,  768,  769,  800,  801,  832,  833,  864,  865,  896,  897,  928,  929,  960,  961,  992,  993],
        [ 514,  515,  546,  547,  578,  579,  610,  611,  642,  643,  674,  675,  706,  707,  738,  739,  770,  771,  802,  803,  834,  835,  866,  867,  898,  899,  930,  931,  962,  963,  994,  995],
        [   4,    5,   36,   37,   68,   69,  100,  101,  132,  133,  164,  165,  196,  197,  228,  229,  260,  261,  292,  293,  324,  325,  356,  357,  388,  389,  420,  421,  452,  453,  484,  485],
        [   6,    7,   38,   39,   70,   71,  102,  103,  134,  135,  166,  167,  198,  199,  230,  231,  262,  263,  294,  295,  326,  327,  358,  359,  390,  391,  422,  423,  454,  455,  486,  487],
        [ 516,  517,  548,  549,  580,  581,  612,  613,  644,  645,  676,  677,  708,  709,  740,  741,  772,  773,  804,  805,  836,  837,  868,  869,  900,  901,  932,  933,  964,  965,  996,  997],
        [ 518,  519,  550,  551,  582,  583,  614,  615,  646,  647,  678,  679,  710,  711,  742,  743,  774,  775,  806,  807,  838,  839,  870,  871,  902,  903,  934,  935,  966,  967,  998,  999],
        [   8,    9,   40,   41,   72,   73,  104,  105,  136,  137,  168,  169,  200,  201,  232,  233,  264,  265,  296,  297,  328,  329,  360,  361,  392,  393,  424,  425,  456,  457,  488,  489],
        [  10,   11,   42,   43,   74,   75,  106,  107,  138,  139,  170,  171,  202,  203,  234,  235,  266,  267,  298,  299,  330,  331,  362,  363,  394,  395,  426,  427,  458,  459,  490,  491],
        [ 520,  521,  552,  553,  584,  585,  616,  617,  648,  649,  680,  681,  712,  713,  744,  745,  776,  777,  808,  809,  840,  841,  872,  873,  904,  905,  936,  937,  968,  969, 1000, 1001],
        [ 522,  523,  554,  555,  586,  587,  618,  619,  650,  651,  682,  683,  714,  715,  746,  747,  778,  779,  810,  811,  842,  843,  874,  875,  906,  907,  938,  939,  970,  971, 1002, 1003],
        [  12,   13,   44,   45,   76,   77,  108,  109,  140,  141,  172,  173,  204,  205,  236,  237,  268,  269,  300,  301,  332,  333,  364,  365,  396,  397,  428,  429,  460,  461,  492,  493],
        [  14,   15,   46,   47,   78,   79,  110,  111,  142,  143,  174,  175,  206,  207,  238,  239,  270,  271,  302,  303,  334,  335,  366,  367,  398,  399,  430,  431,  462,  463,  494,  495],
        [ 524,  525,  556,  557,  588,  589,  620,  621,  652,  653,  684,  685,  716,  717,  748,  749,  780,  781,  812,  813,  844,  845,  876,  877,  908,  909,  940,  941,  972,  973, 1004, 1005],
        [ 526,  527,  558,  559,  590,  591,  622,  623,  654,  655,  686,  687,  718,  719,  750,  751,  782,  783,  814,  815,  846,  847,  878,  879,  910,  911,  942,  943,  974,  975, 1006, 1007],
        [  16,   17,   48,   49,   80,   81,  112,  113,  144,  145,  176,  177,  208,  209,  240,  241,  272,  273,  304,  305,  336,  337,  368,  369,  400,  401,  432,  433,  464,  465,  496,  497],
        [  18,   19,   50,   51,   82,   83,  114,  115,  146,  147,  178,  179,  210,  211,  242,  243,  274,  275,  306,  307,  338,  339,  370,  371,  402,  403,  434,  435,  466,  467,  498,  499],
        [ 528,  529,  560,  561,  592,  593,  624,  625,  656,  657,  688,  689,  720,  721,  752,  753,  784,  785,  816,  817,  848,  849,  880,  881,  912,  913,  944,  945,  976,  977, 1008, 1009],
        [ 530,  531,  562,  563,  594,  595,  626,  627,  658,  659,  690,  691,  722,  723,  754,  755,  786,  787,  818,  819,  850,  851,  882,  883,  914,  915,  946,  947,  978,  979, 1010, 1011],
        [  20,   21,   52,   53,   84,   85,  116,  117,  148,  149,  180,  181,  212,  213,  244,  245,  276,  277,  308,  309,  340,  341,  372,  373,  404,  405,  436,  437,  468,  469,  500,  501],
        [  22,   23,   54,   55,   86,   87,  118,  119,  150,  151,  182,  183,  214,  215,  246,  247,  278,  279,  310,  311,  342,  343,  374,  375,  406,  407,  438,  439,  470,  471,  502,  503],
        [ 532,  533,  564,  565,  596,  597,  628,  629,  660,  661,  692,  693,  724,  725,  756,  757,  788,  789,  820,  821,  852,  853,  884,  885,  916,  917,  948,  949,  980,  981, 1012, 1013],
        [ 534,  535,  566,  567,  598,  599,  630,  631,  662,  663,  694,  695,  726,  727,  758,  759,  790,  791,  822,  823,  854,  855,  886,  887,  918,  919,  950,  951,  982,  983, 1014, 1015],
        [  24,   25,   56,   57,   88,   89,  120,  121,  152,  153,  184,  185,  216,  217,  248,  249,  280,  281,  312,  313,  344,  345,  376,  377,  408,  409,  440,  441,  472,  473,  504,  505],
        [  26,   27,   58,   59,   90,   91,  122,  123,  154,  155,  186,  187,  218,  219,  250,  251,  282,  283,  314,  315,  346,  347,  378,  379,  410,  411,  442,  443,  474,  475,  506,  507],
        [ 536,  537,  568,  569,  600,  601,  632,  633,  664,  665,  696,  697,  728,  729,  760,  761,  792,  793,  824,  825,  856,  857,  888,  889,  920,  921,  952,  953,  984,  985, 1016, 1017],
        [ 538,  539,  570,  571,  602,  603,  634,  635,  666,  667,  698,  699,  730,  731,  762,  763,  794,  795,  826,  827,  858,  859,  890,  891,  922,  923,  954,  955,  986,  987, 1018, 1019],
        [  28,   29,   60,   61,   92,   93,  124,  125,  156,  157,  188,  189,  220,  221,  252,  253,  284,  285,  316,  317,  348,  349,  380,  381,  412,  413,  444,  445,  476,  477,  508,  509],
        [  30,   31,   62,   63,   94,   95,  126,  127,  158,  159,  190,  191,  222,  223,  254,  255,  286,  287,  318,  319,  350,  351,  382,  383,  414,  415,  446,  447,  478,  479,  510,  511],
        [ 540,  541,  572,  573,  604,  605,  636,  637,  668,  669,  700,  701,  732,  733,  764,  765,  796,  797,  828,  829,  860,  861,  892,  893,  924,  925,  956,  957,  988,  989, 1020, 1021],
        [ 542,  543,  574,  575,  606,  607,  638,  639,  670,  671,  702,  703,  734,  735,  766,  767,  798,  799,  830,  831,  862,  863,  894,  895,  926,  927,  958,  959,  990,  991, 1022, 1023]])
    # fmt: on
    access_order, access_count = tiles.accesses()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # Different repeats and steps
    tiles = TensorTiler2D.step_tiler(
        (32, 32),
        tile_dims=(2, 2),
        tile_group_repeats=(8, 2),
        tile_group_steps=(2, 4),
    )
    assert len(tiles) == (32 // (2 * 8)) * (32 // (2 * 2))
    assert tiles[0] == TensorAccessPattern(
        (32, 32), offset=0, sizes=[8, 2, 2, 2], strides=[128, 8, 32, 1]
    )
    assert tiles[1] == TensorAccessPattern(
        (32, 32), offset=2, sizes=[8, 2, 2, 2], strides=[128, 8, 32, 1]
    )
    assert tiles[12] == TensorAccessPattern(
        (32, 32), offset=80, sizes=[8, 2, 2, 2], strides=[128, 8, 32, 1]
    )
    assert tiles[-1] == TensorAccessPattern(
        (32, 32), offset=86, sizes=[8, 2, 2, 2], strides=[128, 8, 32, 1]
    )
    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    1,   64,   65,  128,  129,  192,  193,    4,    5,   68,   69,  132,  133,  196,  197,  256,  257,  320,  321,  384,  385,  448,  449,  260,  261,  324,  325,  388,  389,  452,  453],
        [   2,    3,   66,   67,  130,  131,  194,  195,    6,    7,   70,   71,  134,  135,  198,  199,  258,  259,  322,  323,  386,  387,  450,  451,  262,  263,  326,  327,  390,  391,  454,  455],
        [ 512,  513,  576,  577,  640,  641,  704,  705,  516,  517,  580,  581,  644,  645,  708,  709,  768,  769,  832,  833,  896,  897,  960,  961,  772,  773,  836,  837,  900,  901,  964,  965],
        [ 514,  515,  578,  579,  642,  643,  706,  707,  518,  519,  582,  583,  646,  647,  710,  711,  770,  771,  834,  835,  898,  899,  962,  963,  774,  775,  838,  839,  902,  903,  966,  967],
        [   8,    9,   72,   73,  136,  137,  200,  201,   12,   13,   76,   77,  140,  141,  204,  205,  264,  265,  328,  329,  392,  393,  456,  457,  268,  269,  332,  333,  396,  397,  460,  461],
        [  10,   11,   74,   75,  138,  139,  202,  203,   14,   15,   78,   79,  142,  143,  206,  207,  266,  267,  330,  331,  394,  395,  458,  459,  270,  271,  334,  335,  398,  399,  462,  463],
        [ 520,  521,  584,  585,  648,  649,  712,  713,  524,  525,  588,  589,  652,  653,  716,  717,  776,  777,  840,  841,  904,  905,  968,  969,  780,  781,  844,  845,  908,  909,  972,  973],
        [ 522,  523,  586,  587,  650,  651,  714,  715,  526,  527,  590,  591,  654,  655,  718,  719,  778,  779,  842,  843,  906,  907,  970,  971,  782,  783,  846,  847,  910,  911,  974,  975],
        [  16,   17,   80,   81,  144,  145,  208,  209,   20,   21,   84,   85,  148,  149,  212,  213,  272,  273,  336,  337,  400,  401,  464,  465,  276,  277,  340,  341,  404,  405,  468,  469],
        [  18,   19,   82,   83,  146,  147,  210,  211,   22,   23,   86,   87,  150,  151,  214,  215,  274,  275,  338,  339,  402,  403,  466,  467,  278,  279,  342,  343,  406,  407,  470,  471],
        [ 528,  529,  592,  593,  656,  657,  720,  721,  532,  533,  596,  597,  660,  661,  724,  725,  784,  785,  848,  849,  912,  913,  976,  977,  788,  789,  852,  853,  916,  917,  980,  981],
        [ 530,  531,  594,  595,  658,  659,  722,  723,  534,  535,  598,  599,  662,  663,  726,  727,  786,  787,  850,  851,  914,  915,  978,  979,  790,  791,  854,  855,  918,  919,  982,  983],
        [  24,   25,   88,   89,  152,  153,  216,  217,   28,   29,   92,   93,  156,  157,  220,  221,  280,  281,  344,  345,  408,  409,  472,  473,  284,  285,  348,  349,  412,  413,  476,  477],
        [  26,   27,   90,   91,  154,  155,  218,  219,   30,   31,   94,   95,  158,  159,  222,  223,  282,  283,  346,  347,  410,  411,  474,  475,  286,  287,  350,  351,  414,  415,  478,  479],
        [ 536,  537,  600,  601,  664,  665,  728,  729,  540,  541,  604,  605,  668,  669,  732,  733,  792,  793,  856,  857,  920,  921,  984,  985,  796,  797,  860,  861,  924,  925,  988,  989],
        [ 538,  539,  602,  603,  666,  667,  730,  731,  542,  543,  606,  607,  670,  671,  734,  735,  794,  795,  858,  859,  922,  923,  986,  987,  798,  799,  862,  863,  926,  927,  990,  991],
        [  32,   33,   96,   97,  160,  161,  224,  225,   36,   37,  100,  101,  164,  165,  228,  229,  288,  289,  352,  353,  416,  417,  480,  481,  292,  293,  356,  357,  420,  421,  484,  485],
        [  34,   35,   98,   99,  162,  163,  226,  227,   38,   39,  102,  103,  166,  167,  230,  231,  290,  291,  354,  355,  418,  419,  482,  483,  294,  295,  358,  359,  422,  423,  486,  487],
        [ 544,  545,  608,  609,  672,  673,  736,  737,  548,  549,  612,  613,  676,  677,  740,  741,  800,  801,  864,  865,  928,  929,  992,  993,  804,  805,  868,  869,  932,  933,  996,  997],
        [ 546,  547,  610,  611,  674,  675,  738,  739,  550,  551,  614,  615,  678,  679,  742,  743,  802,  803,  866,  867,  930,  931,  994,  995,  806,  807,  870,  871,  934,  935,  998,  999],
        [  40,   41,  104,  105,  168,  169,  232,  233,   44,   45,  108,  109,  172,  173,  236,  237,  296,  297,  360,  361,  424,  425,  488,  489,  300,  301,  364,  365,  428,  429,  492,  493],
        [  42,   43,  106,  107,  170,  171,  234,  235,   46,   47,  110,  111,  174,  175,  238,  239,  298,  299,  362,  363,  426,  427,  490,  491,  302,  303,  366,  367,  430,  431,  494,  495],
        [ 552,  553,  616,  617,  680,  681,  744,  745,  556,  557,  620,  621,  684,  685,  748,  749,  808,  809,  872,  873,  936,  937, 1000, 1001,  812,  813,  876,  877,  940,  941, 1004, 1005],
        [ 554,  555,  618,  619,  682,  683,  746,  747,  558,  559,  622,  623,  686,  687,  750,  751,  810,  811,  874,  875,  938,  939, 1002, 1003,  814,  815,  878,  879,  942,  943, 1006, 1007],
        [  48,   49,  112,  113,  176,  177,  240,  241,   52,   53,  116,  117,  180,  181,  244,  245,  304,  305,  368,  369,  432,  433,  496,  497,  308,  309,  372,  373,  436,  437,  500,  501],
        [  50,   51,  114,  115,  178,  179,  242,  243,   54,   55,  118,  119,  182,  183,  246,  247,  306,  307,  370,  371,  434,  435,  498,  499,  310,  311,  374,  375,  438,  439,  502,  503],
        [ 560,  561,  624,  625,  688,  689,  752,  753,  564,  565,  628,  629,  692,  693,  756,  757,  816,  817,  880,  881,  944,  945, 1008, 1009,  820,  821,  884,  885,  948,  949, 1012, 1013],
        [ 562,  563,  626,  627,  690,  691,  754,  755,  566,  567,  630,  631,  694,  695,  758,  759,  818,  819,  882,  883,  946,  947, 1010, 1011,  822,  823,  886,  887,  950,  951, 1014, 1015],
        [  56,   57,  120,  121,  184,  185,  248,  249,   60,   61,  124,  125,  188,  189,  252,  253,  312,  313,  376,  377,  440,  441,  504,  505,  316,  317,  380,  381,  444,  445,  508,  509],
        [  58,   59,  122,  123,  186,  187,  250,  251,   62,   63,  126,  127,  190,  191,  254,  255,  314,  315,  378,  379,  442,  443,  506,  507,  318,  319,  382,  383,  446,  447,  510,  511],
        [ 568,  569,  632,  633,  696,  697,  760,  761,  572,  573,  636,  637,  700,  701,  764,  765,  824,  825,  888,  889,  952,  953, 1016, 1017,  828,  829,  892,  893,  956,  957, 1020, 1021],
        [ 570,  571,  634,  635,  698,  699,  762,  763,  574,  575,  638,  639,  702,  703,  766,  767,  826,  827,  890,  891,  954,  955, 1018, 1019,  830,  831,  894,  895,  958,  959, 1022, 1023]])
    # fmt: on
    access_order, access_count = tiles.accesses()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # Tile col major
    tiles = TensorTiler2D.step_tiler(
        (32, 32),
        tile_dims=(2, 2),
        tile_group_repeats=(8, 2),
        tile_group_steps=(2, 4),
        tile_col_major=True,
    )
    assert len(tiles) == (32 // (2 * 8)) * (32 // (2 * 2))
    assert tiles[0] == TensorAccessPattern(
        (32, 32), offset=0, sizes=[8, 2, 2, 2], strides=[128, 8, 1, 32]
    )
    assert tiles[1] == TensorAccessPattern(
        (32, 32), offset=2, sizes=[8, 2, 2, 2], strides=[128, 8, 1, 32]
    )
    assert tiles[12] == TensorAccessPattern(
        (32, 32), offset=80, sizes=[8, 2, 2, 2], strides=[128, 8, 1, 32]
    )
    assert tiles[-1] == TensorAccessPattern(
        (32, 32), offset=86, sizes=[8, 2, 2, 2], strides=[128, 8, 1, 32]
    )
    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    2,   64,   66,  128,  130,  192,  194,    4,    6,   68,   70,  132,  134,  196,  198,  256,  258,  320,  322,  384,  386,  448,  450,  260,  262,  324,  326,  388,  390,  452,  454],
        [   1,    3,   65,   67,  129,  131,  193,  195,    5,    7,   69,   71,  133,  135,  197,  199,  257,  259,  321,  323,  385,  387,  449,  451,  261,  263,  325,  327,  389,  391,  453,  455],
        [ 512,  514,  576,  578,  640,  642,  704,  706,  516,  518,  580,  582,  644,  646,  708,  710,  768,  770,  832,  834,  896,  898,  960,  962,  772,  774,  836,  838,  900,  902,  964,  966],
        [ 513,  515,  577,  579,  641,  643,  705,  707,  517,  519,  581,  583,  645,  647,  709,  711,  769,  771,  833,  835,  897,  899,  961,  963,  773,  775,  837,  839,  901,  903,  965,  967],
        [   8,   10,   72,   74,  136,  138,  200,  202,   12,   14,   76,   78,  140,  142,  204,  206,  264,  266,  328,  330,  392,  394,  456,  458,  268,  270,  332,  334,  396,  398,  460,  462],
        [   9,   11,   73,   75,  137,  139,  201,  203,   13,   15,   77,   79,  141,  143,  205,  207,  265,  267,  329,  331,  393,  395,  457,  459,  269,  271,  333,  335,  397,  399,  461,  463],
        [ 520,  522,  584,  586,  648,  650,  712,  714,  524,  526,  588,  590,  652,  654,  716,  718,  776,  778,  840,  842,  904,  906,  968,  970,  780,  782,  844,  846,  908,  910,  972,  974],
        [ 521,  523,  585,  587,  649,  651,  713,  715,  525,  527,  589,  591,  653,  655,  717,  719,  777,  779,  841,  843,  905,  907,  969,  971,  781,  783,  845,  847,  909,  911,  973,  975],
        [  16,   18,   80,   82,  144,  146,  208,  210,   20,   22,   84,   86,  148,  150,  212,  214,  272,  274,  336,  338,  400,  402,  464,  466,  276,  278,  340,  342,  404,  406,  468,  470],
        [  17,   19,   81,   83,  145,  147,  209,  211,   21,   23,   85,   87,  149,  151,  213,  215,  273,  275,  337,  339,  401,  403,  465,  467,  277,  279,  341,  343,  405,  407,  469,  471],
        [ 528,  530,  592,  594,  656,  658,  720,  722,  532,  534,  596,  598,  660,  662,  724,  726,  784,  786,  848,  850,  912,  914,  976,  978,  788,  790,  852,  854,  916,  918,  980,  982],
        [ 529,  531,  593,  595,  657,  659,  721,  723,  533,  535,  597,  599,  661,  663,  725,  727,  785,  787,  849,  851,  913,  915,  977,  979,  789,  791,  853,  855,  917,  919,  981,  983],
        [  24,   26,   88,   90,  152,  154,  216,  218,   28,   30,   92,   94,  156,  158,  220,  222,  280,  282,  344,  346,  408,  410,  472,  474,  284,  286,  348,  350,  412,  414,  476,  478],
        [  25,   27,   89,   91,  153,  155,  217,  219,   29,   31,   93,   95,  157,  159,  221,  223,  281,  283,  345,  347,  409,  411,  473,  475,  285,  287,  349,  351,  413,  415,  477,  479],
        [ 536,  538,  600,  602,  664,  666,  728,  730,  540,  542,  604,  606,  668,  670,  732,  734,  792,  794,  856,  858,  920,  922,  984,  986,  796,  798,  860,  862,  924,  926,  988,  990],
        [ 537,  539,  601,  603,  665,  667,  729,  731,  541,  543,  605,  607,  669,  671,  733,  735,  793,  795,  857,  859,  921,  923,  985,  987,  797,  799,  861,  863,  925,  927,  989,  991],
        [  32,   34,   96,   98,  160,  162,  224,  226,   36,   38,  100,  102,  164,  166,  228,  230,  288,  290,  352,  354,  416,  418,  480,  482,  292,  294,  356,  358,  420,  422,  484,  486],
        [  33,   35,   97,   99,  161,  163,  225,  227,   37,   39,  101,  103,  165,  167,  229,  231,  289,  291,  353,  355,  417,  419,  481,  483,  293,  295,  357,  359,  421,  423,  485,  487],
        [ 544,  546,  608,  610,  672,  674,  736,  738,  548,  550,  612,  614,  676,  678,  740,  742,  800,  802,  864,  866,  928,  930,  992,  994,  804,  806,  868,  870,  932,  934,  996,  998],
        [ 545,  547,  609,  611,  673,  675,  737,  739,  549,  551,  613,  615,  677,  679,  741,  743,  801,  803,  865,  867,  929,  931,  993,  995,  805,  807,  869,  871,  933,  935,  997,  999],
        [  40,   42,  104,  106,  168,  170,  232,  234,   44,   46,  108,  110,  172,  174,  236,  238,  296,  298,  360,  362,  424,  426,  488,  490,  300,  302,  364,  366,  428,  430,  492,  494],
        [  41,   43,  105,  107,  169,  171,  233,  235,   45,   47,  109,  111,  173,  175,  237,  239,  297,  299,  361,  363,  425,  427,  489,  491,  301,  303,  365,  367,  429,  431,  493,  495],
        [ 552,  554,  616,  618,  680,  682,  744,  746,  556,  558,  620,  622,  684,  686,  748,  750,  808,  810,  872,  874,  936,  938, 1000, 1002,  812,  814,  876,  878,  940,  942, 1004, 1006],
        [ 553,  555,  617,  619,  681,  683,  745,  747,  557,  559,  621,  623,  685,  687,  749,  751,  809,  811,  873,  875,  937,  939, 1001, 1003,  813,  815,  877,  879,  941,  943, 1005, 1007],
        [  48,   50,  112,  114,  176,  178,  240,  242,   52,   54,  116,  118,  180,  182,  244,  246,  304,  306,  368,  370,  432,  434,  496,  498,  308,  310,  372,  374,  436,  438,  500,  502],
        [  49,   51,  113,  115,  177,  179,  241,  243,   53,   55,  117,  119,  181,  183,  245,  247,  305,  307,  369,  371,  433,  435,  497,  499,  309,  311,  373,  375,  437,  439,  501,  503],
        [ 560,  562,  624,  626,  688,  690,  752,  754,  564,  566,  628,  630,  692,  694,  756,  758,  816,  818,  880,  882,  944,  946, 1008, 1010,  820,  822,  884,  886,  948,  950, 1012, 1014],
        [ 561,  563,  625,  627,  689,  691,  753,  755,  565,  567,  629,  631,  693,  695,  757,  759,  817,  819,  881,  883,  945,  947, 1009, 1011,  821,  823,  885,  887,  949,  951, 1013, 1015],
        [  56,   58,  120,  122,  184,  186,  248,  250,   60,   62,  124,  126,  188,  190,  252,  254,  312,  314,  376,  378,  440,  442,  504,  506,  316,  318,  380,  382,  444,  446,  508,  510],
        [  57,   59,  121,  123,  185,  187,  249,  251,   61,   63,  125,  127,  189,  191,  253,  255,  313,  315,  377,  379,  441,  443,  505,  507,  317,  319,  381,  383,  445,  447,  509,  511],
        [ 568,  570,  632,  634,  696,  698,  760,  762,  572,  574,  636,  638,  700,  702,  764,  766,  824,  826,  888,  890,  952,  954, 1016, 1018,  828,  830,  892,  894,  956,  958, 1020, 1022],
        [ 569,  571,  633,  635,  697,  699,  761,  763,  573,  575,  637,  639,  701,  703,  765,  767,  825,  827,  889,  891,  953,  955, 1017, 1019,  829,  831,  893,  895,  957,  959, 1021, 1023]])
    # fmt: on
    access_order, access_count = tiles.accesses()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # Tile col major and tile group col major
    tiles = TensorTiler2D.step_tiler(
        (32, 32),
        tile_dims=(2, 2),
        tile_group_repeats=(8, 2),
        tile_group_steps=(2, 4),
        tile_col_major=True,
        tile_group_col_major=True,
    )
    assert len(tiles) == (32 // (2 * 8)) * (32 // (2 * 2))
    assert tiles[0] == TensorAccessPattern(
        (32, 32), offset=0, sizes=[2, 8, 2, 2], strides=[8, 128, 1, 32]
    )
    assert tiles[1] == TensorAccessPattern(
        (32, 32), offset=2, sizes=[2, 8, 2, 2], strides=[8, 128, 1, 32]
    )
    assert tiles[12] == TensorAccessPattern(
        (32, 32), offset=80, sizes=[2, 8, 2, 2], strides=[8, 128, 1, 32]
    )
    assert tiles[-1] == TensorAccessPattern(
        (32, 32), offset=86, sizes=[2, 8, 2, 2], strides=[8, 128, 1, 32]
    )
    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    2,   64,   66,  128,  130,  192,  194,   32,   34,   96,   98,  160,  162,  224,  226,  256,  258,  320,  322,  384,  386,  448,  450,  288,  290,  352,  354,  416,  418,  480,  482],
        [   1,    3,   65,   67,  129,  131,  193,  195,   33,   35,   97,   99,  161,  163,  225,  227,  257,  259,  321,  323,  385,  387,  449,  451,  289,  291,  353,  355,  417,  419,  481,  483],
        [ 512,  514,  576,  578,  640,  642,  704,  706,  544,  546,  608,  610,  672,  674,  736,  738,  768,  770,  832,  834,  896,  898,  960,  962,  800,  802,  864,  866,  928,  930,  992,  994],
        [ 513,  515,  577,  579,  641,  643,  705,  707,  545,  547,  609,  611,  673,  675,  737,  739,  769,  771,  833,  835,  897,  899,  961,  963,  801,  803,  865,  867,  929,  931,  993,  995],
        [   4,    6,   68,   70,  132,  134,  196,  198,   36,   38,  100,  102,  164,  166,  228,  230,  260,  262,  324,  326,  388,  390,  452,  454,  292,  294,  356,  358,  420,  422,  484,  486],
        [   5,    7,   69,   71,  133,  135,  197,  199,   37,   39,  101,  103,  165,  167,  229,  231,  261,  263,  325,  327,  389,  391,  453,  455,  293,  295,  357,  359,  421,  423,  485,  487],
        [ 516,  518,  580,  582,  644,  646,  708,  710,  548,  550,  612,  614,  676,  678,  740,  742,  772,  774,  836,  838,  900,  902,  964,  966,  804,  806,  868,  870,  932,  934,  996,  998],
        [ 517,  519,  581,  583,  645,  647,  709,  711,  549,  551,  613,  615,  677,  679,  741,  743,  773,  775,  837,  839,  901,  903,  965,  967,  805,  807,  869,  871,  933,  935,  997,  999],
        [   8,   10,   72,   74,  136,  138,  200,  202,   40,   42,  104,  106,  168,  170,  232,  234,  264,  266,  328,  330,  392,  394,  456,  458,  296,  298,  360,  362,  424,  426,  488,  490],
        [   9,   11,   73,   75,  137,  139,  201,  203,   41,   43,  105,  107,  169,  171,  233,  235,  265,  267,  329,  331,  393,  395,  457,  459,  297,  299,  361,  363,  425,  427,  489,  491],
        [ 520,  522,  584,  586,  648,  650,  712,  714,  552,  554,  616,  618,  680,  682,  744,  746,  776,  778,  840,  842,  904,  906,  968,  970,  808,  810,  872,  874,  936,  938, 1000, 1002],
        [ 521,  523,  585,  587,  649,  651,  713,  715,  553,  555,  617,  619,  681,  683,  745,  747,  777,  779,  841,  843,  905,  907,  969,  971,  809,  811,  873,  875,  937,  939, 1001, 1003],
        [  12,   14,   76,   78,  140,  142,  204,  206,   44,   46,  108,  110,  172,  174,  236,  238,  268,  270,  332,  334,  396,  398,  460,  462,  300,  302,  364,  366,  428,  430,  492,  494],
        [  13,   15,   77,   79,  141,  143,  205,  207,   45,   47,  109,  111,  173,  175,  237,  239,  269,  271,  333,  335,  397,  399,  461,  463,  301,  303,  365,  367,  429,  431,  493,  495],
        [ 524,  526,  588,  590,  652,  654,  716,  718,  556,  558,  620,  622,  684,  686,  748,  750,  780,  782,  844,  846,  908,  910,  972,  974,  812,  814,  876,  878,  940,  942, 1004, 1006],
        [ 525,  527,  589,  591,  653,  655,  717,  719,  557,  559,  621,  623,  685,  687,  749,  751,  781,  783,  845,  847,  909,  911,  973,  975,  813,  815,  877,  879,  941,  943, 1005, 1007],
        [  16,   18,   80,   82,  144,  146,  208,  210,   48,   50,  112,  114,  176,  178,  240,  242,  272,  274,  336,  338,  400,  402,  464,  466,  304,  306,  368,  370,  432,  434,  496,  498],
        [  17,   19,   81,   83,  145,  147,  209,  211,   49,   51,  113,  115,  177,  179,  241,  243,  273,  275,  337,  339,  401,  403,  465,  467,  305,  307,  369,  371,  433,  435,  497,  499],
        [ 528,  530,  592,  594,  656,  658,  720,  722,  560,  562,  624,  626,  688,  690,  752,  754,  784,  786,  848,  850,  912,  914,  976,  978,  816,  818,  880,  882,  944,  946, 1008, 1010],
        [ 529,  531,  593,  595,  657,  659,  721,  723,  561,  563,  625,  627,  689,  691,  753,  755,  785,  787,  849,  851,  913,  915,  977,  979,  817,  819,  881,  883,  945,  947, 1009, 1011],
        [  20,   22,   84,   86,  148,  150,  212,  214,   52,   54,  116,  118,  180,  182,  244,  246,  276,  278,  340,  342,  404,  406,  468,  470,  308,  310,  372,  374,  436,  438,  500,  502],
        [  21,   23,   85,   87,  149,  151,  213,  215,   53,   55,  117,  119,  181,  183,  245,  247,  277,  279,  341,  343,  405,  407,  469,  471,  309,  311,  373,  375,  437,  439,  501,  503],
        [ 532,  534,  596,  598,  660,  662,  724,  726,  564,  566,  628,  630,  692,  694,  756,  758,  788,  790,  852,  854,  916,  918,  980,  982,  820,  822,  884,  886,  948,  950, 1012, 1014],
        [ 533,  535,  597,  599,  661,  663,  725,  727,  565,  567,  629,  631,  693,  695,  757,  759,  789,  791,  853,  855,  917,  919,  981,  983,  821,  823,  885,  887,  949,  951, 1013, 1015],
        [  24,   26,   88,   90,  152,  154,  216,  218,   56,   58,  120,  122,  184,  186,  248,  250,  280,  282,  344,  346,  408,  410,  472,  474,  312,  314,  376,  378,  440,  442,  504,  506],
        [  25,   27,   89,   91,  153,  155,  217,  219,   57,   59,  121,  123,  185,  187,  249,  251,  281,  283,  345,  347,  409,  411,  473,  475,  313,  315,  377,  379,  441,  443,  505,  507],
        [ 536,  538,  600,  602,  664,  666,  728,  730,  568,  570,  632,  634,  696,  698,  760,  762,  792,  794,  856,  858,  920,  922,  984,  986,  824,  826,  888,  890,  952,  954, 1016, 1018],
        [ 537,  539,  601,  603,  665,  667,  729,  731,  569,  571,  633,  635,  697,  699,  761,  763,  793,  795,  857,  859,  921,  923,  985,  987,  825,  827,  889,  891,  953,  955, 1017, 1019],
        [  28,   30,   92,   94,  156,  158,  220,  222,   60,   62,  124,  126,  188,  190,  252,  254,  284,  286,  348,  350,  412,  414,  476,  478,  316,  318,  380,  382,  444,  446,  508,  510],
        [  29,   31,   93,   95,  157,  159,  221,  223,   61,   63,  125,  127,  189,  191,  253,  255,  285,  287,  349,  351,  413,  415,  477,  479,  317,  319,  381,  383,  445,  447,  509,  511],
        [ 540,  542,  604,  606,  668,  670,  732,  734,  572,  574,  636,  638,  700,  702,  764,  766,  796,  798,  860,  862,  924,  926,  988,  990,  828,  830,  892,  894,  956,  958, 1020, 1022],
        [ 541,  543,  605,  607,  669,  671,  733,  735,  573,  575,  637,  639,  701,  703,  765,  767,  797,  799,  861,  863,  925,  927,  989,  991,  829,  831,  893,  895,  957,  959, 1021, 1023]])
    # fmt: on
    access_order, access_count = tiles.accesses()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # Tile col major and tile group col major and iter col major
    tiles = TensorTiler2D.step_tiler(
        (32, 32),
        tile_dims=(2, 2),
        tile_group_repeats=(8, 2),
        tile_group_steps=(2, 4),
        tile_col_major=True,
        tile_group_col_major=True,
        iter_col_major=True,
    )
    assert len(tiles) == (32 // (2 * 8)) * (32 // (2 * 2))
    assert tiles[0] == TensorAccessPattern(
        (32, 32), offset=0, sizes=[2, 8, 2, 2], strides=[8, 128, 1, 32]
    )
    assert tiles[1] == TensorAccessPattern(
        (32, 32), offset=64, sizes=[2, 8, 2, 2], strides=[8, 128, 1, 32]
    )
    assert tiles[12] == TensorAccessPattern(
        (32, 32), offset=20, sizes=[2, 8, 2, 2], strides=[8, 128, 1, 32]
    )
    assert tiles[-1] == TensorAccessPattern(
        (32, 32), offset=86, sizes=[2, 8, 2, 2], strides=[8, 128, 1, 32]
    )
    # fmt: off
    ref_access_order_tensor = np.array([
        [   0,    2,  128,  130,  256,  258,  384,  386,   32,   34,  160,  162,  288,  290,  416,  418,  512,  514,  640,  642,  768,  770,  896,  898,  544,  546,  672,  674,  800,  802,  928,  930],
        [   1,    3,  129,  131,  257,  259,  385,  387,   33,   35,  161,  163,  289,  291,  417,  419,  513,  515,  641,  643,  769,  771,  897,  899,  545,  547,  673,  675,  801,  803,  929,  931],
        [  64,   66,  192,  194,  320,  322,  448,  450,   96,   98,  224,  226,  352,  354,  480,  482,  576,  578,  704,  706,  832,  834,  960,  962,  608,  610,  736,  738,  864,  866,  992,  994],
        [  65,   67,  193,  195,  321,  323,  449,  451,   97,   99,  225,  227,  353,  355,  481,  483,  577,  579,  705,  707,  833,  835,  961,  963,  609,  611,  737,  739,  865,  867,  993,  995],
        [   4,    6,  132,  134,  260,  262,  388,  390,   36,   38,  164,  166,  292,  294,  420,  422,  516,  518,  644,  646,  772,  774,  900,  902,  548,  550,  676,  678,  804,  806,  932,  934],
        [   5,    7,  133,  135,  261,  263,  389,  391,   37,   39,  165,  167,  293,  295,  421,  423,  517,  519,  645,  647,  773,  775,  901,  903,  549,  551,  677,  679,  805,  807,  933,  935],
        [  68,   70,  196,  198,  324,  326,  452,  454,  100,  102,  228,  230,  356,  358,  484,  486,  580,  582,  708,  710,  836,  838,  964,  966,  612,  614,  740,  742,  868,  870,  996,  998],
        [  69,   71,  197,  199,  325,  327,  453,  455,  101,  103,  229,  231,  357,  359,  485,  487,  581,  583,  709,  711,  837,  839,  965,  967,  613,  615,  741,  743,  869,  871,  997,  999],
        [   8,   10,  136,  138,  264,  266,  392,  394,   40,   42,  168,  170,  296,  298,  424,  426,  520,  522,  648,  650,  776,  778,  904,  906,  552,  554,  680,  682,  808,  810,  936,  938],
        [   9,   11,  137,  139,  265,  267,  393,  395,   41,   43,  169,  171,  297,  299,  425,  427,  521,  523,  649,  651,  777,  779,  905,  907,  553,  555,  681,  683,  809,  811,  937,  939],
        [  72,   74,  200,  202,  328,  330,  456,  458,  104,  106,  232,  234,  360,  362,  488,  490,  584,  586,  712,  714,  840,  842,  968,  970,  616,  618,  744,  746,  872,  874, 1000, 1002],
        [  73,   75,  201,  203,  329,  331,  457,  459,  105,  107,  233,  235,  361,  363,  489,  491,  585,  587,  713,  715,  841,  843,  969,  971,  617,  619,  745,  747,  873,  875, 1001, 1003],
        [  12,   14,  140,  142,  268,  270,  396,  398,   44,   46,  172,  174,  300,  302,  428,  430,  524,  526,  652,  654,  780,  782,  908,  910,  556,  558,  684,  686,  812,  814,  940,  942],
        [  13,   15,  141,  143,  269,  271,  397,  399,   45,   47,  173,  175,  301,  303,  429,  431,  525,  527,  653,  655,  781,  783,  909,  911,  557,  559,  685,  687,  813,  815,  941,  943],
        [  76,   78,  204,  206,  332,  334,  460,  462,  108,  110,  236,  238,  364,  366,  492,  494,  588,  590,  716,  718,  844,  846,  972,  974,  620,  622,  748,  750,  876,  878, 1004, 1006],
        [  77,   79,  205,  207,  333,  335,  461,  463,  109,  111,  237,  239,  365,  367,  493,  495,  589,  591,  717,  719,  845,  847,  973,  975,  621,  623,  749,  751,  877,  879, 1005, 1007],
        [  16,   18,  144,  146,  272,  274,  400,  402,   48,   50,  176,  178,  304,  306,  432,  434,  528,  530,  656,  658,  784,  786,  912,  914,  560,  562,  688,  690,  816,  818,  944,  946],
        [  17,   19,  145,  147,  273,  275,  401,  403,   49,   51,  177,  179,  305,  307,  433,  435,  529,  531,  657,  659,  785,  787,  913,  915,  561,  563,  689,  691,  817,  819,  945,  947],
        [  80,   82,  208,  210,  336,  338,  464,  466,  112,  114,  240,  242,  368,  370,  496,  498,  592,  594,  720,  722,  848,  850,  976,  978,  624,  626,  752,  754,  880,  882, 1008, 1010],
        [  81,   83,  209,  211,  337,  339,  465,  467,  113,  115,  241,  243,  369,  371,  497,  499,  593,  595,  721,  723,  849,  851,  977,  979,  625,  627,  753,  755,  881,  883, 1009, 1011],
        [  20,   22,  148,  150,  276,  278,  404,  406,   52,   54,  180,  182,  308,  310,  436,  438,  532,  534,  660,  662,  788,  790,  916,  918,  564,  566,  692,  694,  820,  822,  948,  950],
        [  21,   23,  149,  151,  277,  279,  405,  407,   53,   55,  181,  183,  309,  311,  437,  439,  533,  535,  661,  663,  789,  791,  917,  919,  565,  567,  693,  695,  821,  823,  949,  951],
        [  84,   86,  212,  214,  340,  342,  468,  470,  116,  118,  244,  246,  372,  374,  500,  502,  596,  598,  724,  726,  852,  854,  980,  982,  628,  630,  756,  758,  884,  886, 1012, 1014],
        [  85,   87,  213,  215,  341,  343,  469,  471,  117,  119,  245,  247,  373,  375,  501,  503,  597,  599,  725,  727,  853,  855,  981,  983,  629,  631,  757,  759,  885,  887, 1013, 1015],
        [  24,   26,  152,  154,  280,  282,  408,  410,   56,   58,  184,  186,  312,  314,  440,  442,  536,  538,  664,  666,  792,  794,  920,  922,  568,  570,  696,  698,  824,  826,  952,  954],
        [  25,   27,  153,  155,  281,  283,  409,  411,   57,   59,  185,  187,  313,  315,  441,  443,  537,  539,  665,  667,  793,  795,  921,  923,  569,  571,  697,  699,  825,  827,  953,  955],
        [  88,   90,  216,  218,  344,  346,  472,  474,  120,  122,  248,  250,  376,  378,  504,  506,  600,  602,  728,  730,  856,  858,  984,  986,  632,  634,  760,  762,  888,  890, 1016, 1018],
        [  89,   91,  217,  219,  345,  347,  473,  475,  121,  123,  249,  251,  377,  379,  505,  507,  601,  603,  729,  731,  857,  859,  985,  987,  633,  635,  761,  763,  889,  891, 1017, 1019],
        [  28,   30,  156,  158,  284,  286,  412,  414,   60,   62,  188,  190,  316,  318,  444,  446,  540,  542,  668,  670,  796,  798,  924,  926,  572,  574,  700,  702,  828,  830,  956,  958],
        [  29,   31,  157,  159,  285,  287,  413,  415,   61,   63,  189,  191,  317,  319,  445,  447,  541,  543,  669,  671,  797,  799,  925,  927,  573,  575,  701,  703,  829,  831,  957,  959],
        [  92,   94,  220,  222,  348,  350,  476,  478,  124,  126,  252,  254,  380,  382,  508,  510,  604,  606,  732,  734,  860,  862,  988,  990,  636,  638,  764,  766,  892,  894, 1020, 1022],
        [  93,   95,  221,  223,  349,  351,  477,  479,  125,  127,  253,  255,  381,  383,  509,  511,  605,  607,  733,  735,  861,  863,  989,  991,  637,  639,  765,  767,  893,  895, 1021, 1023]])
    # fmt: on
    access_order, access_count = tiles.accesses()
    assert (access_order == ref_access_order_tensor).all()
    assert (access_count == 1).all()

    # CHECK: Pass!
    print("Pass!")


# CHECK-LABEL: step_tiler_invalid
@construct_test
def step_tiler_invalid():
    try:
        tiles = TensorTiler2D.step_tiler(
            (), (3, 2), (1, 1), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Bad tensor dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.step_tiler(
            (10, 9, 4), (3, 2), (1, 1), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Too many tensor dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.step_tiler(
            (9, 4), (3, -1), (1, 1), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Bad tile dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.step_tiler(
            (9, 4), (3,), (1, 1), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Too few tile dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.step_tiler(
            (9, 4), (1, 1, 1), (1, 1), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Too many tile dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.step_tiler(
            (9, 4), (3, 2), (1, 1), (1, 1), tile_col_major=True, pattern_repeat=0
        )
        raise ValueError("Invalid repeat.")
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.step_tiler(
            (9, 4), (4, 2), (1, 1), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Indivisible tile (height)")
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.step_tiler(
            (9, 4), (3, 3), (1, 1), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Indivisible tile (width)")
    except ValueError:
        # good
        pass

    try:
        tiles = TensorTiler2D.step_tiler(
            (9, 4), (3, 2), (1,), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Too few tile group dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.step_tiler(
            (9, 4), (3, 2), (1, -1), (1, 1), tile_col_major=True, pattern_repeat=5
        )
        raise ValueError("Bad tile group dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.step_tiler(
            (9, 4), (3, 2), (1, 1, 1), (1, 1), tile_col_major=True
        )
        raise ValueError("Too many tile group dims, should fail.")
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.step_tiler(
            (18, 8), (3, 2), (2, 3), (1, 1), tile_col_major=True
        )
        raise ValueError(
            "Indivisible by tile repeat width (but without allow_partial)."
        )
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.step_tiler(
            (18, 8), (3, 2), (4, 2), (1, 1), tile_col_major=True
        )
        raise ValueError(
            "Indivisible by tile repeat height (but without allow_partial)."
        )
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.step_tiler(
            (18, 8), (3, 2), (4, 2), (1, -1), tile_col_major=True
        )
        raise ValueError("Bad tile step dims")
    except ValueError:
        # good
        pass
    try:
        tiles = TensorTiler2D.step_tiler(
            (18, 8), (3, 2), (4, 2), (1,), tile_col_major=True
        )
        raise ValueError("Too few tile step dims")
    except ValueError:
        # good
        pass

    # CHECK: Pass!
    print("Pass!")
