name: Distro

on:
  workflow_dispatch:
    inputs:
      DEBUG_ENABLED:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        type: boolean
        required: false
        default: false
      DEBUG_OS:
        description: 'which runner os to run the tmate action in (if the tmate action is run)'
        type: string
        default: 'windows-2019'
        required: false
      DEBUG_ARCH:
        description: 'which runner arch to run the tmate action in (if the tmate action is run)'
        type: string
        default: 'x86_64'
        required: false
      DEBUG_DETACHED:
        description: 'whether to launch tmate in detached mode (if the tmate action is run)'
        type: boolean
        required: false
        default: true
      AIE_COMMIT:
        description: 'which aie commit to build'
        type: string
        required: false
        default: ''

  pull_request:
  release:
    types:
      - published

jobs:

  set_datetime:

    name: Set canonical datetime

    runs-on: ubuntu-latest

    outputs:
      DATETIME: ${{ steps.set_datetime.outputs.DATETIME }}

    steps:
      - name: set datetime
        id: set_datetime
        shell: bash
        run: |
          DATETIME=$(date +"%Y%m%d%H")
          echo "DATETIME=${DATETIME}" | tee -a $GITHUB_OUTPUT

  build_wheels:

    needs: [set_datetime]

    name: ${{ matrix.OS }} ${{ matrix.ARCH }}

    continue-on-error: true

    runs-on: ${{ matrix.OS }}

    outputs:
      MLIR_AIE_WHEEL_VERSION: ${{ steps.get_wheel_version.outputs.MLIR_AIE_WHEEL_VERSION }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - OS: ubuntu-20.04
            ARCH: x86_64

          - OS: ubuntu-20.04
            ARCH: aarch64

          - OS: macos-11
            ARCH: x86_64

          - OS: macos-11
            ARCH: arm64

          - OS: windows-2019
            ARCH: AMD64

    steps:
    - uses: makslevental/mlir-wheels/.github/actions/setup_base@main
      id: setup_base
      with:
        # optional
        DEBUG_ENABLED: ${{ inputs.DEBUG_ENABLED }}
        DEBUG_OS: ${{ inputs.DEBUG_OS }}
        DEBUG_ARCH: ${{ inputs.DEBUG_ARCH }}
        DEBUG_DETACHED: ${{ inputs.DEBUG_DETACHED }}
        # required
        MATRIX_OS: ${{ matrix.OS }}
        MATRIX_ARCH: ${{ matrix.ARCH }}

    - uses: makslevental/mlir-wheels/.github/actions/setup_ccache@main
      id: setup_ccache
      with:
        MATRIX_OS: ${{ matrix.OS }}
        MATRIX_ARCH: ${{ matrix.ARCH }}

    - name: Checkout
      working-directory: ${{ steps.setup_base.outputs.WORKSPACE_ROOT }}
      id: get_aie
      shell: bash
      run: |
        
        # AIE_COMMIT=${{ inputs.AIE_COMMIT }}
        AIE_COMMIT=11b98d7
        git clone --recursive https://github.com/Xilinx/mlir-aie.git
        if [ x"$AIE_COMMIT" != x"" ]; then
          pushd mlir-aie && git reset --hard $AIE_COMMIT && popd
        fi
        pushd mlir-aie && AIE_COMMIT=$(git rev-parse --short HEAD) && popd
        echo "AIE_COMMIT=${AIE_COMMIT}" | tee -a $GITHUB_OUTPUT

# https://stackoverflow.com/a/73467112
    - name: Split os
      shell: bash
      env:
        OS: ${{ matrix.OS }}
      id: split
      run: echo "platform_version=${OS##*-}" | tee -a $GITHUB_OUTPUT

    - name: cibuildwheel
      if: ${{ matrix.OS != 'ubuntu-20.04' || matrix.ARCH != 'aarch64' }}
      working-directory: ${{ steps.setup_base.outputs.WORKSPACE_ROOT }}
      shell: bash
      run: |
        
        pip install cibuildwheel
        
        PIP_FIND_LINKS="https://github.com/makslevental/mlir-wheels/releases/expanded_assets/latest https://github.com/Xilinx/mlir-aie/releases/expanded_assets/latest-wheels" \
        CIBW_ARCHS=${{ matrix.ARCH }} \
        CMAKE_GENERATOR="Ninja" \
        DATETIME=${{ needs.set_datetime.outputs.DATETIME }} \
        HOST_CCACHE_DIR=${{ steps.configure_ccache_dir_on_host.outputs.HOST_CCACHE_DIR }} \
        MATRIX_OS=${{ matrix.OS }} \
        AIE_COMMIT=${{ steps.get_aie.outputs.AIE_COMMIT }} \
        MLIR_WHEEL_VERSION="18.0.0.2023110822+950f689" \
        PARALLEL_LEVEL=${{ matrix.OS == 'windows-2019' && '2' || '4' }} \
        cibuildwheel --output-dir wheelhouse

    - name: build aarch ubuntu wheel
      shell: bash
      if: ${{ matrix.OS == 'ubuntu-20.04' && matrix.ARCH == 'aarch64' }}
      working-directory: ${{ steps.setup_base.outputs.WORKSPACE_ROOT }}
      run: |
        
        export PIP_NO_BUILD_ISOLATION="false"
        export PIP_FIND_LINKS="https://github.com/makslevental/mlir-wheels/releases/expanded_assets/latest https://github.com/Xilinx/mlir-aie/releases/expanded_assets/latest-wheels"
        export CIBW_ARCHS=${{ matrix.ARCH }}
        export MLIR_WHEEL_VERSION="18.0.0.2023110822+950f689"
        export MATRIX_OS=${{ matrix.OS }}
        
        pip install -r requirements.txt
        ./scripts/pip_install_mlir.sh
        
        CMAKE_GENERATOR=Ninja \
        AIE_COMMIT=${{ steps.get_aie.outputs.AIE_COMMIT }} \
        DATETIME=${{ needs.set_datetime.outputs.DATETIME }} \
        pip wheel . -v -w wheelhouse --no-build-isolation

    - name: Get wheel version
      id: get_wheel_version
      working-directory: ${{ steps.setup_base.outputs.WORKSPACE_ROOT }}
      shell: bash
      run: |
        
        pip install pkginfo
        WHL=$(ls wheelhouse/mlir_aie-*whl)
        echo "MLIR_AIE_WHEEL_VERSION=$(python -c "import pkginfo; print(pkginfo.Wheel('$WHL').version)")" | tee -a $GITHUB_OUTPUT

    - name: rename
      shell: bash
      if: ${{ matrix.OS == 'ubuntu-20.04' || matrix.OS == 'macos-11' }}
      run: |
        if [ x"${{ matrix.OS }}" == x"macos-11" ]; then
          brew install rename
        else
          sudo apt-get install -y rename
        fi
        rename 's/cp310-cp310/py3-none/' wheelhouse/mlir_aie-*whl
        rename 's/cp311-cp311/py3-none/' wheelhouse/mlir_aie-*whl
        
        if [ x"${{ matrix.OS }}" == x"ubuntu-20.04" ] && [ x"${{ matrix.ARCH }}" == x"aarch64" ]; then
          rename 's/x86_64/aarch64/' wheelhouse/mlir_aie-*whl
        fi

    - name: rename
      if: ${{ matrix.OS == 'windows-2019' }}
      working-directory: ${{ steps.setup_base.outputs.WORKSPACE_ROOT }}
      run: |
        ls wheelhouse/mlir_aie-*whl | Rename-Item -NewName {$_ -replace 'cp310-cp310', 'py3-none' }
        ls wheelhouse/mlir_aie-*whl | Rename-Item -NewName {$_ -replace 'cp311-cp311', 'py3-none' }

    - name: Download cache from container ubuntu
      if: (matrix.OS == 'ubuntu-20.04' && matrix.ARCH == 'x86_64') && (success() || failure())
      shell: bash
      working-directory: ${{ steps.setup_base.outputs.WORKSPACE_ROOT }}
      run: |
        
        ccache -s
        HOST_CCACHE_DIR="$(ccache --get-config cache_dir)"
        rm -rf $HOST_CCACHE_DIR
        mv ./wheelhouse/.ccache $HOST_CCACHE_DIR
        ls -la $HOST_CCACHE_DIR
        ccache -s

    - name: Reset datetime ccache
      working-directory: ${{ steps.setup_base.outputs.WORKSPACE_ROOT }}
      shell: bash
      run: |
        
        ccache -s
        HOST_CCACHE_DIR="$(ccache --get-config cache_dir)"
        find $HOST_CCACHE_DIR -exec touch -a -m -t "${{ needs.set_datetime.outputs.DATETIME }}00" {} \;
        ccache -s

    - name: Upload wheels
      if: success() || failure()
      uses: actions/upload-artifact@v3
      with:
        path: ${{ steps.setup_base.outputs.WORKSPACE_ROOT }}/wheelhouse/*.whl
        name: build_artifact

  upload_distro_wheels:

    name: Upload wheels

    needs: [build_wheels]

    runs-on: ubuntu-latest
#    environment: pypi
#    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: build_artifact
          path: dist

      - name: Release current commit
        uses: ncipollo/release-action@v1.12.0
        with:
          artifacts: "dist/*.whl,dist/*.tar.xz"
          token: "${{ secrets.GITHUB_TOKEN }}"
          body: "Wheels"
          tag: "latest-wheels"
          name: "latest-wheels"
          removeArtifacts: false
          allowUpdates: true
          replacesArtifacts: true
          makeLatest: true

  call-build-python-bindings:
    needs: [build_wheels, upload_distro_wheels]
    uses: Xilinx/mlir-aie/.github/workflows/wheels.yml@wheels2
    permissions:
      contents: write
      id-token: write
    secrets: inherit # pass all secrets
    with:
      MLIR_AIE_WHEEL_VERSION: ${{ needs.build_wheels.outputs.MLIR_AIE_WHEEL_VERSION }}
