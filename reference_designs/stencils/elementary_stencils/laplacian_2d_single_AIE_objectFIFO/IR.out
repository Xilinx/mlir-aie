module @test_chess_04_deprecated_shim_dma_precompiled_kernel {
  %0 = AIE.tile(7, 3)
  %1 = AIE.tile(7, 2)
  %2 = AIE.tile(7, 1)
  %3 = AIE.tile(7, 0)
  %4 = AIE.lock(%0, 14) {sym_name = "lock73_14"}
  AIE.multicast(%3, DMA : 0) {
    AIE.multi_dest<%0, DMA : 0>
  }
  %5 = AIE.lock(%3, 0) {sym_name = "of_0_lock_0"}
  %6 = AIE.buffer(%0) {sym_name = "of_1_buff_0"} : memref<256xi32>
  %7 = AIE.lock(%0, 0) {sym_name = "of_1_lock_0"}
  %8 = AIE.buffer(%0) {sym_name = "of_1_buff_1"} : memref<256xi32>
  %9 = AIE.lock(%0, 1) {sym_name = "of_1_lock_1"}
  AIE.multicast(%0, DMA : 0) {
    AIE.multi_dest<%3, DMA : 0>
  }
  %10 = AIE.buffer(%0) {sym_name = "of_2_buff_0"} : memref<256xi32>
  %11 = AIE.lock(%0, 2) {sym_name = "of_2_lock_0"}
  %12 = AIE.buffer(%0) {sym_name = "of_2_buff_1"} : memref<256xi32>
  %13 = AIE.lock(%0, 3) {sym_name = "of_2_lock_1"}
  %14 = AIE.lock(%3, 1) {sym_name = "of_3_lock_0"}
  %15 = AIE.external_buffer {sym_name = "ddr_test_buffer_in0"} : memref<256xi32>
  %16 = AIE.external_buffer {sym_name = "ddr_test_buffer_out"} : memref<256xi32>
  func.func private @vec_1d_3point(memref<256xi32>, memref<256xi32>)
  %17 = AIE.core(%0) {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c1_0 = arith.constant 1 : index
    AIE.useLock(%4, Acquire, 0)
    AIE.useLock(%7, Acquire, 1)
    AIE.useLock(%11, Acquire, 0)
    func.call @vec_1d_3point(%6, %10) : (memref<256xi32>, memref<256xi32>) -> ()
    AIE.useLock(%7, Release, 0)
    AIE.useLock(%11, Release, 1)
    AIE.useLock(%4, Release, 0)
    AIE.end
  } {link_with = "1d_3point.o"}
  %18 = AIE.mem(%0) {
    %20 = AIE.dmaStart(MM2S, 0, ^bb1, ^bb3)
  ^bb1:  // 2 preds: ^bb0, ^bb2
    AIE.useLock(%11, Acquire, 1)
    AIE.dmaBd(<%10 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%11, Release, 0)
    AIE.nextBd ^bb2
  ^bb2:  // pred: ^bb1
    AIE.useLock(%13, Acquire, 1)
    AIE.dmaBd(<%12 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%13, Release, 0)
    AIE.nextBd ^bb1
  ^bb3:  // pred: ^bb0
    %21 = AIE.dmaStart(S2MM, 0, ^bb4, ^bb6)
  ^bb4:  // 2 preds: ^bb3, ^bb5
    AIE.useLock(%7, Acquire, 0)
    AIE.dmaBd(<%6 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%7, Release, 1)
    AIE.nextBd ^bb5
  ^bb5:  // pred: ^bb4
    AIE.useLock(%9, Acquire, 0)
    AIE.dmaBd(<%8 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%9, Release, 1)
    AIE.nextBd ^bb4
  ^bb6:  // pred: ^bb3
    AIE.end
  }
  %19 = AIE.shimDMA(%3) {
    %20 = AIE.dmaStart(S2MM, 0, ^bb1, ^bb2)
  ^bb1:  // 2 preds: ^bb0, ^bb1
    AIE.useLock(%14, Acquire, 0)
    AIE.dmaBd(<%16 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%14, Release, 1)
    AIE.nextBd ^bb1
  ^bb2:  // pred: ^bb0
    %21 = AIE.dmaStart(MM2S, 0, ^bb3, ^bb4)
  ^bb3:  // 2 preds: ^bb2, ^bb3
    AIE.useLock(%5, Acquire, 1)
    AIE.dmaBd(<%15 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%5, Release, 0)
    AIE.nextBd ^bb3
  ^bb4:  // pred: ^bb2
    AIE.end
  }
}

