
// This file was auto-generated by aiecc.py --aie-generate-xaie.

#ifndef MLIR_AIE_QUIET
#define __mlir_aie_verbose(x) x
#else
#define __mlir_aie_verbose(x)
#endif

// The following is a wrapper for the common "if(call() != 0) return 1" pattern.
// Use this only in functions that return int. If the call this wrapper is used
// on does not succeed, the expanded code will exit out of the function
// containing this macro with an error code.
#define __mlir_aie_try(x) do { \
  AieRC ret = (x); \
  if(ret != XAIE_OK) { \
    return x; \
  } \
} while(0)

static XAie_DmaDimDesc *__mlir_aie_alloc_dim_desc(size_t ndims) {
  XAie_DmaDimDesc *ret = NULL;
  ret = (XAie_DmaDimDesc *)calloc(sizeof(XAie_DmaDimDesc), ndims);
  if(NULL == ret) {
    __mlir_aie_verbose(fprintf(stderr, "Allocating DmaDimDesc failed.\n"));
  }
  return ret;
}

aie_libxaie_ctx_t* mlir_aie_init_libxaie() {
  aie_libxaie_ctx_t *ctx = new aie_libxaie_ctx_t;
  if (!ctx)
    return 0;
  ctx->AieConfigPtr.AieGen = XAIE_DEV_GEN_AIEML;
  ctx->AieConfigPtr.BaseAddr = 0x20000000000;
  ctx->AieConfigPtr.ColShift = 25;
  ctx->AieConfigPtr.RowShift = 20;
  ctx->AieConfigPtr.NumRows = 6;
  ctx->AieConfigPtr.NumCols = 5;
  ctx->AieConfigPtr.ShimRowNum = 0;
  ctx->AieConfigPtr.MemTileRowStart = 1;
  ctx->AieConfigPtr.MemTileNumRows = 1;
  //  ctx->AieConfigPtr.ReservedRowStart = XAIE_RES_TILE_ROW_START;
  //  ctx->AieConfigPtr.ReservedNumRows  = XAIE_RES_TILE_NUM_ROWS;
  ctx->AieConfigPtr.AieTileRowStart = 2;
  ctx->AieConfigPtr.AieTileNumRows = 4;
  ctx->AieConfigPtr.PartProp = {0};
  ctx->DevInst = {0};
  return ctx;
}

int mlir_aie_configure_cores(aie_libxaie_ctx_t* ctx) {
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(0,2)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(0,2), (const char*)"core_0_2.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 0, 2, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(0,3)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(0,3), (const char*)"core_0_3.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 0, 3, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(0,5)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(0,5), (const char*)"core_0_5.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 0, 5, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(0,4)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(0,4), (const char*)"core_0_4.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 0, 4, RC));
assert(RC == XAIE_OK);
}
return XAIE_OK;
} // mlir_aie_configure_cores

int mlir_aie_start_cores(aie_libxaie_ctx_t* ctx) {
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(0,4)));
return XAIE_OK;
} // mlir_aie_start_cores

int mlir_aie_configure_dmas(aie_libxaie_ctx_t* ctx) {
XAie_DmaDesc dma_tile02_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile02_bd0), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile02_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile02_bd0), /* addrA */ 0x2400,  /* len */ 2048 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile02_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile02_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile02_bd0), XAie_TileLoc(0,2),  /* bd */ 0));
XAie_DmaDesc dma_tile02_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile02_bd1), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile02_bd1), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile02_bd1), /* addrA */ 0x2C00,  /* len */ 2048 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile02_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile02_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile02_bd1), XAie_TileLoc(0,2),  /* bd */ 1));
XAie_DmaDesc dma_tile02_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile02_bd2), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile02_bd2), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile02_bd2), /* addrA */ 0x400,  /* len */ 4096 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile02_bd2),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile02_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile02_bd2), XAie_TileLoc(0,2),  /* bd */ 2));
XAie_DmaDesc dma_tile02_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile02_bd3), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile02_bd3), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile02_bd3), /* addrA */ 0x1400,  /* len */ 2048 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile02_bd3),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile02_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile02_bd3), XAie_TileLoc(0,2),  /* bd */ 3));
XAie_DmaDesc dma_tile02_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile02_bd4), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile02_bd4), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile02_bd4), /* addrA */ 0x1C00,  /* len */ 2048 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile02_bd4),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile02_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile02_bd4), XAie_TileLoc(0,2),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelPushBdToQueue(&(ctx->DevInst), XAie_TileLoc(0,2), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,2), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelPushBdToQueue(&(ctx->DevInst), XAie_TileLoc(0,2), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,2), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelPushBdToQueue(&(ctx->DevInst), XAie_TileLoc(0,2), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */3));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,2), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile04_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile04_bd0), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile04_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile04_bd0), /* addrA */ 0xC400,  /* len */ 2048 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile04_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile04_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile04_bd0), XAie_TileLoc(0,4),  /* bd */ 0));
XAie_DmaDesc dma_tile04_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile04_bd1), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile04_bd1), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile04_bd1), /* addrA */ 0xCC00,  /* len */ 2048 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile04_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile04_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile04_bd1), XAie_TileLoc(0,4),  /* bd */ 1));
XAie_DmaDesc dma_tile04_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile04_bd2), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile04_bd2), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile04_bd2), /* addrA */ 0x400,  /* len */ 32768 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile04_bd2),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile04_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile04_bd2), XAie_TileLoc(0,4),  /* bd */ 2));
XAie_DmaDesc dma_tile04_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile04_bd3), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile04_bd3), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile04_bd3), /* addrA */ 0x8400,  /* len */ 8192 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile04_bd3),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile04_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile04_bd3), XAie_TileLoc(0,4),  /* bd */ 3));
XAie_DmaDesc dma_tile04_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile04_bd4), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile04_bd4), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile04_bd4), /* addrA */ 0xA400,  /* len */ 8192 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile04_bd4),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile04_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile04_bd4), XAie_TileLoc(0,4),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelPushBdToQueue(&(ctx->DevInst), XAie_TileLoc(0,4), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,4), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelPushBdToQueue(&(ctx->DevInst), XAie_TileLoc(0,4), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,4), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelPushBdToQueue(&(ctx->DevInst), XAie_TileLoc(0,4), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */3));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,4), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile03_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile03_bd0), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile03_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile03_bd0), /* addrA */ 0x400,  /* len */ 36864 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile03_bd0),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile03_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile03_bd0), XAie_TileLoc(0,3),  /* bd */ 0));
XAie_DmaDesc dma_tile03_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile03_bd1), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile03_bd1), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile03_bd1), /* addrA */ 0x9400,  /* len */ 2048 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile03_bd1),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile03_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile03_bd1), XAie_TileLoc(0,3),  /* bd */ 1));
XAie_DmaDesc dma_tile03_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile03_bd2), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile03_bd2), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile03_bd2), /* addrA */ 0x9C00,  /* len */ 2048 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile03_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile03_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile03_bd2), XAie_TileLoc(0,3),  /* bd */ 2));
XAie_DmaDesc dma_tile03_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile03_bd3), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile03_bd3), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile03_bd3), /* addrA */ 0xA400,  /* len */ 2048 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile03_bd3),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile03_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile03_bd3), XAie_TileLoc(0,3),  /* bd */ 3));
XAie_DmaDesc dma_tile03_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile03_bd4), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile03_bd4), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile03_bd4), /* addrA */ 0xAC00,  /* len */ 2048 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile03_bd4),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile03_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile03_bd4), XAie_TileLoc(0,3),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelPushBdToQueue(&(ctx->DevInst), XAie_TileLoc(0,3), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,3), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelPushBdToQueue(&(ctx->DevInst), XAie_TileLoc(0,3), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */1));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,3), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
XAie_DmaDesc dma_tile05_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile05_bd0), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile05_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile05_bd0), /* addrA */ 0x400,  /* len */ 36864 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile05_bd0),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile05_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile05_bd0), XAie_TileLoc(0,5),  /* bd */ 0));
XAie_DmaDesc dma_tile05_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile05_bd1), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile05_bd1), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile05_bd1), /* addrA */ 0x9400,  /* len */ 2048 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile05_bd1),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile05_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile05_bd1), XAie_TileLoc(0,5),  /* bd */ 1));
XAie_DmaDesc dma_tile05_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile05_bd2), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile05_bd2), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile05_bd2), /* addrA */ 0x9C00,  /* len */ 2048 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile05_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile05_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile05_bd2), XAie_TileLoc(0,5),  /* bd */ 2));
XAie_DmaDesc dma_tile05_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile05_bd3), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile05_bd3), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile05_bd3), /* addrA */ 0xA400,  /* len */ 2048 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile05_bd3),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile05_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile05_bd3), XAie_TileLoc(0,5),  /* bd */ 3));
XAie_DmaDesc dma_tile05_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile05_bd4), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile05_bd4), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile05_bd4), /* addrA */ 0xAC00,  /* len */ 2048 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile05_bd4),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile05_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile05_bd4), XAie_TileLoc(0,5),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelPushBdToQueue(&(ctx->DevInst), XAie_TileLoc(0,5), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,5), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelPushBdToQueue(&(ctx->DevInst), XAie_TileLoc(0,5), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */1));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,5), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
XAie_DmaDesc dma_tile01_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd0), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd0), XAie_LockInit(64,-1),XAie_LockInit(65,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd0), /* addrA */ 0x92000,  /* len */ 2048 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd0), XAie_TileLoc(0,1),  /* bd */ 0));
XAie_DmaDesc dma_tile01_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd1), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd1), XAie_LockInit(64,-1),XAie_LockInit(65,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd1), /* addrA */ 0x92800,  /* len */ 2048 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd1),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd1), XAie_TileLoc(0,1),  /* bd */ 1));
XAie_DmaDesc dma_tile01_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd2), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd2), XAie_LockInit(64,-1),XAie_LockInit(65,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd2), /* addrA */ 0x93000,  /* len */ 2048 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd2), XAie_TileLoc(0,1),  /* bd */ 2));
XAie_DmaDesc dma_tile01_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd3), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd3), XAie_LockInit(64,-1),XAie_LockInit(65,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd3), /* addrA */ 0x93800,  /* len */ 2048 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd3),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd3), XAie_TileLoc(0,1),  /* bd */ 3));
XAie_DmaDesc dma_tile01_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd4), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd4), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd4), /* addrA */ 0x92000,  /* len */ 2048 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd4),  /* nextbd */ 5,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd4), XAie_TileLoc(0,1),  /* bd */ 4));
XAie_DmaDesc dma_tile01_bd5;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd5), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd5), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd5), /* addrA */ 0x92800,  /* len */ 2048 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd5),  /* nextbd */ 6,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd5)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd5), XAie_TileLoc(0,1),  /* bd */ 5));
XAie_DmaDesc dma_tile01_bd6;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd6), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd6), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd6), /* addrA */ 0x93000,  /* len */ 2048 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd6),  /* nextbd */ 7,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd6)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd6), XAie_TileLoc(0,1),  /* bd */ 6));
XAie_DmaDesc dma_tile01_bd7;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd7), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd7), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd7), /* addrA */ 0x93800,  /* len */ 2048 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd7),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd7)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd7), XAie_TileLoc(0,1),  /* bd */ 7));
XAie_DmaDesc dma_tile01_bd24;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd24), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd24), XAie_LockInit(66,-3),XAie_LockInit(67,3)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd24), /* addrA */ 0x80000,  /* len */ 73728 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd24),  /* nextbd */ 24,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd24)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd24), XAie_TileLoc(0,1),  /* bd */ 24));
XAie_DmaDesc dma_tile01_bd25;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd25), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd25), XAie_LockInit(67,-1),XAie_LockInit(66,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd25), /* addrA */ 0x80000,  /* len */ 4096 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd25),  /* nextbd */ 25,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd25)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd25), XAie_TileLoc(0,1),  /* bd */ 25));
XAie_DmaDesc dma_tile01_bd8;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd8), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd8), XAie_LockInit(67,-1),XAie_LockInit(66,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd8), /* addrA */ 0x81000,  /* len */ 36864 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd8),  /* nextbd */ 8,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd8)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd8), XAie_TileLoc(0,1),  /* bd */ 8));
XAie_DmaDesc dma_tile01_bd26;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd26), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd26), XAie_LockInit(67,-1),XAie_LockInit(66,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd26), /* addrA */ 0x8A000,  /* len */ 32768 * 1));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd26),  /* nextbd */ 26,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd26)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd26), XAie_TileLoc(0,1),  /* bd */ 26));
__mlir_aie_try(XAie_DmaChannelPushBdToQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelPushBdToQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelPushBdToQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */24));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelPushBdToQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */1, /* dmaDir */ DMA_MM2S, /* BdNum */25));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 1, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelPushBdToQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */2, /* dmaDir */ DMA_MM2S, /* BdNum */8));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 2, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelPushBdToQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */3, /* dmaDir */ DMA_MM2S, /* BdNum */26));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 3, /* dmaDir */ DMA_MM2S));
return XAIE_OK;
} // mlir_aie_configure_dmas

int mlir_aie_initialize_locks(aie_libxaie_ctx_t* ctx) {
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(4, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(4, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(4, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(4, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(2, 4)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(2, 4)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(4, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(2, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(2, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(2, 3)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(2, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(0, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(0, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(0, 4)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(0, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(1, 0)));
return XAIE_OK;
} // mlir_aie_initialize_locks
int mlir_aie_configure_switchboxes(aie_libxaie_ctx_t* ctx) {
  int x, y;
// Core Stream Switch column 0 row 0
x = 0;
y = 0;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 7, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, SOUTH, 2));
// Core Stream Switch column 0 row 1
x = 0;
y = 1;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 1, NORTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 2, NORTH, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 3, NORTH, 4));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, SOUTH, 0));
// Core Stream Switch column 0 row 2
x = 0;
y = 2;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 4, NORTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, NORTH, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, SOUTH, 0));
// Core Stream Switch column 0 row 3
x = 0;
y = 3;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, NORTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, SOUTH, 0));
// Core Stream Switch column 0 row 5
x = 0;
y = 5;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, DMA, 1));
// Core Stream Switch column 0 row 4
x = 0;
y = 4;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 0));
// ShimMux column 0 row 0
// NOTE ShimMux always connects from the south as directions are defined relative to the tile stream switch
x = 0;
y = 0;
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 3));
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 7));
__mlir_aie_try(XAie_EnableAieToShimDmaStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 2));
return XAIE_OK;
} // mlir_aie_configure_switchboxes

// buffer act_3_5_buff_0 with unsupported type memref<32x1x32xui8>;
// buffer act_3_5_buff_1 with unsupported type memref<32x1x32xui8>;
// buffer act_2_3_4_0_cons_buff_0 with unsupported type memref<32x1x64xui8>;
// buffer act_2_3_4_0_cons_buff_1 with unsupported type memref<32x1x64xui8>;
// buffer act_2_3_4_0_cons_buff_2 with unsupported type memref<32x1x64xui8>;
// buffer act_2_3_4_0_cons_buff_3 with unsupported type memref<32x1x64xui8>;
// buffer wts_buf_01_0_cons_buff_0 with unsupported type memref<36864xi8>;
const int rtp3_offset = 48128;
int32_t mlir_aie_read_buffer_rtp3(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(0,3), rtp3_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_rtp3(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(0,3), rtp3_offset + (index*4), int_value);
return rc;
}
// buffer inOF_wts_0_L3L2_cons_buff_0 with unsupported type memref<73728xi8>;
// buffer inOF_act_L3L2_1_cons_buff_0 with unsupported type memref<32x1x64xi8>;
// buffer inOF_act_L3L2_1_cons_buff_1 with unsupported type memref<32x1x64xi8>;
// buffer inOF_act_L3L2_1_cons_buff_2 with unsupported type memref<32x1x64xi8>;
// buffer inOF_act_L3L2_1_cons_buff_3 with unsupported type memref<32x1x64xi8>;
// buffer outOFL2L3_buff_0 with unsupported type memref<32x1x256xui8>;
// buffer outOFL2L3_buff_1 with unsupported type memref<32x1x256xui8>;
// buffer wts_buf_02_cons_buff_0 with unsupported type memref<32768xi8>;
// buffer skip_buf_cons_buff_0 with unsupported type memref<32x1x64xi8>;
// buffer skip_buf_cons_buff_1 with unsupported type memref<32x1x64xi8>;
const int rtp5_offset = 54272;
int32_t mlir_aie_read_buffer_rtp5(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(0,4), rtp5_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_rtp5(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(0,4), rtp5_offset + (index*4), int_value);
return rc;
}
// buffer act_2_3_4_buff_0 with unsupported type memref<32x1x64xui8>;
// buffer act_2_3_4_buff_1 with unsupported type memref<32x1x64xui8>;
// buffer wts_buf_00_cons_buff_0 with unsupported type memref<4096xi8>;
// buffer inOF_act_L3L2_0_cons_buff_0 with unsupported type memref<32x1x64xi8>;
// buffer inOF_act_L3L2_0_cons_buff_1 with unsupported type memref<32x1x64xi8>;
const int rtp2_offset = 13312;
int32_t mlir_aie_read_buffer_rtp2(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(0,2), rtp2_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_rtp2(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(0,2), rtp2_offset + (index*4), int_value);
return rc;
}
// buffer act_4_5_buff_0 with unsupported type memref<32x1x32xui8>;
// buffer act_4_5_buff_1 with unsupported type memref<32x1x32xui8>;
// buffer act_2_3_4_1_cons_buff_0 with unsupported type memref<32x1x64xui8>;
// buffer act_2_3_4_1_cons_buff_1 with unsupported type memref<32x1x64xui8>;
// buffer act_2_3_4_1_cons_buff_2 with unsupported type memref<32x1x64xui8>;
// buffer act_2_3_4_1_cons_buff_3 with unsupported type memref<32x1x64xui8>;
// buffer wts_buf_01_1_cons_buff_0 with unsupported type memref<36864xi8>;
const int rtp4_offset = 48128;
int32_t mlir_aie_read_buffer_rtp4(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(0,5), rtp4_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_rtp4(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(0,5), rtp4_offset + (index*4), int_value);
return rc;
}
int mlir_aie_acquire_outOFL2L3_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_outOFL2L3_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_outOFL2L3_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_outOFL2L3_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_outOFL2L3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_outOFL2L3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_outOFL2L3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_outOFL2L3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_4_5_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_4_5_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_4_5_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_4_5_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_3_5_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_3_5_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_3_5_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_3_5_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_2_3_4_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_2_3_4_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_2_3_4_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_2_3_4_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_2_3_4_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_2_3_4_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_2_3_4_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_2_3_4_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_2_3_4_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_2_3_4_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_2_3_4_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_2_3_4_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_buf_02_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_buf_02_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_buf_02_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_buf_02_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_buf_01_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_buf_01_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_buf_01_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_buf_01_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_buf_01_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_buf_01_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_buf_01_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_buf_01_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_buf_00_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_buf_00_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_buf_00_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_buf_00_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_inOF_wts_0_L3L2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_inOF_wts_0_L3L2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_inOF_wts_0_L3L2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_inOF_wts_0_L3L2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_inOF_wts_0_L3L2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_inOF_wts_0_L3L2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_inOF_wts_0_L3L2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_inOF_wts_0_L3L2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_skip_buf_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_skip_buf_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_skip_buf_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_skip_buf_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_inOF_act_L3L2_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_inOF_act_L3L2_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_inOF_act_L3L2_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_inOF_act_L3L2_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_inOF_act_L3L2_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_inOF_act_L3L2_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_inOF_act_L3L2_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_inOF_act_L3L2_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_inOF_act_L3L2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_inOF_act_L3L2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_inOF_act_L3L2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_inOF_act_L3L2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
