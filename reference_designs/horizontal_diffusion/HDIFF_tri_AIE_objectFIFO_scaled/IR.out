module @hdiff_bundle_1 {
  %0 = AIE.tile(0, 2)
  %1 = AIE.tile(0, 3)
  %2 = AIE.tile(0, 4)
  %3 = AIE.tile(0, 5)
  %4 = AIE.tile(1, 2)
  %5 = AIE.tile(1, 3)
  %6 = AIE.tile(1, 4)
  %7 = AIE.tile(1, 5)
  %8 = AIE.tile(2, 2)
  %9 = AIE.tile(2, 3)
  %10 = AIE.tile(2, 4)
  %11 = AIE.tile(2, 5)
  %12 = AIE.tile(2, 0)
  AIE.multicast(%12, DMA : 0) {
    AIE.multi_dest<%0, DMA : 0>
    AIE.multi_dest<%4, DMA : 0>
    AIE.multi_dest<%1, DMA : 0>
    AIE.multi_dest<%5, DMA : 0>
    AIE.multi_dest<%2, DMA : 0>
    AIE.multi_dest<%6, DMA : 0>
    AIE.multi_dest<%3, DMA : 0>
    AIE.multi_dest<%7, DMA : 0>
  }
  %13 = AIE.lock(%12, 0) {sym_name = "of_0_lock_0"}
  %14 = AIE.buffer(%7) {sym_name = "of_1_buff_0"} : memref<256xi32>
  %15 = AIE.lock(%7, 0) {sym_name = "of_1_lock_0"}
  %16 = AIE.buffer(%7) {sym_name = "of_1_buff_1"} : memref<256xi32>
  %17 = AIE.lock(%7, 1) {sym_name = "of_1_lock_1"}
  %18 = AIE.buffer(%7) {sym_name = "of_1_buff_2"} : memref<256xi32>
  %19 = AIE.lock(%7, 2) {sym_name = "of_1_lock_2"}
  %20 = AIE.buffer(%7) {sym_name = "of_1_buff_3"} : memref<256xi32>
  %21 = AIE.lock(%7, 3) {sym_name = "of_1_lock_3"}
  %22 = AIE.buffer(%7) {sym_name = "of_1_buff_4"} : memref<256xi32>
  %23 = AIE.lock(%7, 4) {sym_name = "of_1_lock_4"}
  %24 = AIE.buffer(%7) {sym_name = "of_1_buff_5"} : memref<256xi32>
  %25 = AIE.lock(%7, 5) {sym_name = "of_1_lock_5"}
  %26 = AIE.buffer(%7) {sym_name = "of_1_buff_6"} : memref<256xi32>
  %27 = AIE.lock(%7, 6) {sym_name = "of_1_lock_6"}
  %28 = AIE.buffer(%7) {sym_name = "of_1_buff_7"} : memref<256xi32>
  %29 = AIE.lock(%7, 7) {sym_name = "of_1_lock_7"}
  %30 = AIE.buffer(%7) {sym_name = "of_1_buff_8"} : memref<256xi32>
  %31 = AIE.lock(%7, 8) {sym_name = "of_1_lock_8"}
  %32 = AIE.buffer(%3) {sym_name = "of_2_buff_0"} : memref<256xi32>
  %33 = AIE.lock(%3, 0) {sym_name = "of_2_lock_0"}
  %34 = AIE.buffer(%3) {sym_name = "of_2_buff_1"} : memref<256xi32>
  %35 = AIE.lock(%3, 1) {sym_name = "of_2_lock_1"}
  %36 = AIE.buffer(%3) {sym_name = "of_2_buff_2"} : memref<256xi32>
  %37 = AIE.lock(%3, 2) {sym_name = "of_2_lock_2"}
  %38 = AIE.buffer(%3) {sym_name = "of_2_buff_3"} : memref<256xi32>
  %39 = AIE.lock(%3, 3) {sym_name = "of_2_lock_3"}
  %40 = AIE.buffer(%3) {sym_name = "of_2_buff_4"} : memref<256xi32>
  %41 = AIE.lock(%3, 4) {sym_name = "of_2_lock_4"}
  %42 = AIE.buffer(%3) {sym_name = "of_2_buff_5"} : memref<256xi32>
  %43 = AIE.lock(%3, 5) {sym_name = "of_2_lock_5"}
  %44 = AIE.buffer(%3) {sym_name = "of_2_buff_6"} : memref<256xi32>
  %45 = AIE.lock(%3, 6) {sym_name = "of_2_lock_6"}
  %46 = AIE.buffer(%3) {sym_name = "of_2_buff_7"} : memref<256xi32>
  %47 = AIE.lock(%3, 7) {sym_name = "of_2_lock_7"}
  %48 = AIE.buffer(%3) {sym_name = "of_2_buff_8"} : memref<256xi32>
  %49 = AIE.lock(%3, 8) {sym_name = "of_2_lock_8"}
  %50 = AIE.buffer(%6) {sym_name = "of_3_buff_0"} : memref<256xi32>
  %51 = AIE.lock(%6, 0) {sym_name = "of_3_lock_0"}
  %52 = AIE.buffer(%6) {sym_name = "of_3_buff_1"} : memref<256xi32>
  %53 = AIE.lock(%6, 1) {sym_name = "of_3_lock_1"}
  %54 = AIE.buffer(%6) {sym_name = "of_3_buff_2"} : memref<256xi32>
  %55 = AIE.lock(%6, 2) {sym_name = "of_3_lock_2"}
  %56 = AIE.buffer(%6) {sym_name = "of_3_buff_3"} : memref<256xi32>
  %57 = AIE.lock(%6, 3) {sym_name = "of_3_lock_3"}
  %58 = AIE.buffer(%6) {sym_name = "of_3_buff_4"} : memref<256xi32>
  %59 = AIE.lock(%6, 4) {sym_name = "of_3_lock_4"}
  %60 = AIE.buffer(%6) {sym_name = "of_3_buff_5"} : memref<256xi32>
  %61 = AIE.lock(%6, 5) {sym_name = "of_3_lock_5"}
  %62 = AIE.buffer(%6) {sym_name = "of_3_buff_6"} : memref<256xi32>
  %63 = AIE.lock(%6, 6) {sym_name = "of_3_lock_6"}
  %64 = AIE.buffer(%6) {sym_name = "of_3_buff_7"} : memref<256xi32>
  %65 = AIE.lock(%6, 7) {sym_name = "of_3_lock_7"}
  %66 = AIE.buffer(%6) {sym_name = "of_3_buff_8"} : memref<256xi32>
  %67 = AIE.lock(%6, 8) {sym_name = "of_3_lock_8"}
  %68 = AIE.buffer(%2) {sym_name = "of_4_buff_0"} : memref<256xi32>
  %69 = AIE.lock(%2, 0) {sym_name = "of_4_lock_0"}
  %70 = AIE.buffer(%2) {sym_name = "of_4_buff_1"} : memref<256xi32>
  %71 = AIE.lock(%2, 1) {sym_name = "of_4_lock_1"}
  %72 = AIE.buffer(%2) {sym_name = "of_4_buff_2"} : memref<256xi32>
  %73 = AIE.lock(%2, 2) {sym_name = "of_4_lock_2"}
  %74 = AIE.buffer(%2) {sym_name = "of_4_buff_3"} : memref<256xi32>
  %75 = AIE.lock(%2, 3) {sym_name = "of_4_lock_3"}
  %76 = AIE.buffer(%2) {sym_name = "of_4_buff_4"} : memref<256xi32>
  %77 = AIE.lock(%2, 4) {sym_name = "of_4_lock_4"}
  %78 = AIE.buffer(%2) {sym_name = "of_4_buff_5"} : memref<256xi32>
  %79 = AIE.lock(%2, 5) {sym_name = "of_4_lock_5"}
  %80 = AIE.buffer(%2) {sym_name = "of_4_buff_6"} : memref<256xi32>
  %81 = AIE.lock(%2, 6) {sym_name = "of_4_lock_6"}
  %82 = AIE.buffer(%2) {sym_name = "of_4_buff_7"} : memref<256xi32>
  %83 = AIE.lock(%2, 7) {sym_name = "of_4_lock_7"}
  %84 = AIE.buffer(%2) {sym_name = "of_4_buff_8"} : memref<256xi32>
  %85 = AIE.lock(%2, 8) {sym_name = "of_4_lock_8"}
  %86 = AIE.buffer(%5) {sym_name = "of_5_buff_0"} : memref<256xi32>
  %87 = AIE.lock(%5, 0) {sym_name = "of_5_lock_0"}
  %88 = AIE.buffer(%5) {sym_name = "of_5_buff_1"} : memref<256xi32>
  %89 = AIE.lock(%5, 1) {sym_name = "of_5_lock_1"}
  %90 = AIE.buffer(%5) {sym_name = "of_5_buff_2"} : memref<256xi32>
  %91 = AIE.lock(%5, 2) {sym_name = "of_5_lock_2"}
  %92 = AIE.buffer(%5) {sym_name = "of_5_buff_3"} : memref<256xi32>
  %93 = AIE.lock(%5, 3) {sym_name = "of_5_lock_3"}
  %94 = AIE.buffer(%5) {sym_name = "of_5_buff_4"} : memref<256xi32>
  %95 = AIE.lock(%5, 4) {sym_name = "of_5_lock_4"}
  %96 = AIE.buffer(%5) {sym_name = "of_5_buff_5"} : memref<256xi32>
  %97 = AIE.lock(%5, 5) {sym_name = "of_5_lock_5"}
  %98 = AIE.buffer(%5) {sym_name = "of_5_buff_6"} : memref<256xi32>
  %99 = AIE.lock(%5, 6) {sym_name = "of_5_lock_6"}
  %100 = AIE.buffer(%5) {sym_name = "of_5_buff_7"} : memref<256xi32>
  %101 = AIE.lock(%5, 7) {sym_name = "of_5_lock_7"}
  %102 = AIE.buffer(%5) {sym_name = "of_5_buff_8"} : memref<256xi32>
  %103 = AIE.lock(%5, 8) {sym_name = "of_5_lock_8"}
  %104 = AIE.buffer(%1) {sym_name = "of_6_buff_0"} : memref<256xi32>
  %105 = AIE.lock(%1, 0) {sym_name = "of_6_lock_0"}
  %106 = AIE.buffer(%1) {sym_name = "of_6_buff_1"} : memref<256xi32>
  %107 = AIE.lock(%1, 1) {sym_name = "of_6_lock_1"}
  %108 = AIE.buffer(%1) {sym_name = "of_6_buff_2"} : memref<256xi32>
  %109 = AIE.lock(%1, 2) {sym_name = "of_6_lock_2"}
  %110 = AIE.buffer(%1) {sym_name = "of_6_buff_3"} : memref<256xi32>
  %111 = AIE.lock(%1, 3) {sym_name = "of_6_lock_3"}
  %112 = AIE.buffer(%1) {sym_name = "of_6_buff_4"} : memref<256xi32>
  %113 = AIE.lock(%1, 4) {sym_name = "of_6_lock_4"}
  %114 = AIE.buffer(%1) {sym_name = "of_6_buff_5"} : memref<256xi32>
  %115 = AIE.lock(%1, 5) {sym_name = "of_6_lock_5"}
  %116 = AIE.buffer(%1) {sym_name = "of_6_buff_6"} : memref<256xi32>
  %117 = AIE.lock(%1, 6) {sym_name = "of_6_lock_6"}
  %118 = AIE.buffer(%1) {sym_name = "of_6_buff_7"} : memref<256xi32>
  %119 = AIE.lock(%1, 7) {sym_name = "of_6_lock_7"}
  %120 = AIE.buffer(%1) {sym_name = "of_6_buff_8"} : memref<256xi32>
  %121 = AIE.lock(%1, 8) {sym_name = "of_6_lock_8"}
  %122 = AIE.buffer(%4) {sym_name = "of_7_buff_0"} : memref<256xi32>
  %123 = AIE.lock(%4, 0) {sym_name = "of_7_lock_0"}
  %124 = AIE.buffer(%4) {sym_name = "of_7_buff_1"} : memref<256xi32>
  %125 = AIE.lock(%4, 1) {sym_name = "of_7_lock_1"}
  %126 = AIE.buffer(%4) {sym_name = "of_7_buff_2"} : memref<256xi32>
  %127 = AIE.lock(%4, 2) {sym_name = "of_7_lock_2"}
  %128 = AIE.buffer(%4) {sym_name = "of_7_buff_3"} : memref<256xi32>
  %129 = AIE.lock(%4, 3) {sym_name = "of_7_lock_3"}
  %130 = AIE.buffer(%4) {sym_name = "of_7_buff_4"} : memref<256xi32>
  %131 = AIE.lock(%4, 4) {sym_name = "of_7_lock_4"}
  %132 = AIE.buffer(%4) {sym_name = "of_7_buff_5"} : memref<256xi32>
  %133 = AIE.lock(%4, 5) {sym_name = "of_7_lock_5"}
  %134 = AIE.buffer(%4) {sym_name = "of_7_buff_6"} : memref<256xi32>
  %135 = AIE.lock(%4, 6) {sym_name = "of_7_lock_6"}
  %136 = AIE.buffer(%4) {sym_name = "of_7_buff_7"} : memref<256xi32>
  %137 = AIE.lock(%4, 7) {sym_name = "of_7_lock_7"}
  %138 = AIE.buffer(%4) {sym_name = "of_7_buff_8"} : memref<256xi32>
  %139 = AIE.lock(%4, 8) {sym_name = "of_7_lock_8"}
  %140 = AIE.buffer(%0) {sym_name = "of_8_buff_0"} : memref<256xi32>
  %141 = AIE.lock(%0, 0) {sym_name = "of_8_lock_0"}
  %142 = AIE.buffer(%0) {sym_name = "of_8_buff_1"} : memref<256xi32>
  %143 = AIE.lock(%0, 1) {sym_name = "of_8_lock_1"}
  %144 = AIE.buffer(%0) {sym_name = "of_8_buff_2"} : memref<256xi32>
  %145 = AIE.lock(%0, 2) {sym_name = "of_8_lock_2"}
  %146 = AIE.buffer(%0) {sym_name = "of_8_buff_3"} : memref<256xi32>
  %147 = AIE.lock(%0, 3) {sym_name = "of_8_lock_3"}
  %148 = AIE.buffer(%0) {sym_name = "of_8_buff_4"} : memref<256xi32>
  %149 = AIE.lock(%0, 4) {sym_name = "of_8_lock_4"}
  %150 = AIE.buffer(%0) {sym_name = "of_8_buff_5"} : memref<256xi32>
  %151 = AIE.lock(%0, 5) {sym_name = "of_8_lock_5"}
  %152 = AIE.buffer(%0) {sym_name = "of_8_buff_6"} : memref<256xi32>
  %153 = AIE.lock(%0, 6) {sym_name = "of_8_lock_6"}
  %154 = AIE.buffer(%0) {sym_name = "of_8_buff_7"} : memref<256xi32>
  %155 = AIE.lock(%0, 7) {sym_name = "of_8_lock_7"}
  %156 = AIE.buffer(%0) {sym_name = "of_8_buff_8"} : memref<256xi32>
  %157 = AIE.lock(%0, 8) {sym_name = "of_8_lock_8"}
  %158 = AIE.buffer(%4) {sym_name = "of_9_buff_0"} : memref<256xi32>
  %159 = AIE.lock(%4, 9) {sym_name = "of_9_lock_0"}
  %160 = AIE.buffer(%4) {sym_name = "of_9_buff_1"} : memref<256xi32>
  %161 = AIE.lock(%4, 10) {sym_name = "of_9_lock_1"}
  %162 = AIE.buffer(%4) {sym_name = "of_9_buff_2"} : memref<256xi32>
  %163 = AIE.lock(%4, 11) {sym_name = "of_9_lock_2"}
  %164 = AIE.buffer(%4) {sym_name = "of_9_buff_3"} : memref<256xi32>
  %165 = AIE.lock(%4, 12) {sym_name = "of_9_lock_3"}
  %166 = AIE.buffer(%4) {sym_name = "of_9_buff_4"} : memref<256xi32>
  %167 = AIE.lock(%4, 13) {sym_name = "of_9_lock_4"}
  %168 = AIE.buffer(%8) {sym_name = "of_10_buff_0"} : memref<512xi32>
  %169 = AIE.lock(%8, 0) {sym_name = "of_10_lock_0"}
  %170 = AIE.buffer(%8) {sym_name = "of_10_buff_1"} : memref<512xi32>
  %171 = AIE.lock(%8, 1) {sym_name = "of_10_lock_1"}
  %172 = AIE.buffer(%8) {sym_name = "of_10_buff_2"} : memref<512xi32>
  %173 = AIE.lock(%8, 2) {sym_name = "of_10_lock_2"}
  %174 = AIE.buffer(%8) {sym_name = "of_10_buff_3"} : memref<512xi32>
  %175 = AIE.lock(%8, 3) {sym_name = "of_10_lock_3"}
  %176 = AIE.buffer(%8) {sym_name = "of_10_buff_4"} : memref<512xi32>
  %177 = AIE.lock(%8, 4) {sym_name = "of_10_lock_4"}
  %178 = AIE.buffer(%8) {sym_name = "of_10_buff_5"} : memref<512xi32>
  %179 = AIE.lock(%8, 5) {sym_name = "of_10_lock_5"}
  %180 = AIE.buffer(%8) {sym_name = "of_11_buff_0"} : memref<256xi32>
  %181 = AIE.lock(%8, 6) {sym_name = "of_11_lock_0"}
  %182 = AIE.buffer(%8) {sym_name = "of_11_buff_1"} : memref<256xi32>
  %183 = AIE.lock(%8, 7) {sym_name = "of_11_lock_1"}
  %184 = AIE.buffer(%1) {sym_name = "of_12_buff_0"} : memref<256xi32>
  %185 = AIE.lock(%1, 9) {sym_name = "of_12_lock_0"}
  %186 = AIE.buffer(%1) {sym_name = "of_12_buff_1"} : memref<256xi32>
  %187 = AIE.lock(%1, 10) {sym_name = "of_12_lock_1"}
  %188 = AIE.buffer(%1) {sym_name = "of_12_buff_2"} : memref<256xi32>
  %189 = AIE.lock(%1, 11) {sym_name = "of_12_lock_2"}
  %190 = AIE.buffer(%1) {sym_name = "of_12_buff_3"} : memref<256xi32>
  %191 = AIE.lock(%1, 12) {sym_name = "of_12_lock_3"}
  %192 = AIE.buffer(%1) {sym_name = "of_12_buff_4"} : memref<256xi32>
  %193 = AIE.lock(%1, 13) {sym_name = "of_12_lock_4"}
  %194 = AIE.buffer(%5) {sym_name = "of_13_buff_0"} : memref<512xi32>
  %195 = AIE.lock(%5, 9) {sym_name = "of_13_lock_0"}
  %196 = AIE.buffer(%5) {sym_name = "of_13_buff_1"} : memref<512xi32>
  %197 = AIE.lock(%5, 10) {sym_name = "of_13_lock_1"}
  %198 = AIE.buffer(%5) {sym_name = "of_13_buff_2"} : memref<512xi32>
  %199 = AIE.lock(%5, 11) {sym_name = "of_13_lock_2"}
  %200 = AIE.buffer(%5) {sym_name = "of_13_buff_3"} : memref<512xi32>
  %201 = AIE.lock(%5, 12) {sym_name = "of_13_lock_3"}
  %202 = AIE.buffer(%5) {sym_name = "of_13_buff_4"} : memref<512xi32>
  %203 = AIE.lock(%5, 13) {sym_name = "of_13_lock_4"}
  %204 = AIE.buffer(%5) {sym_name = "of_13_buff_5"} : memref<512xi32>
  %205 = AIE.lock(%5, 14) {sym_name = "of_13_lock_5"}
  AIE.multicast(%9, DMA : 0) {
    AIE.multi_dest<%12, DMA : 0>
  }
  %206 = AIE.buffer(%9) {sym_name = "of_14_buff_0"} : memref<256xi32>
  %207 = AIE.lock(%9, 0) {sym_name = "of_14_lock_0"}
  %208 = AIE.buffer(%9) {sym_name = "of_14_buff_1"} : memref<256xi32>
  %209 = AIE.lock(%9, 1) {sym_name = "of_14_lock_1"}
  %210 = AIE.buffer(%9) {sym_name = "of_14_buff_2"} : memref<256xi32>
  %211 = AIE.lock(%9, 2) {sym_name = "of_14_lock_2"}
  %212 = AIE.buffer(%9) {sym_name = "of_14_buff_3"} : memref<256xi32>
  %213 = AIE.lock(%9, 3) {sym_name = "of_14_lock_3"}
  %214 = AIE.buffer(%9) {sym_name = "of_14_buff_4"} : memref<256xi32>
  %215 = AIE.lock(%9, 4) {sym_name = "of_14_lock_4"}
  %216 = AIE.buffer(%9) {sym_name = "of_14_buff_5"} : memref<256xi32>
  %217 = AIE.lock(%9, 5) {sym_name = "of_14_lock_5"}
  %218 = AIE.lock(%12, 1) {sym_name = "of_15_lock_0"}
  %219 = AIE.buffer(%6) {sym_name = "of_16_buff_0"} : memref<256xi32>
  %220 = AIE.lock(%6, 9) {sym_name = "of_16_lock_0"}
  %221 = AIE.buffer(%6) {sym_name = "of_16_buff_1"} : memref<256xi32>
  %222 = AIE.lock(%6, 10) {sym_name = "of_16_lock_1"}
  %223 = AIE.buffer(%6) {sym_name = "of_16_buff_2"} : memref<256xi32>
  %224 = AIE.lock(%6, 11) {sym_name = "of_16_lock_2"}
  %225 = AIE.buffer(%6) {sym_name = "of_16_buff_3"} : memref<256xi32>
  %226 = AIE.lock(%6, 12) {sym_name = "of_16_lock_3"}
  %227 = AIE.buffer(%6) {sym_name = "of_16_buff_4"} : memref<256xi32>
  %228 = AIE.lock(%6, 13) {sym_name = "of_16_lock_4"}
  %229 = AIE.buffer(%10) {sym_name = "of_17_buff_0"} : memref<512xi32>
  %230 = AIE.lock(%10, 0) {sym_name = "of_17_lock_0"}
  %231 = AIE.buffer(%10) {sym_name = "of_17_buff_1"} : memref<512xi32>
  %232 = AIE.lock(%10, 1) {sym_name = "of_17_lock_1"}
  %233 = AIE.buffer(%10) {sym_name = "of_17_buff_2"} : memref<512xi32>
  %234 = AIE.lock(%10, 2) {sym_name = "of_17_lock_2"}
  %235 = AIE.buffer(%10) {sym_name = "of_17_buff_3"} : memref<512xi32>
  %236 = AIE.lock(%10, 3) {sym_name = "of_17_lock_3"}
  %237 = AIE.buffer(%10) {sym_name = "of_17_buff_4"} : memref<512xi32>
  %238 = AIE.lock(%10, 4) {sym_name = "of_17_lock_4"}
  %239 = AIE.buffer(%10) {sym_name = "of_17_buff_5"} : memref<512xi32>
  %240 = AIE.lock(%10, 5) {sym_name = "of_17_lock_5"}
  %241 = AIE.buffer(%10) {sym_name = "of_18_buff_0"} : memref<256xi32>
  %242 = AIE.lock(%10, 6) {sym_name = "of_18_lock_0"}
  %243 = AIE.buffer(%10) {sym_name = "of_18_buff_1"} : memref<256xi32>
  %244 = AIE.lock(%10, 7) {sym_name = "of_18_lock_1"}
  %245 = AIE.buffer(%3) {sym_name = "of_19_buff_0"} : memref<256xi32>
  %246 = AIE.lock(%3, 9) {sym_name = "of_19_lock_0"}
  %247 = AIE.buffer(%3) {sym_name = "of_19_buff_1"} : memref<256xi32>
  %248 = AIE.lock(%3, 10) {sym_name = "of_19_lock_1"}
  %249 = AIE.buffer(%3) {sym_name = "of_19_buff_2"} : memref<256xi32>
  %250 = AIE.lock(%3, 11) {sym_name = "of_19_lock_2"}
  %251 = AIE.buffer(%3) {sym_name = "of_19_buff_3"} : memref<256xi32>
  %252 = AIE.lock(%3, 12) {sym_name = "of_19_lock_3"}
  %253 = AIE.buffer(%3) {sym_name = "of_19_buff_4"} : memref<256xi32>
  %254 = AIE.lock(%3, 13) {sym_name = "of_19_lock_4"}
  %255 = AIE.buffer(%7) {sym_name = "of_20_buff_0"} : memref<512xi32>
  %256 = AIE.lock(%7, 9) {sym_name = "of_20_lock_0"}
  %257 = AIE.buffer(%7) {sym_name = "of_20_buff_1"} : memref<512xi32>
  %258 = AIE.lock(%7, 10) {sym_name = "of_20_lock_1"}
  %259 = AIE.buffer(%7) {sym_name = "of_20_buff_2"} : memref<512xi32>
  %260 = AIE.lock(%7, 11) {sym_name = "of_20_lock_2"}
  %261 = AIE.buffer(%7) {sym_name = "of_20_buff_3"} : memref<512xi32>
  %262 = AIE.lock(%7, 12) {sym_name = "of_20_lock_3"}
  %263 = AIE.buffer(%7) {sym_name = "of_20_buff_4"} : memref<512xi32>
  %264 = AIE.lock(%7, 13) {sym_name = "of_20_lock_4"}
  %265 = AIE.buffer(%7) {sym_name = "of_20_buff_5"} : memref<512xi32>
  %266 = AIE.lock(%7, 14) {sym_name = "of_20_lock_5"}
  AIE.multicast(%11, DMA : 0) {
    AIE.multi_dest<%9, DMA : 0>
  }
  %267 = AIE.buffer(%11) {sym_name = "of_21_buff_0"} : memref<256xi32>
  %268 = AIE.lock(%11, 0) {sym_name = "of_21_lock_0"}
  %269 = AIE.buffer(%11) {sym_name = "of_21_buff_1"} : memref<256xi32>
  %270 = AIE.lock(%11, 1) {sym_name = "of_21_lock_1"}
  %271 = AIE.buffer(%9) {sym_name = "of_22_buff_0"} : memref<256xi32>
  %272 = AIE.lock(%9, 6) {sym_name = "of_22_lock_0"}
  %273 = AIE.buffer(%9) {sym_name = "of_22_buff_1"} : memref<256xi32>
  %274 = AIE.lock(%9, 7) {sym_name = "of_22_lock_1"}
  %275 = AIE.external_buffer {sym_name = "ddr_buffer_in_0"} : memref<2048xi32>
  %276 = AIE.external_buffer {sym_name = "ddr_buffer_out_0"} : memref<2048xi32>
  func.func private @hdiff_lap(memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>)
  func.func private @hdiff_flux1(memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>)
  func.func private @hdiff_flux2(memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>)
  %277 = AIE.core(%0) {
    %c0 = arith.constant 0 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    AIE.useLock(%141, Acquire, 1)
    AIE.useLock(%143, Acquire, 1)
    AIE.useLock(%145, Acquire, 1)
    AIE.useLock(%147, Acquire, 1)
    AIE.useLock(%149, Acquire, 1)
    AIE.useLock(%151, Acquire, 1)
    AIE.useLock(%153, Acquire, 1)
    AIE.useLock(%155, Acquire, 1)
    AIE.useLock(%159, Acquire, 0)
    AIE.useLock(%161, Acquire, 0)
    AIE.useLock(%163, Acquire, 0)
    AIE.useLock(%165, Acquire, 0)
    func.call @hdiff_lap(%140, %142, %144, %146, %148, %158, %160, %162, %164) : (memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>) -> ()
    AIE.useLock(%141, Release, 0)
    AIE.useLock(%159, Release, 1)
    AIE.useLock(%161, Release, 1)
    AIE.useLock(%163, Release, 1)
    AIE.useLock(%165, Release, 1)
    AIE.useLock(%157, Acquire, 1)
    AIE.useLock(%167, Acquire, 0)
    AIE.useLock(%159, Acquire, 0)
    func.call @hdiff_lap(%142, %144, %146, %148, %150, %162, %164, %166, %158) : (memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>) -> ()
    AIE.useLock(%143, Release, 0)
    AIE.useLock(%167, Release, 1)
    AIE.useLock(%159, Release, 1)
    AIE.useLock(%161, Release, 1)
    AIE.useLock(%163, Release, 1)
    AIE.useLock(%145, Release, 0)
    AIE.useLock(%147, Release, 0)
    AIE.useLock(%149, Release, 0)
    AIE.useLock(%151, Release, 0)
    AIE.end
  } {link_with = "hdiff_lap.o"}
  %278 = AIE.core(%4) {
    %c0 = arith.constant 0 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    AIE.useLock(%123, Acquire, 1)
    AIE.useLock(%125, Acquire, 1)
    AIE.useLock(%127, Acquire, 1)
    AIE.useLock(%129, Acquire, 1)
    AIE.useLock(%131, Acquire, 1)
    AIE.useLock(%133, Acquire, 1)
    AIE.useLock(%135, Acquire, 1)
    AIE.useLock(%137, Acquire, 1)
    AIE.useLock(%159, Acquire, 1)
    AIE.useLock(%161, Acquire, 1)
    AIE.useLock(%163, Acquire, 1)
    AIE.useLock(%165, Acquire, 1)
    AIE.useLock(%169, Acquire, 0)
    AIE.useLock(%171, Acquire, 0)
    AIE.useLock(%173, Acquire, 0)
    AIE.useLock(%175, Acquire, 0)
    AIE.useLock(%177, Acquire, 0)
    func.call @hdiff_flux1(%124, %126, %128, %158, %160, %162, %164, %168, %170, %172, %174, %176) : (memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>) -> ()
    AIE.useLock(%159, Release, 0)
    AIE.useLock(%161, Release, 0)
    AIE.useLock(%163, Release, 0)
    AIE.useLock(%165, Release, 0)
    AIE.useLock(%169, Release, 1)
    AIE.useLock(%171, Release, 1)
    AIE.useLock(%173, Release, 1)
    AIE.useLock(%175, Release, 1)
    AIE.useLock(%177, Release, 1)
    AIE.useLock(%167, Acquire, 1)
    AIE.useLock(%159, Acquire, 1)
    AIE.useLock(%161, Acquire, 1)
    AIE.useLock(%163, Acquire, 1)
    AIE.useLock(%179, Acquire, 0)
    AIE.useLock(%169, Acquire, 0)
    AIE.useLock(%171, Acquire, 0)
    func.call @hdiff_flux1(%124, %126, %128, %166, %158, %160, %162, %174, %176, %178, %168, %170) : (memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>) -> ()
    AIE.useLock(%167, Release, 0)
    AIE.useLock(%159, Release, 0)
    AIE.useLock(%161, Release, 0)
    AIE.useLock(%163, Release, 0)
    AIE.useLock(%179, Release, 1)
    AIE.useLock(%169, Release, 1)
    AIE.useLock(%171, Release, 1)
    AIE.useLock(%173, Release, 1)
    AIE.useLock(%175, Release, 1)
    AIE.useLock(%123, Release, 0)
    AIE.useLock(%125, Release, 0)
    AIE.useLock(%127, Release, 0)
    AIE.useLock(%129, Release, 0)
    AIE.end
  } {link_with = "hdiff_flux1.o"}
  %279 = AIE.core(%8) {
    %c0 = arith.constant 0 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    AIE.useLock(%169, Acquire, 1)
    AIE.useLock(%171, Acquire, 1)
    AIE.useLock(%173, Acquire, 1)
    AIE.useLock(%175, Acquire, 1)
    AIE.useLock(%177, Acquire, 1)
    AIE.useLock(%181, Acquire, 0)
    func.call @hdiff_flux2(%168, %170, %172, %174, %176, %180) : (memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()
    AIE.useLock(%169, Release, 0)
    AIE.useLock(%171, Release, 0)
    AIE.useLock(%173, Release, 0)
    AIE.useLock(%175, Release, 0)
    AIE.useLock(%181, Release, 1)
    AIE.useLock(%179, Acquire, 1)
    AIE.useLock(%169, Acquire, 1)
    AIE.useLock(%171, Acquire, 1)
    AIE.useLock(%173, Acquire, 1)
    AIE.useLock(%183, Acquire, 0)
    func.call @hdiff_flux2(%176, %178, %168, %170, %172, %182) : (memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()
    AIE.useLock(%177, Release, 0)
    AIE.useLock(%179, Release, 0)
    AIE.useLock(%169, Release, 0)
    AIE.useLock(%171, Release, 0)
    AIE.useLock(%183, Release, 1)
    AIE.end
  } {link_with = "hdiff_flux2.o"}
  %280 = AIE.core(%1) {
    %c0 = arith.constant 0 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    AIE.useLock(%105, Acquire, 1)
    AIE.useLock(%107, Acquire, 1)
    AIE.useLock(%109, Acquire, 1)
    AIE.useLock(%111, Acquire, 1)
    AIE.useLock(%113, Acquire, 1)
    AIE.useLock(%115, Acquire, 1)
    AIE.useLock(%117, Acquire, 1)
    AIE.useLock(%119, Acquire, 1)
    AIE.useLock(%185, Acquire, 0)
    AIE.useLock(%187, Acquire, 0)
    AIE.useLock(%189, Acquire, 0)
    AIE.useLock(%191, Acquire, 0)
    func.call @hdiff_lap(%106, %108, %110, %112, %114, %184, %186, %188, %190) : (memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>) -> ()
    AIE.useLock(%105, Release, 0)
    AIE.useLock(%185, Release, 1)
    AIE.useLock(%187, Release, 1)
    AIE.useLock(%189, Release, 1)
    AIE.useLock(%191, Release, 1)
    AIE.useLock(%121, Acquire, 1)
    AIE.useLock(%193, Acquire, 0)
    AIE.useLock(%185, Acquire, 0)
    func.call @hdiff_lap(%108, %110, %112, %114, %116, %188, %190, %192, %184) : (memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>) -> ()
    AIE.useLock(%107, Release, 0)
    AIE.useLock(%193, Release, 1)
    AIE.useLock(%185, Release, 1)
    AIE.useLock(%187, Release, 1)
    AIE.useLock(%189, Release, 1)
    AIE.useLock(%109, Release, 0)
    AIE.useLock(%111, Release, 0)
    AIE.useLock(%113, Release, 0)
    AIE.useLock(%115, Release, 0)
    AIE.end
  } {link_with = "hdiff_lap.o"}
  %281 = AIE.core(%5) {
    %c0 = arith.constant 0 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    AIE.useLock(%87, Acquire, 1)
    AIE.useLock(%89, Acquire, 1)
    AIE.useLock(%91, Acquire, 1)
    AIE.useLock(%93, Acquire, 1)
    AIE.useLock(%95, Acquire, 1)
    AIE.useLock(%97, Acquire, 1)
    AIE.useLock(%99, Acquire, 1)
    AIE.useLock(%101, Acquire, 1)
    AIE.useLock(%185, Acquire, 1)
    AIE.useLock(%187, Acquire, 1)
    AIE.useLock(%189, Acquire, 1)
    AIE.useLock(%191, Acquire, 1)
    AIE.useLock(%195, Acquire, 0)
    AIE.useLock(%197, Acquire, 0)
    AIE.useLock(%199, Acquire, 0)
    AIE.useLock(%201, Acquire, 0)
    AIE.useLock(%203, Acquire, 0)
    func.call @hdiff_flux1(%90, %92, %94, %184, %186, %188, %190, %194, %196, %198, %200, %202) : (memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>) -> ()
    AIE.useLock(%185, Release, 0)
    AIE.useLock(%187, Release, 0)
    AIE.useLock(%189, Release, 0)
    AIE.useLock(%191, Release, 0)
    AIE.useLock(%195, Release, 1)
    AIE.useLock(%197, Release, 1)
    AIE.useLock(%199, Release, 1)
    AIE.useLock(%201, Release, 1)
    AIE.useLock(%203, Release, 1)
    AIE.useLock(%193, Acquire, 1)
    AIE.useLock(%185, Acquire, 1)
    AIE.useLock(%187, Acquire, 1)
    AIE.useLock(%189, Acquire, 1)
    AIE.useLock(%205, Acquire, 0)
    AIE.useLock(%195, Acquire, 0)
    AIE.useLock(%197, Acquire, 0)
    func.call @hdiff_flux1(%90, %92, %94, %192, %184, %186, %188, %200, %202, %204, %194, %196) : (memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>) -> ()
    AIE.useLock(%193, Release, 0)
    AIE.useLock(%185, Release, 0)
    AIE.useLock(%187, Release, 0)
    AIE.useLock(%189, Release, 0)
    AIE.useLock(%205, Release, 1)
    AIE.useLock(%195, Release, 1)
    AIE.useLock(%197, Release, 1)
    AIE.useLock(%199, Release, 1)
    AIE.useLock(%201, Release, 1)
    AIE.useLock(%87, Release, 0)
    AIE.useLock(%89, Release, 0)
    AIE.useLock(%91, Release, 0)
    AIE.useLock(%93, Release, 0)
    AIE.end
  } {link_with = "hdiff_flux1.o"}
  %282 = AIE.core(%9) {
    %c0 = arith.constant 0 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    AIE.useLock(%195, Acquire, 1)
    AIE.useLock(%197, Acquire, 1)
    AIE.useLock(%199, Acquire, 1)
    AIE.useLock(%201, Acquire, 1)
    AIE.useLock(%203, Acquire, 1)
    AIE.useLock(%207, Acquire, 0)
    AIE.useLock(%209, Acquire, 0)
    AIE.useLock(%211, Acquire, 0)
    AIE.useLock(%213, Acquire, 0)
    AIE.useLock(%215, Acquire, 0)
    AIE.useLock(%181, Acquire, 1)
    AIE.useLock(%242, Acquire, 1)
    AIE.useLock(%272, Acquire, 1)
    memref.copy %180, %206 : memref<256xi32> to memref<256xi32>
    memref.copy %241, %210 : memref<256xi32> to memref<256xi32>
    memref.copy %271, %212 : memref<256xi32> to memref<256xi32>
    func.call @hdiff_flux2(%194, %196, %198, %200, %202, %208) : (memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()
    AIE.useLock(%195, Release, 0)
    AIE.useLock(%197, Release, 0)
    AIE.useLock(%199, Release, 0)
    AIE.useLock(%201, Release, 0)
    AIE.useLock(%207, Release, 1)
    AIE.useLock(%209, Release, 1)
    AIE.useLock(%211, Release, 1)
    AIE.useLock(%213, Release, 1)
    AIE.useLock(%205, Acquire, 1)
    AIE.useLock(%195, Acquire, 1)
    AIE.useLock(%197, Acquire, 1)
    AIE.useLock(%199, Acquire, 1)
    AIE.useLock(%217, Acquire, 0)
    AIE.useLock(%207, Acquire, 0)
    AIE.useLock(%209, Acquire, 0)
    AIE.useLock(%211, Acquire, 0)
    memref.copy %180, %214 : memref<256xi32> to memref<256xi32>
    memref.copy %241, %206 : memref<256xi32> to memref<256xi32>
    memref.copy %271, %208 : memref<256xi32> to memref<256xi32>
    func.call @hdiff_flux2(%202, %204, %194, %196, %198, %216) : (memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()
    AIE.useLock(%203, Release, 0)
    AIE.useLock(%205, Release, 0)
    AIE.useLock(%195, Release, 0)
    AIE.useLock(%197, Release, 0)
    AIE.useLock(%215, Release, 1)
    AIE.useLock(%217, Release, 1)
    AIE.useLock(%207, Release, 1)
    AIE.useLock(%209, Release, 1)
    AIE.end
  } {link_with = "hdiff_flux2.o"}
  %283 = AIE.core(%2) {
    %c0 = arith.constant 0 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    AIE.useLock(%69, Acquire, 1)
    AIE.useLock(%71, Acquire, 1)
    AIE.useLock(%73, Acquire, 1)
    AIE.useLock(%75, Acquire, 1)
    AIE.useLock(%77, Acquire, 1)
    AIE.useLock(%79, Acquire, 1)
    AIE.useLock(%81, Acquire, 1)
    AIE.useLock(%83, Acquire, 1)
    AIE.useLock(%220, Acquire, 0)
    AIE.useLock(%222, Acquire, 0)
    AIE.useLock(%224, Acquire, 0)
    AIE.useLock(%226, Acquire, 0)
    func.call @hdiff_lap(%72, %74, %76, %78, %80, %219, %221, %223, %225) : (memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>) -> ()
    AIE.useLock(%69, Release, 0)
    AIE.useLock(%220, Release, 1)
    AIE.useLock(%222, Release, 1)
    AIE.useLock(%224, Release, 1)
    AIE.useLock(%226, Release, 1)
    AIE.useLock(%85, Acquire, 1)
    AIE.useLock(%228, Acquire, 0)
    AIE.useLock(%220, Acquire, 0)
    func.call @hdiff_lap(%74, %76, %78, %80, %82, %223, %225, %227, %219) : (memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>) -> ()
    AIE.useLock(%71, Release, 0)
    AIE.useLock(%228, Release, 1)
    AIE.useLock(%220, Release, 1)
    AIE.useLock(%222, Release, 1)
    AIE.useLock(%224, Release, 1)
    AIE.useLock(%73, Release, 0)
    AIE.useLock(%75, Release, 0)
    AIE.useLock(%77, Release, 0)
    AIE.useLock(%79, Release, 0)
    AIE.end
  } {link_with = "hdiff_lap.o"}
  %284 = AIE.core(%6) {
    %c0 = arith.constant 0 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    AIE.useLock(%51, Acquire, 1)
    AIE.useLock(%53, Acquire, 1)
    AIE.useLock(%55, Acquire, 1)
    AIE.useLock(%57, Acquire, 1)
    AIE.useLock(%59, Acquire, 1)
    AIE.useLock(%61, Acquire, 1)
    AIE.useLock(%63, Acquire, 1)
    AIE.useLock(%65, Acquire, 1)
    AIE.useLock(%220, Acquire, 1)
    AIE.useLock(%222, Acquire, 1)
    AIE.useLock(%224, Acquire, 1)
    AIE.useLock(%226, Acquire, 1)
    AIE.useLock(%230, Acquire, 0)
    AIE.useLock(%232, Acquire, 0)
    AIE.useLock(%234, Acquire, 0)
    AIE.useLock(%236, Acquire, 0)
    AIE.useLock(%238, Acquire, 0)
    func.call @hdiff_flux1(%56, %58, %60, %219, %221, %223, %225, %229, %231, %233, %235, %237) : (memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>) -> ()
    AIE.useLock(%220, Release, 0)
    AIE.useLock(%222, Release, 0)
    AIE.useLock(%224, Release, 0)
    AIE.useLock(%226, Release, 0)
    AIE.useLock(%230, Release, 1)
    AIE.useLock(%232, Release, 1)
    AIE.useLock(%234, Release, 1)
    AIE.useLock(%236, Release, 1)
    AIE.useLock(%238, Release, 1)
    AIE.useLock(%228, Acquire, 1)
    AIE.useLock(%220, Acquire, 1)
    AIE.useLock(%222, Acquire, 1)
    AIE.useLock(%224, Acquire, 1)
    AIE.useLock(%240, Acquire, 0)
    AIE.useLock(%230, Acquire, 0)
    AIE.useLock(%232, Acquire, 0)
    func.call @hdiff_flux1(%56, %58, %60, %227, %219, %221, %223, %235, %237, %239, %229, %231) : (memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>) -> ()
    AIE.useLock(%228, Release, 0)
    AIE.useLock(%220, Release, 0)
    AIE.useLock(%222, Release, 0)
    AIE.useLock(%224, Release, 0)
    AIE.useLock(%240, Release, 1)
    AIE.useLock(%230, Release, 1)
    AIE.useLock(%232, Release, 1)
    AIE.useLock(%234, Release, 1)
    AIE.useLock(%236, Release, 1)
    AIE.useLock(%51, Release, 0)
    AIE.useLock(%53, Release, 0)
    AIE.useLock(%55, Release, 0)
    AIE.useLock(%57, Release, 0)
    AIE.end
  } {link_with = "hdiff_flux1.o"}
  %285 = AIE.core(%10) {
    %c0 = arith.constant 0 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    AIE.useLock(%230, Acquire, 1)
    AIE.useLock(%232, Acquire, 1)
    AIE.useLock(%234, Acquire, 1)
    AIE.useLock(%236, Acquire, 1)
    AIE.useLock(%238, Acquire, 1)
    AIE.useLock(%242, Acquire, 0)
    func.call @hdiff_flux2(%229, %231, %233, %235, %237, %241) : (memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()
    AIE.useLock(%230, Release, 0)
    AIE.useLock(%232, Release, 0)
    AIE.useLock(%234, Release, 0)
    AIE.useLock(%236, Release, 0)
    AIE.useLock(%242, Release, 1)
    AIE.useLock(%240, Acquire, 1)
    AIE.useLock(%230, Acquire, 1)
    AIE.useLock(%232, Acquire, 1)
    AIE.useLock(%234, Acquire, 1)
    AIE.useLock(%244, Acquire, 0)
    func.call @hdiff_flux2(%237, %239, %229, %231, %233, %243) : (memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()
    AIE.useLock(%238, Release, 0)
    AIE.useLock(%240, Release, 0)
    AIE.useLock(%230, Release, 0)
    AIE.useLock(%232, Release, 0)
    AIE.useLock(%244, Release, 1)
    AIE.end
  } {link_with = "hdiff_flux2.o"}
  %286 = AIE.core(%3) {
    %c0 = arith.constant 0 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    AIE.useLock(%33, Acquire, 1)
    AIE.useLock(%35, Acquire, 1)
    AIE.useLock(%37, Acquire, 1)
    AIE.useLock(%39, Acquire, 1)
    AIE.useLock(%41, Acquire, 1)
    AIE.useLock(%43, Acquire, 1)
    AIE.useLock(%45, Acquire, 1)
    AIE.useLock(%47, Acquire, 1)
    AIE.useLock(%246, Acquire, 0)
    AIE.useLock(%248, Acquire, 0)
    AIE.useLock(%250, Acquire, 0)
    AIE.useLock(%252, Acquire, 0)
    func.call @hdiff_lap(%38, %40, %42, %44, %46, %245, %247, %249, %251) : (memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>) -> ()
    AIE.useLock(%33, Release, 0)
    AIE.useLock(%246, Release, 1)
    AIE.useLock(%248, Release, 1)
    AIE.useLock(%250, Release, 1)
    AIE.useLock(%252, Release, 1)
    AIE.useLock(%49, Acquire, 1)
    AIE.useLock(%254, Acquire, 0)
    AIE.useLock(%246, Acquire, 0)
    func.call @hdiff_lap(%40, %42, %44, %46, %48, %249, %251, %253, %245) : (memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>) -> ()
    AIE.useLock(%35, Release, 0)
    AIE.useLock(%254, Release, 1)
    AIE.useLock(%246, Release, 1)
    AIE.useLock(%248, Release, 1)
    AIE.useLock(%250, Release, 1)
    AIE.useLock(%37, Release, 0)
    AIE.useLock(%39, Release, 0)
    AIE.useLock(%41, Release, 0)
    AIE.useLock(%43, Release, 0)
    AIE.end
  } {link_with = "hdiff_lap.o"}
  %287 = AIE.core(%7) {
    %c0 = arith.constant 0 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    AIE.useLock(%15, Acquire, 1)
    AIE.useLock(%17, Acquire, 1)
    AIE.useLock(%19, Acquire, 1)
    AIE.useLock(%21, Acquire, 1)
    AIE.useLock(%23, Acquire, 1)
    AIE.useLock(%25, Acquire, 1)
    AIE.useLock(%27, Acquire, 1)
    AIE.useLock(%29, Acquire, 1)
    AIE.useLock(%246, Acquire, 1)
    AIE.useLock(%248, Acquire, 1)
    AIE.useLock(%250, Acquire, 1)
    AIE.useLock(%252, Acquire, 1)
    AIE.useLock(%256, Acquire, 0)
    AIE.useLock(%258, Acquire, 0)
    AIE.useLock(%260, Acquire, 0)
    AIE.useLock(%262, Acquire, 0)
    AIE.useLock(%264, Acquire, 0)
    func.call @hdiff_flux1(%22, %24, %26, %245, %247, %249, %251, %255, %257, %259, %261, %263) : (memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>) -> ()
    AIE.useLock(%246, Release, 0)
    AIE.useLock(%248, Release, 0)
    AIE.useLock(%250, Release, 0)
    AIE.useLock(%252, Release, 0)
    AIE.useLock(%256, Release, 1)
    AIE.useLock(%258, Release, 1)
    AIE.useLock(%260, Release, 1)
    AIE.useLock(%262, Release, 1)
    AIE.useLock(%264, Release, 1)
    AIE.useLock(%254, Acquire, 1)
    AIE.useLock(%246, Acquire, 1)
    AIE.useLock(%248, Acquire, 1)
    AIE.useLock(%250, Acquire, 1)
    AIE.useLock(%266, Acquire, 0)
    AIE.useLock(%256, Acquire, 0)
    AIE.useLock(%258, Acquire, 0)
    func.call @hdiff_flux1(%22, %24, %26, %253, %245, %247, %249, %261, %263, %265, %255, %257) : (memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>) -> ()
    AIE.useLock(%254, Release, 0)
    AIE.useLock(%246, Release, 0)
    AIE.useLock(%248, Release, 0)
    AIE.useLock(%250, Release, 0)
    AIE.useLock(%266, Release, 1)
    AIE.useLock(%256, Release, 1)
    AIE.useLock(%258, Release, 1)
    AIE.useLock(%260, Release, 1)
    AIE.useLock(%262, Release, 1)
    AIE.useLock(%15, Release, 0)
    AIE.useLock(%17, Release, 0)
    AIE.useLock(%19, Release, 0)
    AIE.useLock(%21, Release, 0)
    AIE.end
  } {link_with = "hdiff_flux1.o"}
  %288 = AIE.core(%11) {
    %c0 = arith.constant 0 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    AIE.useLock(%256, Acquire, 1)
    AIE.useLock(%258, Acquire, 1)
    AIE.useLock(%260, Acquire, 1)
    AIE.useLock(%262, Acquire, 1)
    AIE.useLock(%264, Acquire, 1)
    AIE.useLock(%268, Acquire, 0)
    func.call @hdiff_flux2(%255, %257, %259, %261, %263, %267) : (memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()
    AIE.useLock(%256, Release, 0)
    AIE.useLock(%258, Release, 0)
    AIE.useLock(%260, Release, 0)
    AIE.useLock(%262, Release, 0)
    AIE.useLock(%268, Release, 1)
    AIE.useLock(%266, Acquire, 1)
    AIE.useLock(%256, Acquire, 1)
    AIE.useLock(%258, Acquire, 1)
    AIE.useLock(%260, Acquire, 1)
    AIE.useLock(%270, Acquire, 0)
    func.call @hdiff_flux2(%263, %265, %255, %257, %259, %269) : (memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()
    AIE.useLock(%264, Release, 0)
    AIE.useLock(%266, Release, 0)
    AIE.useLock(%256, Release, 0)
    AIE.useLock(%258, Release, 0)
    AIE.useLock(%270, Release, 1)
    AIE.end
  } {link_with = "hdiff_flux2.o"}
  %289 = AIE.mem(%9) {
    %300 = AIE.dmaStart(MM2S, 0, ^bb1, ^bb7)
  ^bb1:  // 2 preds: ^bb0, ^bb6
    AIE.useLock(%207, Acquire, 1)
    AIE.dmaBd(<%206 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%207, Release, 0)
    AIE.nextBd ^bb2
  ^bb2:  // pred: ^bb1
    AIE.useLock(%209, Acquire, 1)
    AIE.dmaBd(<%208 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%209, Release, 0)
    AIE.nextBd ^bb3
  ^bb3:  // pred: ^bb2
    AIE.useLock(%211, Acquire, 1)
    AIE.dmaBd(<%210 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%211, Release, 0)
    AIE.nextBd ^bb4
  ^bb4:  // pred: ^bb3
    AIE.useLock(%213, Acquire, 1)
    AIE.dmaBd(<%212 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%213, Release, 0)
    AIE.nextBd ^bb5
  ^bb5:  // pred: ^bb4
    AIE.useLock(%215, Acquire, 1)
    AIE.dmaBd(<%214 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%215, Release, 0)
    AIE.nextBd ^bb6
  ^bb6:  // pred: ^bb5
    AIE.useLock(%217, Acquire, 1)
    AIE.dmaBd(<%216 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%217, Release, 0)
    AIE.nextBd ^bb1
  ^bb7:  // pred: ^bb0
    %301 = AIE.dmaStart(S2MM, 0, ^bb8, ^bb10)
  ^bb8:  // 2 preds: ^bb7, ^bb9
    AIE.useLock(%272, Acquire, 0)
    AIE.dmaBd(<%271 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%272, Release, 1)
    AIE.nextBd ^bb9
  ^bb9:  // pred: ^bb8
    AIE.useLock(%274, Acquire, 0)
    AIE.dmaBd(<%273 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%274, Release, 1)
    AIE.nextBd ^bb8
  ^bb10:  // pred: ^bb7
    AIE.end
  }
  %290 = AIE.shimDMA(%12) {
    %300 = AIE.dmaStart(S2MM, 0, ^bb1, ^bb2)
  ^bb1:  // 2 preds: ^bb0, ^bb1
    AIE.useLock(%218, Acquire, 0)
    AIE.dmaBd(<%276 : memref<2048xi32>, 0, 2048>, 0)
    AIE.useLock(%218, Release, 1)
    AIE.nextBd ^bb1
  ^bb2:  // pred: ^bb0
    %301 = AIE.dmaStart(MM2S, 0, ^bb3, ^bb4)
  ^bb3:  // 2 preds: ^bb2, ^bb3
    AIE.useLock(%13, Acquire, 1)
    AIE.dmaBd(<%275 : memref<2048xi32>, 0, 2048>, 0)
    AIE.useLock(%13, Release, 0)
    AIE.nextBd ^bb3
  ^bb4:  // pred: ^bb2
    AIE.end
  }
  %291 = AIE.mem(%0) {
    %300 = AIE.dmaStart(S2MM, 0, ^bb1, ^bb10)
  ^bb1:  // 2 preds: ^bb0, ^bb9
    AIE.useLock(%141, Acquire, 0)
    AIE.dmaBd(<%140 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%141, Release, 1)
    AIE.nextBd ^bb2
  ^bb2:  // pred: ^bb1
    AIE.useLock(%143, Acquire, 0)
    AIE.dmaBd(<%142 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%143, Release, 1)
    AIE.nextBd ^bb3
  ^bb3:  // pred: ^bb2
    AIE.useLock(%145, Acquire, 0)
    AIE.dmaBd(<%144 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%145, Release, 1)
    AIE.nextBd ^bb4
  ^bb4:  // pred: ^bb3
    AIE.useLock(%147, Acquire, 0)
    AIE.dmaBd(<%146 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%147, Release, 1)
    AIE.nextBd ^bb5
  ^bb5:  // pred: ^bb4
    AIE.useLock(%149, Acquire, 0)
    AIE.dmaBd(<%148 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%149, Release, 1)
    AIE.nextBd ^bb6
  ^bb6:  // pred: ^bb5
    AIE.useLock(%151, Acquire, 0)
    AIE.dmaBd(<%150 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%151, Release, 1)
    AIE.nextBd ^bb7
  ^bb7:  // pred: ^bb6
    AIE.useLock(%153, Acquire, 0)
    AIE.dmaBd(<%152 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%153, Release, 1)
    AIE.nextBd ^bb8
  ^bb8:  // pred: ^bb7
    AIE.useLock(%155, Acquire, 0)
    AIE.dmaBd(<%154 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%155, Release, 1)
    AIE.nextBd ^bb9
  ^bb9:  // pred: ^bb8
    AIE.useLock(%157, Acquire, 0)
    AIE.dmaBd(<%156 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%157, Release, 1)
    AIE.nextBd ^bb1
  ^bb10:  // pred: ^bb0
    AIE.end
  }
  %292 = AIE.mem(%4) {
    %300 = AIE.dmaStart(S2MM, 0, ^bb1, ^bb10)
  ^bb1:  // 2 preds: ^bb0, ^bb9
    AIE.useLock(%123, Acquire, 0)
    AIE.dmaBd(<%122 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%123, Release, 1)
    AIE.nextBd ^bb2
  ^bb2:  // pred: ^bb1
    AIE.useLock(%125, Acquire, 0)
    AIE.dmaBd(<%124 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%125, Release, 1)
    AIE.nextBd ^bb3
  ^bb3:  // pred: ^bb2
    AIE.useLock(%127, Acquire, 0)
    AIE.dmaBd(<%126 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%127, Release, 1)
    AIE.nextBd ^bb4
  ^bb4:  // pred: ^bb3
    AIE.useLock(%129, Acquire, 0)
    AIE.dmaBd(<%128 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%129, Release, 1)
    AIE.nextBd ^bb5
  ^bb5:  // pred: ^bb4
    AIE.useLock(%131, Acquire, 0)
    AIE.dmaBd(<%130 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%131, Release, 1)
    AIE.nextBd ^bb6
  ^bb6:  // pred: ^bb5
    AIE.useLock(%133, Acquire, 0)
    AIE.dmaBd(<%132 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%133, Release, 1)
    AIE.nextBd ^bb7
  ^bb7:  // pred: ^bb6
    AIE.useLock(%135, Acquire, 0)
    AIE.dmaBd(<%134 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%135, Release, 1)
    AIE.nextBd ^bb8
  ^bb8:  // pred: ^bb7
    AIE.useLock(%137, Acquire, 0)
    AIE.dmaBd(<%136 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%137, Release, 1)
    AIE.nextBd ^bb9
  ^bb9:  // pred: ^bb8
    AIE.useLock(%139, Acquire, 0)
    AIE.dmaBd(<%138 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%139, Release, 1)
    AIE.nextBd ^bb1
  ^bb10:  // pred: ^bb0
    AIE.end
  }
  %293 = AIE.mem(%1) {
    %300 = AIE.dmaStart(S2MM, 0, ^bb1, ^bb10)
  ^bb1:  // 2 preds: ^bb0, ^bb9
    AIE.useLock(%105, Acquire, 0)
    AIE.dmaBd(<%104 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%105, Release, 1)
    AIE.nextBd ^bb2
  ^bb2:  // pred: ^bb1
    AIE.useLock(%107, Acquire, 0)
    AIE.dmaBd(<%106 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%107, Release, 1)
    AIE.nextBd ^bb3
  ^bb3:  // pred: ^bb2
    AIE.useLock(%109, Acquire, 0)
    AIE.dmaBd(<%108 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%109, Release, 1)
    AIE.nextBd ^bb4
  ^bb4:  // pred: ^bb3
    AIE.useLock(%111, Acquire, 0)
    AIE.dmaBd(<%110 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%111, Release, 1)
    AIE.nextBd ^bb5
  ^bb5:  // pred: ^bb4
    AIE.useLock(%113, Acquire, 0)
    AIE.dmaBd(<%112 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%113, Release, 1)
    AIE.nextBd ^bb6
  ^bb6:  // pred: ^bb5
    AIE.useLock(%115, Acquire, 0)
    AIE.dmaBd(<%114 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%115, Release, 1)
    AIE.nextBd ^bb7
  ^bb7:  // pred: ^bb6
    AIE.useLock(%117, Acquire, 0)
    AIE.dmaBd(<%116 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%117, Release, 1)
    AIE.nextBd ^bb8
  ^bb8:  // pred: ^bb7
    AIE.useLock(%119, Acquire, 0)
    AIE.dmaBd(<%118 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%119, Release, 1)
    AIE.nextBd ^bb9
  ^bb9:  // pred: ^bb8
    AIE.useLock(%121, Acquire, 0)
    AIE.dmaBd(<%120 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%121, Release, 1)
    AIE.nextBd ^bb1
  ^bb10:  // pred: ^bb0
    AIE.end
  }
  %294 = AIE.mem(%5) {
    %300 = AIE.dmaStart(S2MM, 0, ^bb1, ^bb10)
  ^bb1:  // 2 preds: ^bb0, ^bb9
    AIE.useLock(%87, Acquire, 0)
    AIE.dmaBd(<%86 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%87, Release, 1)
    AIE.nextBd ^bb2
  ^bb2:  // pred: ^bb1
    AIE.useLock(%89, Acquire, 0)
    AIE.dmaBd(<%88 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%89, Release, 1)
    AIE.nextBd ^bb3
  ^bb3:  // pred: ^bb2
    AIE.useLock(%91, Acquire, 0)
    AIE.dmaBd(<%90 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%91, Release, 1)
    AIE.nextBd ^bb4
  ^bb4:  // pred: ^bb3
    AIE.useLock(%93, Acquire, 0)
    AIE.dmaBd(<%92 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%93, Release, 1)
    AIE.nextBd ^bb5
  ^bb5:  // pred: ^bb4
    AIE.useLock(%95, Acquire, 0)
    AIE.dmaBd(<%94 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%95, Release, 1)
    AIE.nextBd ^bb6
  ^bb6:  // pred: ^bb5
    AIE.useLock(%97, Acquire, 0)
    AIE.dmaBd(<%96 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%97, Release, 1)
    AIE.nextBd ^bb7
  ^bb7:  // pred: ^bb6
    AIE.useLock(%99, Acquire, 0)
    AIE.dmaBd(<%98 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%99, Release, 1)
    AIE.nextBd ^bb8
  ^bb8:  // pred: ^bb7
    AIE.useLock(%101, Acquire, 0)
    AIE.dmaBd(<%100 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%101, Release, 1)
    AIE.nextBd ^bb9
  ^bb9:  // pred: ^bb8
    AIE.useLock(%103, Acquire, 0)
    AIE.dmaBd(<%102 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%103, Release, 1)
    AIE.nextBd ^bb1
  ^bb10:  // pred: ^bb0
    AIE.end
  }
  %295 = AIE.mem(%2) {
    %300 = AIE.dmaStart(S2MM, 0, ^bb1, ^bb10)
  ^bb1:  // 2 preds: ^bb0, ^bb9
    AIE.useLock(%69, Acquire, 0)
    AIE.dmaBd(<%68 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%69, Release, 1)
    AIE.nextBd ^bb2
  ^bb2:  // pred: ^bb1
    AIE.useLock(%71, Acquire, 0)
    AIE.dmaBd(<%70 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%71, Release, 1)
    AIE.nextBd ^bb3
  ^bb3:  // pred: ^bb2
    AIE.useLock(%73, Acquire, 0)
    AIE.dmaBd(<%72 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%73, Release, 1)
    AIE.nextBd ^bb4
  ^bb4:  // pred: ^bb3
    AIE.useLock(%75, Acquire, 0)
    AIE.dmaBd(<%74 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%75, Release, 1)
    AIE.nextBd ^bb5
  ^bb5:  // pred: ^bb4
    AIE.useLock(%77, Acquire, 0)
    AIE.dmaBd(<%76 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%77, Release, 1)
    AIE.nextBd ^bb6
  ^bb6:  // pred: ^bb5
    AIE.useLock(%79, Acquire, 0)
    AIE.dmaBd(<%78 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%79, Release, 1)
    AIE.nextBd ^bb7
  ^bb7:  // pred: ^bb6
    AIE.useLock(%81, Acquire, 0)
    AIE.dmaBd(<%80 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%81, Release, 1)
    AIE.nextBd ^bb8
  ^bb8:  // pred: ^bb7
    AIE.useLock(%83, Acquire, 0)
    AIE.dmaBd(<%82 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%83, Release, 1)
    AIE.nextBd ^bb9
  ^bb9:  // pred: ^bb8
    AIE.useLock(%85, Acquire, 0)
    AIE.dmaBd(<%84 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%85, Release, 1)
    AIE.nextBd ^bb1
  ^bb10:  // pred: ^bb0
    AIE.end
  }
  %296 = AIE.mem(%6) {
    %300 = AIE.dmaStart(S2MM, 0, ^bb1, ^bb10)
  ^bb1:  // 2 preds: ^bb0, ^bb9
    AIE.useLock(%51, Acquire, 0)
    AIE.dmaBd(<%50 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%51, Release, 1)
    AIE.nextBd ^bb2
  ^bb2:  // pred: ^bb1
    AIE.useLock(%53, Acquire, 0)
    AIE.dmaBd(<%52 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%53, Release, 1)
    AIE.nextBd ^bb3
  ^bb3:  // pred: ^bb2
    AIE.useLock(%55, Acquire, 0)
    AIE.dmaBd(<%54 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%55, Release, 1)
    AIE.nextBd ^bb4
  ^bb4:  // pred: ^bb3
    AIE.useLock(%57, Acquire, 0)
    AIE.dmaBd(<%56 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%57, Release, 1)
    AIE.nextBd ^bb5
  ^bb5:  // pred: ^bb4
    AIE.useLock(%59, Acquire, 0)
    AIE.dmaBd(<%58 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%59, Release, 1)
    AIE.nextBd ^bb6
  ^bb6:  // pred: ^bb5
    AIE.useLock(%61, Acquire, 0)
    AIE.dmaBd(<%60 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%61, Release, 1)
    AIE.nextBd ^bb7
  ^bb7:  // pred: ^bb6
    AIE.useLock(%63, Acquire, 0)
    AIE.dmaBd(<%62 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%63, Release, 1)
    AIE.nextBd ^bb8
  ^bb8:  // pred: ^bb7
    AIE.useLock(%65, Acquire, 0)
    AIE.dmaBd(<%64 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%65, Release, 1)
    AIE.nextBd ^bb9
  ^bb9:  // pred: ^bb8
    AIE.useLock(%67, Acquire, 0)
    AIE.dmaBd(<%66 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%67, Release, 1)
    AIE.nextBd ^bb1
  ^bb10:  // pred: ^bb0
    AIE.end
  }
  %297 = AIE.mem(%3) {
    %300 = AIE.dmaStart(S2MM, 0, ^bb1, ^bb10)
  ^bb1:  // 2 preds: ^bb0, ^bb9
    AIE.useLock(%33, Acquire, 0)
    AIE.dmaBd(<%32 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%33, Release, 1)
    AIE.nextBd ^bb2
  ^bb2:  // pred: ^bb1
    AIE.useLock(%35, Acquire, 0)
    AIE.dmaBd(<%34 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%35, Release, 1)
    AIE.nextBd ^bb3
  ^bb3:  // pred: ^bb2
    AIE.useLock(%37, Acquire, 0)
    AIE.dmaBd(<%36 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%37, Release, 1)
    AIE.nextBd ^bb4
  ^bb4:  // pred: ^bb3
    AIE.useLock(%39, Acquire, 0)
    AIE.dmaBd(<%38 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%39, Release, 1)
    AIE.nextBd ^bb5
  ^bb5:  // pred: ^bb4
    AIE.useLock(%41, Acquire, 0)
    AIE.dmaBd(<%40 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%41, Release, 1)
    AIE.nextBd ^bb6
  ^bb6:  // pred: ^bb5
    AIE.useLock(%43, Acquire, 0)
    AIE.dmaBd(<%42 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%43, Release, 1)
    AIE.nextBd ^bb7
  ^bb7:  // pred: ^bb6
    AIE.useLock(%45, Acquire, 0)
    AIE.dmaBd(<%44 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%45, Release, 1)
    AIE.nextBd ^bb8
  ^bb8:  // pred: ^bb7
    AIE.useLock(%47, Acquire, 0)
    AIE.dmaBd(<%46 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%47, Release, 1)
    AIE.nextBd ^bb9
  ^bb9:  // pred: ^bb8
    AIE.useLock(%49, Acquire, 0)
    AIE.dmaBd(<%48 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%49, Release, 1)
    AIE.nextBd ^bb1
  ^bb10:  // pred: ^bb0
    AIE.end
  }
  %298 = AIE.mem(%7) {
    %300 = AIE.dmaStart(S2MM, 0, ^bb1, ^bb10)
  ^bb1:  // 2 preds: ^bb0, ^bb9
    AIE.useLock(%15, Acquire, 0)
    AIE.dmaBd(<%14 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%15, Release, 1)
    AIE.nextBd ^bb2
  ^bb2:  // pred: ^bb1
    AIE.useLock(%17, Acquire, 0)
    AIE.dmaBd(<%16 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%17, Release, 1)
    AIE.nextBd ^bb3
  ^bb3:  // pred: ^bb2
    AIE.useLock(%19, Acquire, 0)
    AIE.dmaBd(<%18 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%19, Release, 1)
    AIE.nextBd ^bb4
  ^bb4:  // pred: ^bb3
    AIE.useLock(%21, Acquire, 0)
    AIE.dmaBd(<%20 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%21, Release, 1)
    AIE.nextBd ^bb5
  ^bb5:  // pred: ^bb4
    AIE.useLock(%23, Acquire, 0)
    AIE.dmaBd(<%22 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%23, Release, 1)
    AIE.nextBd ^bb6
  ^bb6:  // pred: ^bb5
    AIE.useLock(%25, Acquire, 0)
    AIE.dmaBd(<%24 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%25, Release, 1)
    AIE.nextBd ^bb7
  ^bb7:  // pred: ^bb6
    AIE.useLock(%27, Acquire, 0)
    AIE.dmaBd(<%26 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%27, Release, 1)
    AIE.nextBd ^bb8
  ^bb8:  // pred: ^bb7
    AIE.useLock(%29, Acquire, 0)
    AIE.dmaBd(<%28 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%29, Release, 1)
    AIE.nextBd ^bb9
  ^bb9:  // pred: ^bb8
    AIE.useLock(%31, Acquire, 0)
    AIE.dmaBd(<%30 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%31, Release, 1)
    AIE.nextBd ^bb1
  ^bb10:  // pred: ^bb0
    AIE.end
  }
  %299 = AIE.mem(%11) {
    %300 = AIE.dmaStart(MM2S, 0, ^bb1, ^bb3)
  ^bb1:  // 2 preds: ^bb0, ^bb2
    AIE.useLock(%268, Acquire, 1)
    AIE.dmaBd(<%267 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%268, Release, 0)
    AIE.nextBd ^bb2
  ^bb2:  // pred: ^bb1
    AIE.useLock(%270, Acquire, 1)
    AIE.dmaBd(<%269 : memref<256xi32>, 0, 256>, 0)
    AIE.useLock(%270, Release, 0)
    AIE.nextBd ^bb1
  ^bb3:  // pred: ^bb0
    AIE.end
  }
}

