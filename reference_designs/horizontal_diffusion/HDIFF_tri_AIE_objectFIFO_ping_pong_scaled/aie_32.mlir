// (c) 2023 SAFARI Research Group at ETH Zurich, Gagandeep Singh, D-ITET   
    
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception


module @hdiff_bundle_32 {
//---Generating B-block 0---*-
//---col 0---*-
  %tile0_1 = AIE.tile(0, 1)
  %tile0_2 = AIE.tile(0, 2)
  %tile0_3 = AIE.tile(0, 3)
  %tile0_4 = AIE.tile(0, 4)
//---col 1---*-
  %tile1_1 = AIE.tile(1, 1)
  %tile1_2 = AIE.tile(1, 2)
  %tile1_3 = AIE.tile(1, 3)
  %tile1_4 = AIE.tile(1, 4)
//---col 2---*-
  %tile2_1 = AIE.tile(2, 1)
  %tile2_2 = AIE.tile(2, 2)
  %tile2_3 = AIE.tile(2, 3)
  %tile2_4 = AIE.tile(2, 4)

//---Generating B-block 1---*-
//---col 0---*-
  %tile0_5 = AIE.tile(0, 5)
  %tile0_6 = AIE.tile(0, 6)
  %tile0_7 = AIE.tile(0, 7)
  %tile0_8 = AIE.tile(0, 8)
//---col 1---*-
  %tile1_5 = AIE.tile(1, 5)
  %tile1_6 = AIE.tile(1, 6)
  %tile1_7 = AIE.tile(1, 7)
  %tile1_8 = AIE.tile(1, 8)
//---col 2---*-
  %tile2_5 = AIE.tile(2, 5)
  %tile2_6 = AIE.tile(2, 6)
  %tile2_7 = AIE.tile(2, 7)
  %tile2_8 = AIE.tile(2, 8)

//---Generating B-block 2---*-
//---col 0---*-
  %tile3_1 = AIE.tile(3, 1)
  %tile3_2 = AIE.tile(3, 2)
  %tile3_3 = AIE.tile(3, 3)
  %tile3_4 = AIE.tile(3, 4)
//---col 1---*-
  %tile4_1 = AIE.tile(4, 1)
  %tile4_2 = AIE.tile(4, 2)
  %tile4_3 = AIE.tile(4, 3)
  %tile4_4 = AIE.tile(4, 4)
//---col 2---*-
  %tile5_1 = AIE.tile(5, 1)
  %tile5_2 = AIE.tile(5, 2)
  %tile5_3 = AIE.tile(5, 3)
  %tile5_4 = AIE.tile(5, 4)

//---Generating B-block 3---*-
//---col 0---*-
  %tile3_5 = AIE.tile(3, 5)
  %tile3_6 = AIE.tile(3, 6)
  %tile3_7 = AIE.tile(3, 7)
  %tile3_8 = AIE.tile(3, 8)
//---col 1---*-
  %tile4_5 = AIE.tile(4, 5)
  %tile4_6 = AIE.tile(4, 6)
  %tile4_7 = AIE.tile(4, 7)
  %tile4_8 = AIE.tile(4, 8)
//---col 2---*-
  %tile5_5 = AIE.tile(5, 5)
  %tile5_6 = AIE.tile(5, 6)
  %tile5_7 = AIE.tile(5, 7)
  %tile5_8 = AIE.tile(5, 8)

//---Generating B-block 4---*-
//---col 0---*-
  %tile6_1 = AIE.tile(6, 1)
  %tile6_2 = AIE.tile(6, 2)
  %tile6_3 = AIE.tile(6, 3)
  %tile6_4 = AIE.tile(6, 4)
//---col 1---*-
  %tile7_1 = AIE.tile(7, 1)
  %tile7_2 = AIE.tile(7, 2)
  %tile7_3 = AIE.tile(7, 3)
  %tile7_4 = AIE.tile(7, 4)
//---col 2---*-
  %tile8_1 = AIE.tile(8, 1)
  %tile8_2 = AIE.tile(8, 2)
  %tile8_3 = AIE.tile(8, 3)
  %tile8_4 = AIE.tile(8, 4)

//---Generating B-block 5---*-
//---col 0---*-
  %tile6_5 = AIE.tile(6, 5)
  %tile6_6 = AIE.tile(6, 6)
  %tile6_7 = AIE.tile(6, 7)
  %tile6_8 = AIE.tile(6, 8)
//---col 1---*-
  %tile7_5 = AIE.tile(7, 5)
  %tile7_6 = AIE.tile(7, 6)
  %tile7_7 = AIE.tile(7, 7)
  %tile7_8 = AIE.tile(7, 8)
//---col 2---*-
  %tile8_5 = AIE.tile(8, 5)
  %tile8_6 = AIE.tile(8, 6)
  %tile8_7 = AIE.tile(8, 7)
  %tile8_8 = AIE.tile(8, 8)

//---Generating B-block 6---*-
//---col 0---*-
  %tile9_1 = AIE.tile(9, 1)
  %tile9_2 = AIE.tile(9, 2)
  %tile9_3 = AIE.tile(9, 3)
  %tile9_4 = AIE.tile(9, 4)
//---col 1---*-
  %tile10_1 = AIE.tile(10, 1)
  %tile10_2 = AIE.tile(10, 2)
  %tile10_3 = AIE.tile(10, 3)
  %tile10_4 = AIE.tile(10, 4)
//---col 2---*-
  %tile11_1 = AIE.tile(11, 1)
  %tile11_2 = AIE.tile(11, 2)
  %tile11_3 = AIE.tile(11, 3)
  %tile11_4 = AIE.tile(11, 4)

//---Generating B-block 7---*-
//---col 0---*-
  %tile9_5 = AIE.tile(9, 5)
  %tile9_6 = AIE.tile(9, 6)
  %tile9_7 = AIE.tile(9, 7)
  %tile9_8 = AIE.tile(9, 8)
//---col 1---*-
  %tile10_5 = AIE.tile(10, 5)
  %tile10_6 = AIE.tile(10, 6)
  %tile10_7 = AIE.tile(10, 7)
  %tile10_8 = AIE.tile(10, 8)
//---col 2---*-
  %tile11_5 = AIE.tile(11, 5)
  %tile11_6 = AIE.tile(11, 6)
  %tile11_7 = AIE.tile(11, 7)
  %tile11_8 = AIE.tile(11, 8)

//---Generating B-block 8---*-
//---col 0---*-
  %tile12_1 = AIE.tile(12, 1)
  %tile12_2 = AIE.tile(12, 2)
  %tile12_3 = AIE.tile(12, 3)
  %tile12_4 = AIE.tile(12, 4)
//---col 1---*-
  %tile13_1 = AIE.tile(13, 1)
  %tile13_2 = AIE.tile(13, 2)
  %tile13_3 = AIE.tile(13, 3)
  %tile13_4 = AIE.tile(13, 4)
//---col 2---*-
  %tile14_1 = AIE.tile(14, 1)
  %tile14_2 = AIE.tile(14, 2)
  %tile14_3 = AIE.tile(14, 3)
  %tile14_4 = AIE.tile(14, 4)

//---Generating B-block 9---*-
//---col 0---*-
  %tile12_5 = AIE.tile(12, 5)
  %tile12_6 = AIE.tile(12, 6)
  %tile12_7 = AIE.tile(12, 7)
  %tile12_8 = AIE.tile(12, 8)
//---col 1---*-
  %tile13_5 = AIE.tile(13, 5)
  %tile13_6 = AIE.tile(13, 6)
  %tile13_7 = AIE.tile(13, 7)
  %tile13_8 = AIE.tile(13, 8)
//---col 2---*-
  %tile14_5 = AIE.tile(14, 5)
  %tile14_6 = AIE.tile(14, 6)
  %tile14_7 = AIE.tile(14, 7)
  %tile14_8 = AIE.tile(14, 8)

//---Generating B-block 10---*-
//---col 0---*-
  %tile15_1 = AIE.tile(15, 1)
  %tile15_2 = AIE.tile(15, 2)
  %tile15_3 = AIE.tile(15, 3)
  %tile15_4 = AIE.tile(15, 4)
//---col 1---*-
  %tile16_1 = AIE.tile(16, 1)
  %tile16_2 = AIE.tile(16, 2)
  %tile16_3 = AIE.tile(16, 3)
  %tile16_4 = AIE.tile(16, 4)
//---col 2---*-
  %tile17_1 = AIE.tile(17, 1)
  %tile17_2 = AIE.tile(17, 2)
  %tile17_3 = AIE.tile(17, 3)
  %tile17_4 = AIE.tile(17, 4)

//---Generating B-block 11---*-
//---col 0---*-
  %tile15_5 = AIE.tile(15, 5)
  %tile15_6 = AIE.tile(15, 6)
  %tile15_7 = AIE.tile(15, 7)
  %tile15_8 = AIE.tile(15, 8)
//---col 1---*-
  %tile16_5 = AIE.tile(16, 5)
  %tile16_6 = AIE.tile(16, 6)
  %tile16_7 = AIE.tile(16, 7)
  %tile16_8 = AIE.tile(16, 8)
//---col 2---*-
  %tile17_5 = AIE.tile(17, 5)
  %tile17_6 = AIE.tile(17, 6)
  %tile17_7 = AIE.tile(17, 7)
  %tile17_8 = AIE.tile(17, 8)

//---Generating B-block 12---*-
//---col 0---*-
  %tile18_1 = AIE.tile(18, 1)
  %tile18_2 = AIE.tile(18, 2)
  %tile18_3 = AIE.tile(18, 3)
  %tile18_4 = AIE.tile(18, 4)
//---col 1---*-
  %tile19_1 = AIE.tile(19, 1)
  %tile19_2 = AIE.tile(19, 2)
  %tile19_3 = AIE.tile(19, 3)
  %tile19_4 = AIE.tile(19, 4)
//---col 2---*-
  %tile20_1 = AIE.tile(20, 1)
  %tile20_2 = AIE.tile(20, 2)
  %tile20_3 = AIE.tile(20, 3)
  %tile20_4 = AIE.tile(20, 4)

//---Generating B-block 13---*-
//---col 0---*-
  %tile18_5 = AIE.tile(18, 5)
  %tile18_6 = AIE.tile(18, 6)
  %tile18_7 = AIE.tile(18, 7)
  %tile18_8 = AIE.tile(18, 8)
//---col 1---*-
  %tile19_5 = AIE.tile(19, 5)
  %tile19_6 = AIE.tile(19, 6)
  %tile19_7 = AIE.tile(19, 7)
  %tile19_8 = AIE.tile(19, 8)
//---col 2---*-
  %tile20_5 = AIE.tile(20, 5)
  %tile20_6 = AIE.tile(20, 6)
  %tile20_7 = AIE.tile(20, 7)
  %tile20_8 = AIE.tile(20, 8)

//---Generating B-block 14---*-
//---col 0---*-
  %tile21_1 = AIE.tile(21, 1)
  %tile21_2 = AIE.tile(21, 2)
  %tile21_3 = AIE.tile(21, 3)
  %tile21_4 = AIE.tile(21, 4)
//---col 1---*-
  %tile22_1 = AIE.tile(22, 1)
  %tile22_2 = AIE.tile(22, 2)
  %tile22_3 = AIE.tile(22, 3)
  %tile22_4 = AIE.tile(22, 4)
//---col 2---*-
  %tile23_1 = AIE.tile(23, 1)
  %tile23_2 = AIE.tile(23, 2)
  %tile23_3 = AIE.tile(23, 3)
  %tile23_4 = AIE.tile(23, 4)

//---Generating B-block 15---*-
//---col 0---*-
  %tile21_5 = AIE.tile(21, 5)
  %tile21_6 = AIE.tile(21, 6)
  %tile21_7 = AIE.tile(21, 7)
  %tile21_8 = AIE.tile(21, 8)
//---col 1---*-
  %tile22_5 = AIE.tile(22, 5)
  %tile22_6 = AIE.tile(22, 6)
  %tile22_7 = AIE.tile(22, 7)
  %tile22_8 = AIE.tile(22, 8)
//---col 2---*-
  %tile23_5 = AIE.tile(23, 5)
  %tile23_6 = AIE.tile(23, 6)
  %tile23_7 = AIE.tile(23, 7)
  %tile23_8 = AIE.tile(23, 8)

//---Generating B-block 16---*-
//---col 0---*-
  %tile24_1 = AIE.tile(24, 1)
  %tile24_2 = AIE.tile(24, 2)
  %tile24_3 = AIE.tile(24, 3)
  %tile24_4 = AIE.tile(24, 4)
//---col 1---*-
  %tile25_1 = AIE.tile(25, 1)
  %tile25_2 = AIE.tile(25, 2)
  %tile25_3 = AIE.tile(25, 3)
  %tile25_4 = AIE.tile(25, 4)
//---col 2---*-
  %tile26_1 = AIE.tile(26, 1)
  %tile26_2 = AIE.tile(26, 2)
  %tile26_3 = AIE.tile(26, 3)
  %tile26_4 = AIE.tile(26, 4)

//---Generating B-block 17---*-
//---col 0---*-
  %tile24_5 = AIE.tile(24, 5)
  %tile24_6 = AIE.tile(24, 6)
  %tile24_7 = AIE.tile(24, 7)
  %tile24_8 = AIE.tile(24, 8)
//---col 1---*-
  %tile25_5 = AIE.tile(25, 5)
  %tile25_6 = AIE.tile(25, 6)
  %tile25_7 = AIE.tile(25, 7)
  %tile25_8 = AIE.tile(25, 8)
//---col 2---*-
  %tile26_5 = AIE.tile(26, 5)
  %tile26_6 = AIE.tile(26, 6)
  %tile26_7 = AIE.tile(26, 7)
  %tile26_8 = AIE.tile(26, 8)

//---Generating B-block 18---*-
//---col 0---*-
  %tile27_1 = AIE.tile(27, 1)
  %tile27_2 = AIE.tile(27, 2)
  %tile27_3 = AIE.tile(27, 3)
  %tile27_4 = AIE.tile(27, 4)
//---col 1---*-
  %tile28_1 = AIE.tile(28, 1)
  %tile28_2 = AIE.tile(28, 2)
  %tile28_3 = AIE.tile(28, 3)
  %tile28_4 = AIE.tile(28, 4)
//---col 2---*-
  %tile29_1 = AIE.tile(29, 1)
  %tile29_2 = AIE.tile(29, 2)
  %tile29_3 = AIE.tile(29, 3)
  %tile29_4 = AIE.tile(29, 4)

//---Generating B-block 19---*-
//---col 0---*-
  %tile27_5 = AIE.tile(27, 5)
  %tile27_6 = AIE.tile(27, 6)
  %tile27_7 = AIE.tile(27, 7)
  %tile27_8 = AIE.tile(27, 8)
//---col 1---*-
  %tile28_5 = AIE.tile(28, 5)
  %tile28_6 = AIE.tile(28, 6)
  %tile28_7 = AIE.tile(28, 7)
  %tile28_8 = AIE.tile(28, 8)
//---col 2---*-
  %tile29_5 = AIE.tile(29, 5)
  %tile29_6 = AIE.tile(29, 6)
  %tile29_7 = AIE.tile(29, 7)
  %tile29_8 = AIE.tile(29, 8)

//---Generating B-block 20---*-
//---col 0---*-
  %tile30_1 = AIE.tile(30, 1)
  %tile30_2 = AIE.tile(30, 2)
  %tile30_3 = AIE.tile(30, 3)
  %tile30_4 = AIE.tile(30, 4)
//---col 1---*-
  %tile31_1 = AIE.tile(31, 1)
  %tile31_2 = AIE.tile(31, 2)
  %tile31_3 = AIE.tile(31, 3)
  %tile31_4 = AIE.tile(31, 4)
//---col 2---*-
  %tile32_1 = AIE.tile(32, 1)
  %tile32_2 = AIE.tile(32, 2)
  %tile32_3 = AIE.tile(32, 3)
  %tile32_4 = AIE.tile(32, 4)

//---Generating B-block 21---*-
//---col 0---*-
  %tile30_5 = AIE.tile(30, 5)
  %tile30_6 = AIE.tile(30, 6)
  %tile30_7 = AIE.tile(30, 7)
  %tile30_8 = AIE.tile(30, 8)
//---col 1---*-
  %tile31_5 = AIE.tile(31, 5)
  %tile31_6 = AIE.tile(31, 6)
  %tile31_7 = AIE.tile(31, 7)
  %tile31_8 = AIE.tile(31, 8)
//---col 2---*-
  %tile32_5 = AIE.tile(32, 5)
  %tile32_6 = AIE.tile(32, 6)
  %tile32_7 = AIE.tile(32, 7)
  %tile32_8 = AIE.tile(32, 8)

//---Generating B-block 22---*-
//---col 0---*-
  %tile33_1 = AIE.tile(33, 1)
  %tile33_2 = AIE.tile(33, 2)
  %tile33_3 = AIE.tile(33, 3)
  %tile33_4 = AIE.tile(33, 4)
//---col 1---*-
  %tile34_1 = AIE.tile(34, 1)
  %tile34_2 = AIE.tile(34, 2)
  %tile34_3 = AIE.tile(34, 3)
  %tile34_4 = AIE.tile(34, 4)
//---col 2---*-
  %tile35_1 = AIE.tile(35, 1)
  %tile35_2 = AIE.tile(35, 2)
  %tile35_3 = AIE.tile(35, 3)
  %tile35_4 = AIE.tile(35, 4)

//---Generating B-block 23---*-
//---col 0---*-
  %tile33_5 = AIE.tile(33, 5)
  %tile33_6 = AIE.tile(33, 6)
  %tile33_7 = AIE.tile(33, 7)
  %tile33_8 = AIE.tile(33, 8)
//---col 1---*-
  %tile34_5 = AIE.tile(34, 5)
  %tile34_6 = AIE.tile(34, 6)
  %tile34_7 = AIE.tile(34, 7)
  %tile34_8 = AIE.tile(34, 8)
//---col 2---*-
  %tile35_5 = AIE.tile(35, 5)
  %tile35_6 = AIE.tile(35, 6)
  %tile35_7 = AIE.tile(35, 7)
  %tile35_8 = AIE.tile(35, 8)

//---Generating B-block 24---*-
//---col 0---*-
  %tile36_1 = AIE.tile(36, 1)
  %tile36_2 = AIE.tile(36, 2)
  %tile36_3 = AIE.tile(36, 3)
  %tile36_4 = AIE.tile(36, 4)
//---col 1---*-
  %tile37_1 = AIE.tile(37, 1)
  %tile37_2 = AIE.tile(37, 2)
  %tile37_3 = AIE.tile(37, 3)
  %tile37_4 = AIE.tile(37, 4)
//---col 2---*-
  %tile38_1 = AIE.tile(38, 1)
  %tile38_2 = AIE.tile(38, 2)
  %tile38_3 = AIE.tile(38, 3)
  %tile38_4 = AIE.tile(38, 4)

//---Generating B-block 25---*-
//---col 0---*-
  %tile36_5 = AIE.tile(36, 5)
  %tile36_6 = AIE.tile(36, 6)
  %tile36_7 = AIE.tile(36, 7)
  %tile36_8 = AIE.tile(36, 8)
//---col 1---*-
  %tile37_5 = AIE.tile(37, 5)
  %tile37_6 = AIE.tile(37, 6)
  %tile37_7 = AIE.tile(37, 7)
  %tile37_8 = AIE.tile(37, 8)
//---col 2---*-
  %tile38_5 = AIE.tile(38, 5)
  %tile38_6 = AIE.tile(38, 6)
  %tile38_7 = AIE.tile(38, 7)
  %tile38_8 = AIE.tile(38, 8)

//---Generating B-block 26---*-
//---col 0---*-
  %tile39_1 = AIE.tile(39, 1)
  %tile39_2 = AIE.tile(39, 2)
  %tile39_3 = AIE.tile(39, 3)
  %tile39_4 = AIE.tile(39, 4)
//---col 1---*-
  %tile40_1 = AIE.tile(40, 1)
  %tile40_2 = AIE.tile(40, 2)
  %tile40_3 = AIE.tile(40, 3)
  %tile40_4 = AIE.tile(40, 4)
//---col 2---*-
  %tile41_1 = AIE.tile(41, 1)
  %tile41_2 = AIE.tile(41, 2)
  %tile41_3 = AIE.tile(41, 3)
  %tile41_4 = AIE.tile(41, 4)

//---Generating B-block 27---*-
//---col 0---*-
  %tile39_5 = AIE.tile(39, 5)
  %tile39_6 = AIE.tile(39, 6)
  %tile39_7 = AIE.tile(39, 7)
  %tile39_8 = AIE.tile(39, 8)
//---col 1---*-
  %tile40_5 = AIE.tile(40, 5)
  %tile40_6 = AIE.tile(40, 6)
  %tile40_7 = AIE.tile(40, 7)
  %tile40_8 = AIE.tile(40, 8)
//---col 2---*-
  %tile41_5 = AIE.tile(41, 5)
  %tile41_6 = AIE.tile(41, 6)
  %tile41_7 = AIE.tile(41, 7)
  %tile41_8 = AIE.tile(41, 8)

//---Generating B-block 28---*-
//---col 0---*-
  %tile42_1 = AIE.tile(42, 1)
  %tile42_2 = AIE.tile(42, 2)
  %tile42_3 = AIE.tile(42, 3)
  %tile42_4 = AIE.tile(42, 4)
//---col 1---*-
  %tile43_1 = AIE.tile(43, 1)
  %tile43_2 = AIE.tile(43, 2)
  %tile43_3 = AIE.tile(43, 3)
  %tile43_4 = AIE.tile(43, 4)
//---col 2---*-
  %tile44_1 = AIE.tile(44, 1)
  %tile44_2 = AIE.tile(44, 2)
  %tile44_3 = AIE.tile(44, 3)
  %tile44_4 = AIE.tile(44, 4)

//---Generating B-block 29---*-
//---col 0---*-
  %tile42_5 = AIE.tile(42, 5)
  %tile42_6 = AIE.tile(42, 6)
  %tile42_7 = AIE.tile(42, 7)
  %tile42_8 = AIE.tile(42, 8)
//---col 1---*-
  %tile43_5 = AIE.tile(43, 5)
  %tile43_6 = AIE.tile(43, 6)
  %tile43_7 = AIE.tile(43, 7)
  %tile43_8 = AIE.tile(43, 8)
//---col 2---*-
  %tile44_5 = AIE.tile(44, 5)
  %tile44_6 = AIE.tile(44, 6)
  %tile44_7 = AIE.tile(44, 7)
  %tile44_8 = AIE.tile(44, 8)

//---Generating B-block 30---*-
//---col 0---*-
  %tile45_1 = AIE.tile(45, 1)
  %tile45_2 = AIE.tile(45, 2)
  %tile45_3 = AIE.tile(45, 3)
  %tile45_4 = AIE.tile(45, 4)
//---col 1---*-
  %tile46_1 = AIE.tile(46, 1)
  %tile46_2 = AIE.tile(46, 2)
  %tile46_3 = AIE.tile(46, 3)
  %tile46_4 = AIE.tile(46, 4)
//---col 2---*-
  %tile47_1 = AIE.tile(47, 1)
  %tile47_2 = AIE.tile(47, 2)
  %tile47_3 = AIE.tile(47, 3)
  %tile47_4 = AIE.tile(47, 4)

//---Generating B-block 31---*-
//---col 0---*-
  %tile45_5 = AIE.tile(45, 5)
  %tile45_6 = AIE.tile(45, 6)
  %tile45_7 = AIE.tile(45, 7)
  %tile45_8 = AIE.tile(45, 8)
//---col 1---*-
  %tile46_5 = AIE.tile(46, 5)
  %tile46_6 = AIE.tile(46, 6)
  %tile46_7 = AIE.tile(46, 7)
  %tile46_8 = AIE.tile(46, 8)
//---col 2---*-
  %tile47_5 = AIE.tile(47, 5)
  %tile47_6 = AIE.tile(47, 6)
  %tile47_7 = AIE.tile(47, 7)
  %tile47_8 = AIE.tile(47, 8)

//---NOC Tile 2---*-
  %tile2_0 = AIE.tile(2, 0)
//---NOC Tile 3---*-
  %tile3_0 = AIE.tile(3, 0)
//---NOC Tile 6---*-
  %tile6_0 = AIE.tile(6, 0)
//---NOC Tile 7---*-
  %tile7_0 = AIE.tile(7, 0)
//---NOC Tile 10---*-
  %tile10_0 = AIE.tile(10, 0)
//---NOC Tile 11---*-
  %tile11_0 = AIE.tile(11, 0)
//---NOC Tile 18---*-
  %tile18_0 = AIE.tile(18, 0)
//---NOC Tile 19---*-
  %tile19_0 = AIE.tile(19, 0)
//---NOC Tile 26---*-
  %tile26_0 = AIE.tile(26, 0)
//---NOC Tile 27---*-
  %tile27_0 = AIE.tile(27, 0)
//---NOC Tile 34---*-
  %tile34_0 = AIE.tile(34, 0)
//---NOC Tile 35---*-
  %tile35_0 = AIE.tile(35, 0)
//---NOC Tile 42---*-
  %tile42_0 = AIE.tile(42, 0)
//---NOC Tile 43---*-
  %tile43_0 = AIE.tile(43, 0)
//---NOC Tile 46---*-
  %tile46_0 = AIE.tile(46, 0)
//---NOC Tile 47---*-
  %tile47_0 = AIE.tile(47, 0)

// timing locks
  %lock02_14 = AIE.lock(%tile0_2, 14) { sym_name = "lock02_14" }
  %lock22_14 = AIE.lock(%tile2_2, 14) { sym_name = "lock22_14" }

// timing locks
  %lock06_14 = AIE.lock(%tile0_6, 14) { sym_name = "lock06_14" }
  %lock26_14 = AIE.lock(%tile2_6, 14) { sym_name = "lock26_14" }

// timing locks
  %lock32_14 = AIE.lock(%tile3_2, 14) { sym_name = "lock32_14" }
  %lock52_14 = AIE.lock(%tile5_2, 14) { sym_name = "lock52_14" }

// timing locks
  %lock36_14 = AIE.lock(%tile3_6, 14) { sym_name = "lock36_14" }
  %lock56_14 = AIE.lock(%tile5_6, 14) { sym_name = "lock56_14" }

// timing locks
  %lock62_14 = AIE.lock(%tile6_2, 14) { sym_name = "lock62_14" }
  %lock82_14 = AIE.lock(%tile8_2, 14) { sym_name = "lock82_14" }

// timing locks
  %lock66_14 = AIE.lock(%tile6_6, 14) { sym_name = "lock66_14" }
  %lock86_14 = AIE.lock(%tile8_6, 14) { sym_name = "lock86_14" }

// timing locks
  %lock92_14 = AIE.lock(%tile9_2, 14) { sym_name = "lock92_14" }
  %lock112_14 = AIE.lock(%tile11_2, 14) { sym_name = "lock112_14" }

// timing locks
  %lock96_14 = AIE.lock(%tile9_6, 14) { sym_name = "lock96_14" }
  %lock116_14 = AIE.lock(%tile11_6, 14) { sym_name = "lock116_14" }

// timing locks
  %lock122_14 = AIE.lock(%tile12_2, 14) { sym_name = "lock122_14" }
  %lock142_14 = AIE.lock(%tile14_2, 14) { sym_name = "lock142_14" }

// timing locks
  %lock126_14 = AIE.lock(%tile12_6, 14) { sym_name = "lock126_14" }
  %lock146_14 = AIE.lock(%tile14_6, 14) { sym_name = "lock146_14" }

// timing locks
  %lock152_14 = AIE.lock(%tile15_2, 14) { sym_name = "lock152_14" }
  %lock172_14 = AIE.lock(%tile17_2, 14) { sym_name = "lock172_14" }

// timing locks
  %lock156_14 = AIE.lock(%tile15_6, 14) { sym_name = "lock156_14" }
  %lock176_14 = AIE.lock(%tile17_6, 14) { sym_name = "lock176_14" }

// timing locks
  %lock182_14 = AIE.lock(%tile18_2, 14) { sym_name = "lock182_14" }
  %lock202_14 = AIE.lock(%tile20_2, 14) { sym_name = "lock202_14" }

// timing locks
  %lock186_14 = AIE.lock(%tile18_6, 14) { sym_name = "lock186_14" }
  %lock206_14 = AIE.lock(%tile20_6, 14) { sym_name = "lock206_14" }

// timing locks
  %lock212_14 = AIE.lock(%tile21_2, 14) { sym_name = "lock212_14" }
  %lock232_14 = AIE.lock(%tile23_2, 14) { sym_name = "lock232_14" }

// timing locks
  %lock216_14 = AIE.lock(%tile21_6, 14) { sym_name = "lock216_14" }
  %lock236_14 = AIE.lock(%tile23_6, 14) { sym_name = "lock236_14" }

// timing locks
  %lock242_14 = AIE.lock(%tile24_2, 14) { sym_name = "lock242_14" }
  %lock262_14 = AIE.lock(%tile26_2, 14) { sym_name = "lock262_14" }

// timing locks
  %lock246_14 = AIE.lock(%tile24_6, 14) { sym_name = "lock246_14" }
  %lock266_14 = AIE.lock(%tile26_6, 14) { sym_name = "lock266_14" }

// timing locks
  %lock272_14 = AIE.lock(%tile27_2, 14) { sym_name = "lock272_14" }
  %lock292_14 = AIE.lock(%tile29_2, 14) { sym_name = "lock292_14" }

// timing locks
  %lock276_14 = AIE.lock(%tile27_6, 14) { sym_name = "lock276_14" }
  %lock296_14 = AIE.lock(%tile29_6, 14) { sym_name = "lock296_14" }

// timing locks
  %lock302_14 = AIE.lock(%tile30_2, 14) { sym_name = "lock302_14" }
  %lock322_14 = AIE.lock(%tile32_2, 14) { sym_name = "lock322_14" }

// timing locks
  %lock306_14 = AIE.lock(%tile30_6, 14) { sym_name = "lock306_14" }
  %lock326_14 = AIE.lock(%tile32_6, 14) { sym_name = "lock326_14" }

// timing locks
  %lock332_14 = AIE.lock(%tile33_2, 14) { sym_name = "lock332_14" }
  %lock352_14 = AIE.lock(%tile35_2, 14) { sym_name = "lock352_14" }

// timing locks
  %lock336_14 = AIE.lock(%tile33_6, 14) { sym_name = "lock336_14" }
  %lock356_14 = AIE.lock(%tile35_6, 14) { sym_name = "lock356_14" }

// timing locks
  %lock362_14 = AIE.lock(%tile36_2, 14) { sym_name = "lock362_14" }
  %lock382_14 = AIE.lock(%tile38_2, 14) { sym_name = "lock382_14" }

// timing locks
  %lock366_14 = AIE.lock(%tile36_6, 14) { sym_name = "lock366_14" }
  %lock386_14 = AIE.lock(%tile38_6, 14) { sym_name = "lock386_14" }

// timing locks
  %lock392_14 = AIE.lock(%tile39_2, 14) { sym_name = "lock392_14" }
  %lock412_14 = AIE.lock(%tile41_2, 14) { sym_name = "lock412_14" }

// timing locks
  %lock396_14 = AIE.lock(%tile39_6, 14) { sym_name = "lock396_14" }
  %lock416_14 = AIE.lock(%tile41_6, 14) { sym_name = "lock416_14" }

// timing locks
  %lock422_14 = AIE.lock(%tile42_2, 14) { sym_name = "lock422_14" }
  %lock442_14 = AIE.lock(%tile44_2, 14) { sym_name = "lock442_14" }

// timing locks
  %lock426_14 = AIE.lock(%tile42_6, 14) { sym_name = "lock426_14" }
  %lock446_14 = AIE.lock(%tile44_6, 14) { sym_name = "lock446_14" }

// timing locks
  %lock452_14 = AIE.lock(%tile45_2, 14) { sym_name = "lock452_14" }
  %lock472_14 = AIE.lock(%tile47_2, 14) { sym_name = "lock472_14" }

// timing locks
  %lock456_14 = AIE.lock(%tile45_6, 14) { sym_name = "lock456_14" }
  %lock476_14 = AIE.lock(%tile47_6, 14) { sym_name = "lock476_14" }

//---Generating B0 buffers---*-
  %block_0_buf_in_shim_2 = AIE.objectFifo.createObjectFifo(%tile2_0,{%tile0_1,%tile1_1,%tile0_2,%tile1_2,%tile0_3,%tile1_3,%tile0_4,%tile1_4},9) { sym_name = "block_0_buf_in_shim_2" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_0_buf_row_1_inter_lap= AIE.objectFifo.createObjectFifo(%tile0_1,{%tile1_1},5){ sym_name ="block_0_buf_row_1_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_0_buf_row_1_inter_flx1= AIE.objectFifo.createObjectFifo(%tile1_1,{%tile2_1},6) { sym_name ="block_0_buf_row_1_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_0_buf_row_1_out_flx2= AIE.objectFifo.createObjectFifo(%tile2_1,{%tile2_2},2) { sym_name ="block_0_buf_row_1_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_0_buf_row_2_inter_lap= AIE.objectFifo.createObjectFifo(%tile0_2,{%tile1_2},5){ sym_name ="block_0_buf_row_2_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_0_buf_row_2_inter_flx1= AIE.objectFifo.createObjectFifo(%tile1_2,{%tile2_2},6) { sym_name ="block_0_buf_row_2_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_0_buf_out_shim_2= AIE.objectFifo.createObjectFifo(%tile2_2,{%tile2_0},5){ sym_name ="block_0_buf_out_shim_2"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_0_buf_row_3_inter_lap= AIE.objectFifo.createObjectFifo(%tile0_3,{%tile1_3},5){ sym_name ="block_0_buf_row_3_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_0_buf_row_3_inter_flx1= AIE.objectFifo.createObjectFifo(%tile1_3,{%tile2_3},6) { sym_name ="block_0_buf_row_3_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_0_buf_row_3_out_flx2= AIE.objectFifo.createObjectFifo(%tile2_3,{%tile2_2},2) { sym_name ="block_0_buf_row_3_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_0_buf_row_4_inter_lap= AIE.objectFifo.createObjectFifo(%tile0_4,{%tile1_4},5){ sym_name ="block_0_buf_row_4_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_0_buf_row_4_inter_flx1= AIE.objectFifo.createObjectFifo(%tile1_4,{%tile2_4},6) { sym_name ="block_0_buf_row_4_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_0_buf_row_4_out_flx2= AIE.objectFifo.createObjectFifo(%tile2_4,{%tile2_2},2) { sym_name ="block_0_buf_row_4_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B1 buffers---*-
  %block_1_buf_in_shim_2 = AIE.objectFifo.createObjectFifo(%tile2_0,{%tile0_5,%tile1_5,%tile0_6,%tile1_6,%tile0_7,%tile1_7,%tile0_8,%tile1_8},9) { sym_name = "block_1_buf_in_shim_2" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_1_buf_row_5_inter_lap= AIE.objectFifo.createObjectFifo(%tile0_5,{%tile1_5},5){ sym_name ="block_1_buf_row_5_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_1_buf_row_5_inter_flx1= AIE.objectFifo.createObjectFifo(%tile1_5,{%tile2_5},6) { sym_name ="block_1_buf_row_5_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_1_buf_row_5_out_flx2= AIE.objectFifo.createObjectFifo(%tile2_5,{%tile2_6},2) { sym_name ="block_1_buf_row_5_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_1_buf_row_6_inter_lap= AIE.objectFifo.createObjectFifo(%tile0_6,{%tile1_6},5){ sym_name ="block_1_buf_row_6_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_1_buf_row_6_inter_flx1= AIE.objectFifo.createObjectFifo(%tile1_6,{%tile2_6},6) { sym_name ="block_1_buf_row_6_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_1_buf_out_shim_2= AIE.objectFifo.createObjectFifo(%tile2_6,{%tile2_0},5){ sym_name ="block_1_buf_out_shim_2"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_1_buf_row_7_inter_lap= AIE.objectFifo.createObjectFifo(%tile0_7,{%tile1_7},5){ sym_name ="block_1_buf_row_7_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_1_buf_row_7_inter_flx1= AIE.objectFifo.createObjectFifo(%tile1_7,{%tile2_7},6) { sym_name ="block_1_buf_row_7_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_1_buf_row_7_out_flx2= AIE.objectFifo.createObjectFifo(%tile2_7,{%tile2_6},2) { sym_name ="block_1_buf_row_7_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_1_buf_row_8_inter_lap= AIE.objectFifo.createObjectFifo(%tile0_8,{%tile1_8},5){ sym_name ="block_1_buf_row_8_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_1_buf_row_8_inter_flx1= AIE.objectFifo.createObjectFifo(%tile1_8,{%tile2_8},6) { sym_name ="block_1_buf_row_8_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_1_buf_row_8_out_flx2= AIE.objectFifo.createObjectFifo(%tile2_8,{%tile2_6},2) { sym_name ="block_1_buf_row_8_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B2 buffers---*-
  %block_2_buf_in_shim_3 = AIE.objectFifo.createObjectFifo(%tile3_0,{%tile3_1,%tile4_1,%tile3_2,%tile4_2,%tile3_3,%tile4_3,%tile3_4,%tile4_4},9) { sym_name = "block_2_buf_in_shim_3" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_2_buf_row_1_inter_lap= AIE.objectFifo.createObjectFifo(%tile3_1,{%tile4_1},5){ sym_name ="block_2_buf_row_1_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_2_buf_row_1_inter_flx1= AIE.objectFifo.createObjectFifo(%tile4_1,{%tile5_1},6) { sym_name ="block_2_buf_row_1_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_2_buf_row_1_out_flx2= AIE.objectFifo.createObjectFifo(%tile5_1,{%tile5_2},2) { sym_name ="block_2_buf_row_1_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_2_buf_row_2_inter_lap= AIE.objectFifo.createObjectFifo(%tile3_2,{%tile4_2},5){ sym_name ="block_2_buf_row_2_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_2_buf_row_2_inter_flx1= AIE.objectFifo.createObjectFifo(%tile4_2,{%tile5_2},6) { sym_name ="block_2_buf_row_2_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_2_buf_out_shim_3= AIE.objectFifo.createObjectFifo(%tile5_2,{%tile3_0},5){ sym_name ="block_2_buf_out_shim_3"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_2_buf_row_3_inter_lap= AIE.objectFifo.createObjectFifo(%tile3_3,{%tile4_3},5){ sym_name ="block_2_buf_row_3_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_2_buf_row_3_inter_flx1= AIE.objectFifo.createObjectFifo(%tile4_3,{%tile5_3},6) { sym_name ="block_2_buf_row_3_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_2_buf_row_3_out_flx2= AIE.objectFifo.createObjectFifo(%tile5_3,{%tile5_2},2) { sym_name ="block_2_buf_row_3_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_2_buf_row_4_inter_lap= AIE.objectFifo.createObjectFifo(%tile3_4,{%tile4_4},5){ sym_name ="block_2_buf_row_4_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_2_buf_row_4_inter_flx1= AIE.objectFifo.createObjectFifo(%tile4_4,{%tile5_4},6) { sym_name ="block_2_buf_row_4_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_2_buf_row_4_out_flx2= AIE.objectFifo.createObjectFifo(%tile5_4,{%tile5_2},2) { sym_name ="block_2_buf_row_4_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B3 buffers---*-
  %block_3_buf_in_shim_3 = AIE.objectFifo.createObjectFifo(%tile3_0,{%tile3_5,%tile4_5,%tile3_6,%tile4_6,%tile3_7,%tile4_7,%tile3_8,%tile4_8},9) { sym_name = "block_3_buf_in_shim_3" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_3_buf_row_5_inter_lap= AIE.objectFifo.createObjectFifo(%tile3_5,{%tile4_5},5){ sym_name ="block_3_buf_row_5_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_3_buf_row_5_inter_flx1= AIE.objectFifo.createObjectFifo(%tile4_5,{%tile5_5},6) { sym_name ="block_3_buf_row_5_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_3_buf_row_5_out_flx2= AIE.objectFifo.createObjectFifo(%tile5_5,{%tile5_6},2) { sym_name ="block_3_buf_row_5_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_3_buf_row_6_inter_lap= AIE.objectFifo.createObjectFifo(%tile3_6,{%tile4_6},5){ sym_name ="block_3_buf_row_6_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_3_buf_row_6_inter_flx1= AIE.objectFifo.createObjectFifo(%tile4_6,{%tile5_6},6) { sym_name ="block_3_buf_row_6_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_3_buf_out_shim_3= AIE.objectFifo.createObjectFifo(%tile5_6,{%tile3_0},5){ sym_name ="block_3_buf_out_shim_3"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_3_buf_row_7_inter_lap= AIE.objectFifo.createObjectFifo(%tile3_7,{%tile4_7},5){ sym_name ="block_3_buf_row_7_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_3_buf_row_7_inter_flx1= AIE.objectFifo.createObjectFifo(%tile4_7,{%tile5_7},6) { sym_name ="block_3_buf_row_7_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_3_buf_row_7_out_flx2= AIE.objectFifo.createObjectFifo(%tile5_7,{%tile5_6},2) { sym_name ="block_3_buf_row_7_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_3_buf_row_8_inter_lap= AIE.objectFifo.createObjectFifo(%tile3_8,{%tile4_8},5){ sym_name ="block_3_buf_row_8_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_3_buf_row_8_inter_flx1= AIE.objectFifo.createObjectFifo(%tile4_8,{%tile5_8},6) { sym_name ="block_3_buf_row_8_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_3_buf_row_8_out_flx2= AIE.objectFifo.createObjectFifo(%tile5_8,{%tile5_6},2) { sym_name ="block_3_buf_row_8_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B4 buffers---*-
  %block_4_buf_in_shim_6 = AIE.objectFifo.createObjectFifo(%tile6_0,{%tile6_1,%tile7_1,%tile6_2,%tile7_2,%tile6_3,%tile7_3,%tile6_4,%tile7_4},9) { sym_name = "block_4_buf_in_shim_6" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_4_buf_row_1_inter_lap= AIE.objectFifo.createObjectFifo(%tile6_1,{%tile7_1},5){ sym_name ="block_4_buf_row_1_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_4_buf_row_1_inter_flx1= AIE.objectFifo.createObjectFifo(%tile7_1,{%tile8_1},6) { sym_name ="block_4_buf_row_1_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_4_buf_row_1_out_flx2= AIE.objectFifo.createObjectFifo(%tile8_1,{%tile8_2},2) { sym_name ="block_4_buf_row_1_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_4_buf_row_2_inter_lap= AIE.objectFifo.createObjectFifo(%tile6_2,{%tile7_2},5){ sym_name ="block_4_buf_row_2_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_4_buf_row_2_inter_flx1= AIE.objectFifo.createObjectFifo(%tile7_2,{%tile8_2},6) { sym_name ="block_4_buf_row_2_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_4_buf_out_shim_6= AIE.objectFifo.createObjectFifo(%tile8_2,{%tile6_0},5){ sym_name ="block_4_buf_out_shim_6"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_4_buf_row_3_inter_lap= AIE.objectFifo.createObjectFifo(%tile6_3,{%tile7_3},5){ sym_name ="block_4_buf_row_3_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_4_buf_row_3_inter_flx1= AIE.objectFifo.createObjectFifo(%tile7_3,{%tile8_3},6) { sym_name ="block_4_buf_row_3_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_4_buf_row_3_out_flx2= AIE.objectFifo.createObjectFifo(%tile8_3,{%tile8_2},2) { sym_name ="block_4_buf_row_3_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_4_buf_row_4_inter_lap= AIE.objectFifo.createObjectFifo(%tile6_4,{%tile7_4},5){ sym_name ="block_4_buf_row_4_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_4_buf_row_4_inter_flx1= AIE.objectFifo.createObjectFifo(%tile7_4,{%tile8_4},6) { sym_name ="block_4_buf_row_4_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_4_buf_row_4_out_flx2= AIE.objectFifo.createObjectFifo(%tile8_4,{%tile8_2},2) { sym_name ="block_4_buf_row_4_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B5 buffers---*-
  %block_5_buf_in_shim_6 = AIE.objectFifo.createObjectFifo(%tile6_0,{%tile6_5,%tile7_5,%tile6_6,%tile7_6,%tile6_7,%tile7_7,%tile6_8,%tile7_8},9) { sym_name = "block_5_buf_in_shim_6" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_5_buf_row_5_inter_lap= AIE.objectFifo.createObjectFifo(%tile6_5,{%tile7_5},5){ sym_name ="block_5_buf_row_5_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_5_buf_row_5_inter_flx1= AIE.objectFifo.createObjectFifo(%tile7_5,{%tile8_5},6) { sym_name ="block_5_buf_row_5_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_5_buf_row_5_out_flx2= AIE.objectFifo.createObjectFifo(%tile8_5,{%tile8_6},2) { sym_name ="block_5_buf_row_5_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_5_buf_row_6_inter_lap= AIE.objectFifo.createObjectFifo(%tile6_6,{%tile7_6},5){ sym_name ="block_5_buf_row_6_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_5_buf_row_6_inter_flx1= AIE.objectFifo.createObjectFifo(%tile7_6,{%tile8_6},6) { sym_name ="block_5_buf_row_6_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_5_buf_out_shim_6= AIE.objectFifo.createObjectFifo(%tile8_6,{%tile6_0},5){ sym_name ="block_5_buf_out_shim_6"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_5_buf_row_7_inter_lap= AIE.objectFifo.createObjectFifo(%tile6_7,{%tile7_7},5){ sym_name ="block_5_buf_row_7_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_5_buf_row_7_inter_flx1= AIE.objectFifo.createObjectFifo(%tile7_7,{%tile8_7},6) { sym_name ="block_5_buf_row_7_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_5_buf_row_7_out_flx2= AIE.objectFifo.createObjectFifo(%tile8_7,{%tile8_6},2) { sym_name ="block_5_buf_row_7_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_5_buf_row_8_inter_lap= AIE.objectFifo.createObjectFifo(%tile6_8,{%tile7_8},5){ sym_name ="block_5_buf_row_8_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_5_buf_row_8_inter_flx1= AIE.objectFifo.createObjectFifo(%tile7_8,{%tile8_8},6) { sym_name ="block_5_buf_row_8_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_5_buf_row_8_out_flx2= AIE.objectFifo.createObjectFifo(%tile8_8,{%tile8_6},2) { sym_name ="block_5_buf_row_8_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B6 buffers---*-
  %block_6_buf_in_shim_7 = AIE.objectFifo.createObjectFifo(%tile7_0,{%tile9_1,%tile10_1,%tile9_2,%tile10_2,%tile9_3,%tile10_3,%tile9_4,%tile10_4},9) { sym_name = "block_6_buf_in_shim_7" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_6_buf_row_1_inter_lap= AIE.objectFifo.createObjectFifo(%tile9_1,{%tile10_1},5){ sym_name ="block_6_buf_row_1_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_6_buf_row_1_inter_flx1= AIE.objectFifo.createObjectFifo(%tile10_1,{%tile11_1},6) { sym_name ="block_6_buf_row_1_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_6_buf_row_1_out_flx2= AIE.objectFifo.createObjectFifo(%tile11_1,{%tile11_2},2) { sym_name ="block_6_buf_row_1_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_6_buf_row_2_inter_lap= AIE.objectFifo.createObjectFifo(%tile9_2,{%tile10_2},5){ sym_name ="block_6_buf_row_2_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_6_buf_row_2_inter_flx1= AIE.objectFifo.createObjectFifo(%tile10_2,{%tile11_2},6) { sym_name ="block_6_buf_row_2_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_6_buf_out_shim_7= AIE.objectFifo.createObjectFifo(%tile11_2,{%tile7_0},5){ sym_name ="block_6_buf_out_shim_7"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_6_buf_row_3_inter_lap= AIE.objectFifo.createObjectFifo(%tile9_3,{%tile10_3},5){ sym_name ="block_6_buf_row_3_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_6_buf_row_3_inter_flx1= AIE.objectFifo.createObjectFifo(%tile10_3,{%tile11_3},6) { sym_name ="block_6_buf_row_3_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_6_buf_row_3_out_flx2= AIE.objectFifo.createObjectFifo(%tile11_3,{%tile11_2},2) { sym_name ="block_6_buf_row_3_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_6_buf_row_4_inter_lap= AIE.objectFifo.createObjectFifo(%tile9_4,{%tile10_4},5){ sym_name ="block_6_buf_row_4_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_6_buf_row_4_inter_flx1= AIE.objectFifo.createObjectFifo(%tile10_4,{%tile11_4},6) { sym_name ="block_6_buf_row_4_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_6_buf_row_4_out_flx2= AIE.objectFifo.createObjectFifo(%tile11_4,{%tile11_2},2) { sym_name ="block_6_buf_row_4_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B7 buffers---*-
  %block_7_buf_in_shim_7 = AIE.objectFifo.createObjectFifo(%tile7_0,{%tile9_5,%tile10_5,%tile9_6,%tile10_6,%tile9_7,%tile10_7,%tile9_8,%tile10_8},9) { sym_name = "block_7_buf_in_shim_7" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_7_buf_row_5_inter_lap= AIE.objectFifo.createObjectFifo(%tile9_5,{%tile10_5},5){ sym_name ="block_7_buf_row_5_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_7_buf_row_5_inter_flx1= AIE.objectFifo.createObjectFifo(%tile10_5,{%tile11_5},6) { sym_name ="block_7_buf_row_5_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_7_buf_row_5_out_flx2= AIE.objectFifo.createObjectFifo(%tile11_5,{%tile11_6},2) { sym_name ="block_7_buf_row_5_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_7_buf_row_6_inter_lap= AIE.objectFifo.createObjectFifo(%tile9_6,{%tile10_6},5){ sym_name ="block_7_buf_row_6_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_7_buf_row_6_inter_flx1= AIE.objectFifo.createObjectFifo(%tile10_6,{%tile11_6},6) { sym_name ="block_7_buf_row_6_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_7_buf_out_shim_7= AIE.objectFifo.createObjectFifo(%tile11_6,{%tile7_0},5){ sym_name ="block_7_buf_out_shim_7"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_7_buf_row_7_inter_lap= AIE.objectFifo.createObjectFifo(%tile9_7,{%tile10_7},5){ sym_name ="block_7_buf_row_7_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_7_buf_row_7_inter_flx1= AIE.objectFifo.createObjectFifo(%tile10_7,{%tile11_7},6) { sym_name ="block_7_buf_row_7_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_7_buf_row_7_out_flx2= AIE.objectFifo.createObjectFifo(%tile11_7,{%tile11_6},2) { sym_name ="block_7_buf_row_7_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_7_buf_row_8_inter_lap= AIE.objectFifo.createObjectFifo(%tile9_8,{%tile10_8},5){ sym_name ="block_7_buf_row_8_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_7_buf_row_8_inter_flx1= AIE.objectFifo.createObjectFifo(%tile10_8,{%tile11_8},6) { sym_name ="block_7_buf_row_8_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_7_buf_row_8_out_flx2= AIE.objectFifo.createObjectFifo(%tile11_8,{%tile11_6},2) { sym_name ="block_7_buf_row_8_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B8 buffers---*-
  %block_8_buf_in_shim_10 = AIE.objectFifo.createObjectFifo(%tile10_0,{%tile12_1,%tile13_1,%tile12_2,%tile13_2,%tile12_3,%tile13_3,%tile12_4,%tile13_4},9) { sym_name = "block_8_buf_in_shim_10" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_8_buf_row_1_inter_lap= AIE.objectFifo.createObjectFifo(%tile12_1,{%tile13_1},5){ sym_name ="block_8_buf_row_1_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_8_buf_row_1_inter_flx1= AIE.objectFifo.createObjectFifo(%tile13_1,{%tile14_1},6) { sym_name ="block_8_buf_row_1_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_8_buf_row_1_out_flx2= AIE.objectFifo.createObjectFifo(%tile14_1,{%tile14_2},2) { sym_name ="block_8_buf_row_1_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_8_buf_row_2_inter_lap= AIE.objectFifo.createObjectFifo(%tile12_2,{%tile13_2},5){ sym_name ="block_8_buf_row_2_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_8_buf_row_2_inter_flx1= AIE.objectFifo.createObjectFifo(%tile13_2,{%tile14_2},6) { sym_name ="block_8_buf_row_2_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_8_buf_out_shim_10= AIE.objectFifo.createObjectFifo(%tile14_2,{%tile10_0},5){ sym_name ="block_8_buf_out_shim_10"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_8_buf_row_3_inter_lap= AIE.objectFifo.createObjectFifo(%tile12_3,{%tile13_3},5){ sym_name ="block_8_buf_row_3_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_8_buf_row_3_inter_flx1= AIE.objectFifo.createObjectFifo(%tile13_3,{%tile14_3},6) { sym_name ="block_8_buf_row_3_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_8_buf_row_3_out_flx2= AIE.objectFifo.createObjectFifo(%tile14_3,{%tile14_2},2) { sym_name ="block_8_buf_row_3_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_8_buf_row_4_inter_lap= AIE.objectFifo.createObjectFifo(%tile12_4,{%tile13_4},5){ sym_name ="block_8_buf_row_4_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_8_buf_row_4_inter_flx1= AIE.objectFifo.createObjectFifo(%tile13_4,{%tile14_4},6) { sym_name ="block_8_buf_row_4_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_8_buf_row_4_out_flx2= AIE.objectFifo.createObjectFifo(%tile14_4,{%tile14_2},2) { sym_name ="block_8_buf_row_4_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B9 buffers---*-
  %block_9_buf_in_shim_10 = AIE.objectFifo.createObjectFifo(%tile10_0,{%tile12_5,%tile13_5,%tile12_6,%tile13_6,%tile12_7,%tile13_7,%tile12_8,%tile13_8},9) { sym_name = "block_9_buf_in_shim_10" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_9_buf_row_5_inter_lap= AIE.objectFifo.createObjectFifo(%tile12_5,{%tile13_5},5){ sym_name ="block_9_buf_row_5_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_9_buf_row_5_inter_flx1= AIE.objectFifo.createObjectFifo(%tile13_5,{%tile14_5},6) { sym_name ="block_9_buf_row_5_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_9_buf_row_5_out_flx2= AIE.objectFifo.createObjectFifo(%tile14_5,{%tile14_6},2) { sym_name ="block_9_buf_row_5_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_9_buf_row_6_inter_lap= AIE.objectFifo.createObjectFifo(%tile12_6,{%tile13_6},5){ sym_name ="block_9_buf_row_6_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_9_buf_row_6_inter_flx1= AIE.objectFifo.createObjectFifo(%tile13_6,{%tile14_6},6) { sym_name ="block_9_buf_row_6_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_9_buf_out_shim_10= AIE.objectFifo.createObjectFifo(%tile14_6,{%tile10_0},5){ sym_name ="block_9_buf_out_shim_10"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_9_buf_row_7_inter_lap= AIE.objectFifo.createObjectFifo(%tile12_7,{%tile13_7},5){ sym_name ="block_9_buf_row_7_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_9_buf_row_7_inter_flx1= AIE.objectFifo.createObjectFifo(%tile13_7,{%tile14_7},6) { sym_name ="block_9_buf_row_7_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_9_buf_row_7_out_flx2= AIE.objectFifo.createObjectFifo(%tile14_7,{%tile14_6},2) { sym_name ="block_9_buf_row_7_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_9_buf_row_8_inter_lap= AIE.objectFifo.createObjectFifo(%tile12_8,{%tile13_8},5){ sym_name ="block_9_buf_row_8_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_9_buf_row_8_inter_flx1= AIE.objectFifo.createObjectFifo(%tile13_8,{%tile14_8},6) { sym_name ="block_9_buf_row_8_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_9_buf_row_8_out_flx2= AIE.objectFifo.createObjectFifo(%tile14_8,{%tile14_6},2) { sym_name ="block_9_buf_row_8_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B10 buffers---*-
  %block_10_buf_in_shim_11 = AIE.objectFifo.createObjectFifo(%tile11_0,{%tile15_1,%tile16_1,%tile15_2,%tile16_2,%tile15_3,%tile16_3,%tile15_4,%tile16_4},9) { sym_name = "block_10_buf_in_shim_11" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_10_buf_row_1_inter_lap= AIE.objectFifo.createObjectFifo(%tile15_1,{%tile16_1},5){ sym_name ="block_10_buf_row_1_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_10_buf_row_1_inter_flx1= AIE.objectFifo.createObjectFifo(%tile16_1,{%tile17_1},6) { sym_name ="block_10_buf_row_1_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_10_buf_row_1_out_flx2= AIE.objectFifo.createObjectFifo(%tile17_1,{%tile17_2},2) { sym_name ="block_10_buf_row_1_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_10_buf_row_2_inter_lap= AIE.objectFifo.createObjectFifo(%tile15_2,{%tile16_2},5){ sym_name ="block_10_buf_row_2_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_10_buf_row_2_inter_flx1= AIE.objectFifo.createObjectFifo(%tile16_2,{%tile17_2},6) { sym_name ="block_10_buf_row_2_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_10_buf_out_shim_11= AIE.objectFifo.createObjectFifo(%tile17_2,{%tile11_0},5){ sym_name ="block_10_buf_out_shim_11"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_10_buf_row_3_inter_lap= AIE.objectFifo.createObjectFifo(%tile15_3,{%tile16_3},5){ sym_name ="block_10_buf_row_3_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_10_buf_row_3_inter_flx1= AIE.objectFifo.createObjectFifo(%tile16_3,{%tile17_3},6) { sym_name ="block_10_buf_row_3_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_10_buf_row_3_out_flx2= AIE.objectFifo.createObjectFifo(%tile17_3,{%tile17_2},2) { sym_name ="block_10_buf_row_3_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_10_buf_row_4_inter_lap= AIE.objectFifo.createObjectFifo(%tile15_4,{%tile16_4},5){ sym_name ="block_10_buf_row_4_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_10_buf_row_4_inter_flx1= AIE.objectFifo.createObjectFifo(%tile16_4,{%tile17_4},6) { sym_name ="block_10_buf_row_4_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_10_buf_row_4_out_flx2= AIE.objectFifo.createObjectFifo(%tile17_4,{%tile17_2},2) { sym_name ="block_10_buf_row_4_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B11 buffers---*-
  %block_11_buf_in_shim_11 = AIE.objectFifo.createObjectFifo(%tile11_0,{%tile15_5,%tile16_5,%tile15_6,%tile16_6,%tile15_7,%tile16_7,%tile15_8,%tile16_8},9) { sym_name = "block_11_buf_in_shim_11" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_11_buf_row_5_inter_lap= AIE.objectFifo.createObjectFifo(%tile15_5,{%tile16_5},5){ sym_name ="block_11_buf_row_5_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_11_buf_row_5_inter_flx1= AIE.objectFifo.createObjectFifo(%tile16_5,{%tile17_5},6) { sym_name ="block_11_buf_row_5_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_11_buf_row_5_out_flx2= AIE.objectFifo.createObjectFifo(%tile17_5,{%tile17_6},2) { sym_name ="block_11_buf_row_5_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_11_buf_row_6_inter_lap= AIE.objectFifo.createObjectFifo(%tile15_6,{%tile16_6},5){ sym_name ="block_11_buf_row_6_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_11_buf_row_6_inter_flx1= AIE.objectFifo.createObjectFifo(%tile16_6,{%tile17_6},6) { sym_name ="block_11_buf_row_6_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_11_buf_out_shim_11= AIE.objectFifo.createObjectFifo(%tile17_6,{%tile11_0},5){ sym_name ="block_11_buf_out_shim_11"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_11_buf_row_7_inter_lap= AIE.objectFifo.createObjectFifo(%tile15_7,{%tile16_7},5){ sym_name ="block_11_buf_row_7_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_11_buf_row_7_inter_flx1= AIE.objectFifo.createObjectFifo(%tile16_7,{%tile17_7},6) { sym_name ="block_11_buf_row_7_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_11_buf_row_7_out_flx2= AIE.objectFifo.createObjectFifo(%tile17_7,{%tile17_6},2) { sym_name ="block_11_buf_row_7_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_11_buf_row_8_inter_lap= AIE.objectFifo.createObjectFifo(%tile15_8,{%tile16_8},5){ sym_name ="block_11_buf_row_8_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_11_buf_row_8_inter_flx1= AIE.objectFifo.createObjectFifo(%tile16_8,{%tile17_8},6) { sym_name ="block_11_buf_row_8_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_11_buf_row_8_out_flx2= AIE.objectFifo.createObjectFifo(%tile17_8,{%tile17_6},2) { sym_name ="block_11_buf_row_8_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B12 buffers---*-
  %block_12_buf_in_shim_18 = AIE.objectFifo.createObjectFifo(%tile18_0,{%tile18_1,%tile19_1,%tile18_2,%tile19_2,%tile18_3,%tile19_3,%tile18_4,%tile19_4},9) { sym_name = "block_12_buf_in_shim_18" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_12_buf_row_1_inter_lap= AIE.objectFifo.createObjectFifo(%tile18_1,{%tile19_1},5){ sym_name ="block_12_buf_row_1_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_12_buf_row_1_inter_flx1= AIE.objectFifo.createObjectFifo(%tile19_1,{%tile20_1},6) { sym_name ="block_12_buf_row_1_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_12_buf_row_1_out_flx2= AIE.objectFifo.createObjectFifo(%tile20_1,{%tile20_2},2) { sym_name ="block_12_buf_row_1_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_12_buf_row_2_inter_lap= AIE.objectFifo.createObjectFifo(%tile18_2,{%tile19_2},5){ sym_name ="block_12_buf_row_2_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_12_buf_row_2_inter_flx1= AIE.objectFifo.createObjectFifo(%tile19_2,{%tile20_2},6) { sym_name ="block_12_buf_row_2_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_12_buf_out_shim_18= AIE.objectFifo.createObjectFifo(%tile20_2,{%tile18_0},5){ sym_name ="block_12_buf_out_shim_18"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_12_buf_row_3_inter_lap= AIE.objectFifo.createObjectFifo(%tile18_3,{%tile19_3},5){ sym_name ="block_12_buf_row_3_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_12_buf_row_3_inter_flx1= AIE.objectFifo.createObjectFifo(%tile19_3,{%tile20_3},6) { sym_name ="block_12_buf_row_3_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_12_buf_row_3_out_flx2= AIE.objectFifo.createObjectFifo(%tile20_3,{%tile20_2},2) { sym_name ="block_12_buf_row_3_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_12_buf_row_4_inter_lap= AIE.objectFifo.createObjectFifo(%tile18_4,{%tile19_4},5){ sym_name ="block_12_buf_row_4_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_12_buf_row_4_inter_flx1= AIE.objectFifo.createObjectFifo(%tile19_4,{%tile20_4},6) { sym_name ="block_12_buf_row_4_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_12_buf_row_4_out_flx2= AIE.objectFifo.createObjectFifo(%tile20_4,{%tile20_2},2) { sym_name ="block_12_buf_row_4_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B13 buffers---*-
  %block_13_buf_in_shim_18 = AIE.objectFifo.createObjectFifo(%tile18_0,{%tile18_5,%tile19_5,%tile18_6,%tile19_6,%tile18_7,%tile19_7,%tile18_8,%tile19_8},9) { sym_name = "block_13_buf_in_shim_18" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_13_buf_row_5_inter_lap= AIE.objectFifo.createObjectFifo(%tile18_5,{%tile19_5},5){ sym_name ="block_13_buf_row_5_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_13_buf_row_5_inter_flx1= AIE.objectFifo.createObjectFifo(%tile19_5,{%tile20_5},6) { sym_name ="block_13_buf_row_5_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_13_buf_row_5_out_flx2= AIE.objectFifo.createObjectFifo(%tile20_5,{%tile20_6},2) { sym_name ="block_13_buf_row_5_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_13_buf_row_6_inter_lap= AIE.objectFifo.createObjectFifo(%tile18_6,{%tile19_6},5){ sym_name ="block_13_buf_row_6_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_13_buf_row_6_inter_flx1= AIE.objectFifo.createObjectFifo(%tile19_6,{%tile20_6},6) { sym_name ="block_13_buf_row_6_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_13_buf_out_shim_18= AIE.objectFifo.createObjectFifo(%tile20_6,{%tile18_0},5){ sym_name ="block_13_buf_out_shim_18"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_13_buf_row_7_inter_lap= AIE.objectFifo.createObjectFifo(%tile18_7,{%tile19_7},5){ sym_name ="block_13_buf_row_7_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_13_buf_row_7_inter_flx1= AIE.objectFifo.createObjectFifo(%tile19_7,{%tile20_7},6) { sym_name ="block_13_buf_row_7_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_13_buf_row_7_out_flx2= AIE.objectFifo.createObjectFifo(%tile20_7,{%tile20_6},2) { sym_name ="block_13_buf_row_7_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_13_buf_row_8_inter_lap= AIE.objectFifo.createObjectFifo(%tile18_8,{%tile19_8},5){ sym_name ="block_13_buf_row_8_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_13_buf_row_8_inter_flx1= AIE.objectFifo.createObjectFifo(%tile19_8,{%tile20_8},6) { sym_name ="block_13_buf_row_8_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_13_buf_row_8_out_flx2= AIE.objectFifo.createObjectFifo(%tile20_8,{%tile20_6},2) { sym_name ="block_13_buf_row_8_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B14 buffers---*-
  %block_14_buf_in_shim_19 = AIE.objectFifo.createObjectFifo(%tile19_0,{%tile21_1,%tile22_1,%tile21_2,%tile22_2,%tile21_3,%tile22_3,%tile21_4,%tile22_4},9) { sym_name = "block_14_buf_in_shim_19" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_14_buf_row_1_inter_lap= AIE.objectFifo.createObjectFifo(%tile21_1,{%tile22_1},5){ sym_name ="block_14_buf_row_1_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_14_buf_row_1_inter_flx1= AIE.objectFifo.createObjectFifo(%tile22_1,{%tile23_1},6) { sym_name ="block_14_buf_row_1_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_14_buf_row_1_out_flx2= AIE.objectFifo.createObjectFifo(%tile23_1,{%tile23_2},2) { sym_name ="block_14_buf_row_1_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_14_buf_row_2_inter_lap= AIE.objectFifo.createObjectFifo(%tile21_2,{%tile22_2},5){ sym_name ="block_14_buf_row_2_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_14_buf_row_2_inter_flx1= AIE.objectFifo.createObjectFifo(%tile22_2,{%tile23_2},6) { sym_name ="block_14_buf_row_2_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_14_buf_out_shim_19= AIE.objectFifo.createObjectFifo(%tile23_2,{%tile19_0},5){ sym_name ="block_14_buf_out_shim_19"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_14_buf_row_3_inter_lap= AIE.objectFifo.createObjectFifo(%tile21_3,{%tile22_3},5){ sym_name ="block_14_buf_row_3_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_14_buf_row_3_inter_flx1= AIE.objectFifo.createObjectFifo(%tile22_3,{%tile23_3},6) { sym_name ="block_14_buf_row_3_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_14_buf_row_3_out_flx2= AIE.objectFifo.createObjectFifo(%tile23_3,{%tile23_2},2) { sym_name ="block_14_buf_row_3_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_14_buf_row_4_inter_lap= AIE.objectFifo.createObjectFifo(%tile21_4,{%tile22_4},5){ sym_name ="block_14_buf_row_4_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_14_buf_row_4_inter_flx1= AIE.objectFifo.createObjectFifo(%tile22_4,{%tile23_4},6) { sym_name ="block_14_buf_row_4_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_14_buf_row_4_out_flx2= AIE.objectFifo.createObjectFifo(%tile23_4,{%tile23_2},2) { sym_name ="block_14_buf_row_4_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B15 buffers---*-
  %block_15_buf_in_shim_19 = AIE.objectFifo.createObjectFifo(%tile19_0,{%tile21_5,%tile22_5,%tile21_6,%tile22_6,%tile21_7,%tile22_7,%tile21_8,%tile22_8},9) { sym_name = "block_15_buf_in_shim_19" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_15_buf_row_5_inter_lap= AIE.objectFifo.createObjectFifo(%tile21_5,{%tile22_5},5){ sym_name ="block_15_buf_row_5_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_15_buf_row_5_inter_flx1= AIE.objectFifo.createObjectFifo(%tile22_5,{%tile23_5},6) { sym_name ="block_15_buf_row_5_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_15_buf_row_5_out_flx2= AIE.objectFifo.createObjectFifo(%tile23_5,{%tile23_6},2) { sym_name ="block_15_buf_row_5_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_15_buf_row_6_inter_lap= AIE.objectFifo.createObjectFifo(%tile21_6,{%tile22_6},5){ sym_name ="block_15_buf_row_6_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_15_buf_row_6_inter_flx1= AIE.objectFifo.createObjectFifo(%tile22_6,{%tile23_6},6) { sym_name ="block_15_buf_row_6_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_15_buf_out_shim_19= AIE.objectFifo.createObjectFifo(%tile23_6,{%tile19_0},5){ sym_name ="block_15_buf_out_shim_19"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_15_buf_row_7_inter_lap= AIE.objectFifo.createObjectFifo(%tile21_7,{%tile22_7},5){ sym_name ="block_15_buf_row_7_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_15_buf_row_7_inter_flx1= AIE.objectFifo.createObjectFifo(%tile22_7,{%tile23_7},6) { sym_name ="block_15_buf_row_7_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_15_buf_row_7_out_flx2= AIE.objectFifo.createObjectFifo(%tile23_7,{%tile23_6},2) { sym_name ="block_15_buf_row_7_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_15_buf_row_8_inter_lap= AIE.objectFifo.createObjectFifo(%tile21_8,{%tile22_8},5){ sym_name ="block_15_buf_row_8_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_15_buf_row_8_inter_flx1= AIE.objectFifo.createObjectFifo(%tile22_8,{%tile23_8},6) { sym_name ="block_15_buf_row_8_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_15_buf_row_8_out_flx2= AIE.objectFifo.createObjectFifo(%tile23_8,{%tile23_6},2) { sym_name ="block_15_buf_row_8_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B16 buffers---*-
  %block_16_buf_in_shim_26 = AIE.objectFifo.createObjectFifo(%tile26_0,{%tile24_1,%tile25_1,%tile24_2,%tile25_2,%tile24_3,%tile25_3,%tile24_4,%tile25_4},9) { sym_name = "block_16_buf_in_shim_26" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_16_buf_row_1_inter_lap= AIE.objectFifo.createObjectFifo(%tile24_1,{%tile25_1},5){ sym_name ="block_16_buf_row_1_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_16_buf_row_1_inter_flx1= AIE.objectFifo.createObjectFifo(%tile25_1,{%tile26_1},6) { sym_name ="block_16_buf_row_1_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_16_buf_row_1_out_flx2= AIE.objectFifo.createObjectFifo(%tile26_1,{%tile26_2},2) { sym_name ="block_16_buf_row_1_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_16_buf_row_2_inter_lap= AIE.objectFifo.createObjectFifo(%tile24_2,{%tile25_2},5){ sym_name ="block_16_buf_row_2_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_16_buf_row_2_inter_flx1= AIE.objectFifo.createObjectFifo(%tile25_2,{%tile26_2},6) { sym_name ="block_16_buf_row_2_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_16_buf_out_shim_26= AIE.objectFifo.createObjectFifo(%tile26_2,{%tile26_0},5){ sym_name ="block_16_buf_out_shim_26"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_16_buf_row_3_inter_lap= AIE.objectFifo.createObjectFifo(%tile24_3,{%tile25_3},5){ sym_name ="block_16_buf_row_3_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_16_buf_row_3_inter_flx1= AIE.objectFifo.createObjectFifo(%tile25_3,{%tile26_3},6) { sym_name ="block_16_buf_row_3_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_16_buf_row_3_out_flx2= AIE.objectFifo.createObjectFifo(%tile26_3,{%tile26_2},2) { sym_name ="block_16_buf_row_3_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_16_buf_row_4_inter_lap= AIE.objectFifo.createObjectFifo(%tile24_4,{%tile25_4},5){ sym_name ="block_16_buf_row_4_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_16_buf_row_4_inter_flx1= AIE.objectFifo.createObjectFifo(%tile25_4,{%tile26_4},6) { sym_name ="block_16_buf_row_4_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_16_buf_row_4_out_flx2= AIE.objectFifo.createObjectFifo(%tile26_4,{%tile26_2},2) { sym_name ="block_16_buf_row_4_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B17 buffers---*-
  %block_17_buf_in_shim_26 = AIE.objectFifo.createObjectFifo(%tile26_0,{%tile24_5,%tile25_5,%tile24_6,%tile25_6,%tile24_7,%tile25_7,%tile24_8,%tile25_8},9) { sym_name = "block_17_buf_in_shim_26" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_17_buf_row_5_inter_lap= AIE.objectFifo.createObjectFifo(%tile24_5,{%tile25_5},5){ sym_name ="block_17_buf_row_5_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_17_buf_row_5_inter_flx1= AIE.objectFifo.createObjectFifo(%tile25_5,{%tile26_5},6) { sym_name ="block_17_buf_row_5_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_17_buf_row_5_out_flx2= AIE.objectFifo.createObjectFifo(%tile26_5,{%tile26_6},2) { sym_name ="block_17_buf_row_5_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_17_buf_row_6_inter_lap= AIE.objectFifo.createObjectFifo(%tile24_6,{%tile25_6},5){ sym_name ="block_17_buf_row_6_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_17_buf_row_6_inter_flx1= AIE.objectFifo.createObjectFifo(%tile25_6,{%tile26_6},6) { sym_name ="block_17_buf_row_6_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_17_buf_out_shim_26= AIE.objectFifo.createObjectFifo(%tile26_6,{%tile26_0},5){ sym_name ="block_17_buf_out_shim_26"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_17_buf_row_7_inter_lap= AIE.objectFifo.createObjectFifo(%tile24_7,{%tile25_7},5){ sym_name ="block_17_buf_row_7_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_17_buf_row_7_inter_flx1= AIE.objectFifo.createObjectFifo(%tile25_7,{%tile26_7},6) { sym_name ="block_17_buf_row_7_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_17_buf_row_7_out_flx2= AIE.objectFifo.createObjectFifo(%tile26_7,{%tile26_6},2) { sym_name ="block_17_buf_row_7_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_17_buf_row_8_inter_lap= AIE.objectFifo.createObjectFifo(%tile24_8,{%tile25_8},5){ sym_name ="block_17_buf_row_8_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_17_buf_row_8_inter_flx1= AIE.objectFifo.createObjectFifo(%tile25_8,{%tile26_8},6) { sym_name ="block_17_buf_row_8_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_17_buf_row_8_out_flx2= AIE.objectFifo.createObjectFifo(%tile26_8,{%tile26_6},2) { sym_name ="block_17_buf_row_8_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B18 buffers---*-
  %block_18_buf_in_shim_27 = AIE.objectFifo.createObjectFifo(%tile27_0,{%tile27_1,%tile28_1,%tile27_2,%tile28_2,%tile27_3,%tile28_3,%tile27_4,%tile28_4},9) { sym_name = "block_18_buf_in_shim_27" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_18_buf_row_1_inter_lap= AIE.objectFifo.createObjectFifo(%tile27_1,{%tile28_1},5){ sym_name ="block_18_buf_row_1_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_18_buf_row_1_inter_flx1= AIE.objectFifo.createObjectFifo(%tile28_1,{%tile29_1},6) { sym_name ="block_18_buf_row_1_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_18_buf_row_1_out_flx2= AIE.objectFifo.createObjectFifo(%tile29_1,{%tile29_2},2) { sym_name ="block_18_buf_row_1_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_18_buf_row_2_inter_lap= AIE.objectFifo.createObjectFifo(%tile27_2,{%tile28_2},5){ sym_name ="block_18_buf_row_2_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_18_buf_row_2_inter_flx1= AIE.objectFifo.createObjectFifo(%tile28_2,{%tile29_2},6) { sym_name ="block_18_buf_row_2_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_18_buf_out_shim_27= AIE.objectFifo.createObjectFifo(%tile29_2,{%tile27_0},5){ sym_name ="block_18_buf_out_shim_27"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_18_buf_row_3_inter_lap= AIE.objectFifo.createObjectFifo(%tile27_3,{%tile28_3},5){ sym_name ="block_18_buf_row_3_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_18_buf_row_3_inter_flx1= AIE.objectFifo.createObjectFifo(%tile28_3,{%tile29_3},6) { sym_name ="block_18_buf_row_3_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_18_buf_row_3_out_flx2= AIE.objectFifo.createObjectFifo(%tile29_3,{%tile29_2},2) { sym_name ="block_18_buf_row_3_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_18_buf_row_4_inter_lap= AIE.objectFifo.createObjectFifo(%tile27_4,{%tile28_4},5){ sym_name ="block_18_buf_row_4_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_18_buf_row_4_inter_flx1= AIE.objectFifo.createObjectFifo(%tile28_4,{%tile29_4},6) { sym_name ="block_18_buf_row_4_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_18_buf_row_4_out_flx2= AIE.objectFifo.createObjectFifo(%tile29_4,{%tile29_2},2) { sym_name ="block_18_buf_row_4_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B19 buffers---*-
  %block_19_buf_in_shim_27 = AIE.objectFifo.createObjectFifo(%tile27_0,{%tile27_5,%tile28_5,%tile27_6,%tile28_6,%tile27_7,%tile28_7,%tile27_8,%tile28_8},9) { sym_name = "block_19_buf_in_shim_27" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_19_buf_row_5_inter_lap= AIE.objectFifo.createObjectFifo(%tile27_5,{%tile28_5},5){ sym_name ="block_19_buf_row_5_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_19_buf_row_5_inter_flx1= AIE.objectFifo.createObjectFifo(%tile28_5,{%tile29_5},6) { sym_name ="block_19_buf_row_5_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_19_buf_row_5_out_flx2= AIE.objectFifo.createObjectFifo(%tile29_5,{%tile29_6},2) { sym_name ="block_19_buf_row_5_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_19_buf_row_6_inter_lap= AIE.objectFifo.createObjectFifo(%tile27_6,{%tile28_6},5){ sym_name ="block_19_buf_row_6_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_19_buf_row_6_inter_flx1= AIE.objectFifo.createObjectFifo(%tile28_6,{%tile29_6},6) { sym_name ="block_19_buf_row_6_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_19_buf_out_shim_27= AIE.objectFifo.createObjectFifo(%tile29_6,{%tile27_0},5){ sym_name ="block_19_buf_out_shim_27"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_19_buf_row_7_inter_lap= AIE.objectFifo.createObjectFifo(%tile27_7,{%tile28_7},5){ sym_name ="block_19_buf_row_7_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_19_buf_row_7_inter_flx1= AIE.objectFifo.createObjectFifo(%tile28_7,{%tile29_7},6) { sym_name ="block_19_buf_row_7_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_19_buf_row_7_out_flx2= AIE.objectFifo.createObjectFifo(%tile29_7,{%tile29_6},2) { sym_name ="block_19_buf_row_7_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_19_buf_row_8_inter_lap= AIE.objectFifo.createObjectFifo(%tile27_8,{%tile28_8},5){ sym_name ="block_19_buf_row_8_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_19_buf_row_8_inter_flx1= AIE.objectFifo.createObjectFifo(%tile28_8,{%tile29_8},6) { sym_name ="block_19_buf_row_8_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_19_buf_row_8_out_flx2= AIE.objectFifo.createObjectFifo(%tile29_8,{%tile29_6},2) { sym_name ="block_19_buf_row_8_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B20 buffers---*-
  %block_20_buf_in_shim_34 = AIE.objectFifo.createObjectFifo(%tile34_0,{%tile30_1,%tile31_1,%tile30_2,%tile31_2,%tile30_3,%tile31_3,%tile30_4,%tile31_4},9) { sym_name = "block_20_buf_in_shim_34" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_20_buf_row_1_inter_lap= AIE.objectFifo.createObjectFifo(%tile30_1,{%tile31_1},5){ sym_name ="block_20_buf_row_1_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_20_buf_row_1_inter_flx1= AIE.objectFifo.createObjectFifo(%tile31_1,{%tile32_1},6) { sym_name ="block_20_buf_row_1_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_20_buf_row_1_out_flx2= AIE.objectFifo.createObjectFifo(%tile32_1,{%tile32_2},2) { sym_name ="block_20_buf_row_1_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_20_buf_row_2_inter_lap= AIE.objectFifo.createObjectFifo(%tile30_2,{%tile31_2},5){ sym_name ="block_20_buf_row_2_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_20_buf_row_2_inter_flx1= AIE.objectFifo.createObjectFifo(%tile31_2,{%tile32_2},6) { sym_name ="block_20_buf_row_2_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_20_buf_out_shim_34= AIE.objectFifo.createObjectFifo(%tile32_2,{%tile34_0},5){ sym_name ="block_20_buf_out_shim_34"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_20_buf_row_3_inter_lap= AIE.objectFifo.createObjectFifo(%tile30_3,{%tile31_3},5){ sym_name ="block_20_buf_row_3_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_20_buf_row_3_inter_flx1= AIE.objectFifo.createObjectFifo(%tile31_3,{%tile32_3},6) { sym_name ="block_20_buf_row_3_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_20_buf_row_3_out_flx2= AIE.objectFifo.createObjectFifo(%tile32_3,{%tile32_2},2) { sym_name ="block_20_buf_row_3_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_20_buf_row_4_inter_lap= AIE.objectFifo.createObjectFifo(%tile30_4,{%tile31_4},5){ sym_name ="block_20_buf_row_4_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_20_buf_row_4_inter_flx1= AIE.objectFifo.createObjectFifo(%tile31_4,{%tile32_4},6) { sym_name ="block_20_buf_row_4_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_20_buf_row_4_out_flx2= AIE.objectFifo.createObjectFifo(%tile32_4,{%tile32_2},2) { sym_name ="block_20_buf_row_4_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B21 buffers---*-
  %block_21_buf_in_shim_34 = AIE.objectFifo.createObjectFifo(%tile34_0,{%tile30_5,%tile31_5,%tile30_6,%tile31_6,%tile30_7,%tile31_7,%tile30_8,%tile31_8},9) { sym_name = "block_21_buf_in_shim_34" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_21_buf_row_5_inter_lap= AIE.objectFifo.createObjectFifo(%tile30_5,{%tile31_5},5){ sym_name ="block_21_buf_row_5_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_21_buf_row_5_inter_flx1= AIE.objectFifo.createObjectFifo(%tile31_5,{%tile32_5},6) { sym_name ="block_21_buf_row_5_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_21_buf_row_5_out_flx2= AIE.objectFifo.createObjectFifo(%tile32_5,{%tile32_6},2) { sym_name ="block_21_buf_row_5_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_21_buf_row_6_inter_lap= AIE.objectFifo.createObjectFifo(%tile30_6,{%tile31_6},5){ sym_name ="block_21_buf_row_6_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_21_buf_row_6_inter_flx1= AIE.objectFifo.createObjectFifo(%tile31_6,{%tile32_6},6) { sym_name ="block_21_buf_row_6_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_21_buf_out_shim_34= AIE.objectFifo.createObjectFifo(%tile32_6,{%tile34_0},5){ sym_name ="block_21_buf_out_shim_34"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_21_buf_row_7_inter_lap= AIE.objectFifo.createObjectFifo(%tile30_7,{%tile31_7},5){ sym_name ="block_21_buf_row_7_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_21_buf_row_7_inter_flx1= AIE.objectFifo.createObjectFifo(%tile31_7,{%tile32_7},6) { sym_name ="block_21_buf_row_7_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_21_buf_row_7_out_flx2= AIE.objectFifo.createObjectFifo(%tile32_7,{%tile32_6},2) { sym_name ="block_21_buf_row_7_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_21_buf_row_8_inter_lap= AIE.objectFifo.createObjectFifo(%tile30_8,{%tile31_8},5){ sym_name ="block_21_buf_row_8_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_21_buf_row_8_inter_flx1= AIE.objectFifo.createObjectFifo(%tile31_8,{%tile32_8},6) { sym_name ="block_21_buf_row_8_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_21_buf_row_8_out_flx2= AIE.objectFifo.createObjectFifo(%tile32_8,{%tile32_6},2) { sym_name ="block_21_buf_row_8_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B22 buffers---*-
  %block_22_buf_in_shim_35 = AIE.objectFifo.createObjectFifo(%tile35_0,{%tile33_1,%tile34_1,%tile33_2,%tile34_2,%tile33_3,%tile34_3,%tile33_4,%tile34_4},9) { sym_name = "block_22_buf_in_shim_35" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_22_buf_row_1_inter_lap= AIE.objectFifo.createObjectFifo(%tile33_1,{%tile34_1},5){ sym_name ="block_22_buf_row_1_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_22_buf_row_1_inter_flx1= AIE.objectFifo.createObjectFifo(%tile34_1,{%tile35_1},6) { sym_name ="block_22_buf_row_1_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_22_buf_row_1_out_flx2= AIE.objectFifo.createObjectFifo(%tile35_1,{%tile35_2},2) { sym_name ="block_22_buf_row_1_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_22_buf_row_2_inter_lap= AIE.objectFifo.createObjectFifo(%tile33_2,{%tile34_2},5){ sym_name ="block_22_buf_row_2_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_22_buf_row_2_inter_flx1= AIE.objectFifo.createObjectFifo(%tile34_2,{%tile35_2},6) { sym_name ="block_22_buf_row_2_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_22_buf_out_shim_35= AIE.objectFifo.createObjectFifo(%tile35_2,{%tile35_0},5){ sym_name ="block_22_buf_out_shim_35"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_22_buf_row_3_inter_lap= AIE.objectFifo.createObjectFifo(%tile33_3,{%tile34_3},5){ sym_name ="block_22_buf_row_3_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_22_buf_row_3_inter_flx1= AIE.objectFifo.createObjectFifo(%tile34_3,{%tile35_3},6) { sym_name ="block_22_buf_row_3_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_22_buf_row_3_out_flx2= AIE.objectFifo.createObjectFifo(%tile35_3,{%tile35_2},2) { sym_name ="block_22_buf_row_3_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_22_buf_row_4_inter_lap= AIE.objectFifo.createObjectFifo(%tile33_4,{%tile34_4},5){ sym_name ="block_22_buf_row_4_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_22_buf_row_4_inter_flx1= AIE.objectFifo.createObjectFifo(%tile34_4,{%tile35_4},6) { sym_name ="block_22_buf_row_4_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_22_buf_row_4_out_flx2= AIE.objectFifo.createObjectFifo(%tile35_4,{%tile35_2},2) { sym_name ="block_22_buf_row_4_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B23 buffers---*-
  %block_23_buf_in_shim_35 = AIE.objectFifo.createObjectFifo(%tile35_0,{%tile33_5,%tile34_5,%tile33_6,%tile34_6,%tile33_7,%tile34_7,%tile33_8,%tile34_8},9) { sym_name = "block_23_buf_in_shim_35" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_23_buf_row_5_inter_lap= AIE.objectFifo.createObjectFifo(%tile33_5,{%tile34_5},5){ sym_name ="block_23_buf_row_5_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_23_buf_row_5_inter_flx1= AIE.objectFifo.createObjectFifo(%tile34_5,{%tile35_5},6) { sym_name ="block_23_buf_row_5_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_23_buf_row_5_out_flx2= AIE.objectFifo.createObjectFifo(%tile35_5,{%tile35_6},2) { sym_name ="block_23_buf_row_5_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_23_buf_row_6_inter_lap= AIE.objectFifo.createObjectFifo(%tile33_6,{%tile34_6},5){ sym_name ="block_23_buf_row_6_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_23_buf_row_6_inter_flx1= AIE.objectFifo.createObjectFifo(%tile34_6,{%tile35_6},6) { sym_name ="block_23_buf_row_6_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_23_buf_out_shim_35= AIE.objectFifo.createObjectFifo(%tile35_6,{%tile35_0},5){ sym_name ="block_23_buf_out_shim_35"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_23_buf_row_7_inter_lap= AIE.objectFifo.createObjectFifo(%tile33_7,{%tile34_7},5){ sym_name ="block_23_buf_row_7_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_23_buf_row_7_inter_flx1= AIE.objectFifo.createObjectFifo(%tile34_7,{%tile35_7},6) { sym_name ="block_23_buf_row_7_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_23_buf_row_7_out_flx2= AIE.objectFifo.createObjectFifo(%tile35_7,{%tile35_6},2) { sym_name ="block_23_buf_row_7_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_23_buf_row_8_inter_lap= AIE.objectFifo.createObjectFifo(%tile33_8,{%tile34_8},5){ sym_name ="block_23_buf_row_8_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_23_buf_row_8_inter_flx1= AIE.objectFifo.createObjectFifo(%tile34_8,{%tile35_8},6) { sym_name ="block_23_buf_row_8_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_23_buf_row_8_out_flx2= AIE.objectFifo.createObjectFifo(%tile35_8,{%tile35_6},2) { sym_name ="block_23_buf_row_8_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B24 buffers---*-
  %block_24_buf_in_shim_42 = AIE.objectFifo.createObjectFifo(%tile42_0,{%tile36_1,%tile37_1,%tile36_2,%tile37_2,%tile36_3,%tile37_3,%tile36_4,%tile37_4},9) { sym_name = "block_24_buf_in_shim_42" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_24_buf_row_1_inter_lap= AIE.objectFifo.createObjectFifo(%tile36_1,{%tile37_1},5){ sym_name ="block_24_buf_row_1_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_24_buf_row_1_inter_flx1= AIE.objectFifo.createObjectFifo(%tile37_1,{%tile38_1},6) { sym_name ="block_24_buf_row_1_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_24_buf_row_1_out_flx2= AIE.objectFifo.createObjectFifo(%tile38_1,{%tile38_2},2) { sym_name ="block_24_buf_row_1_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_24_buf_row_2_inter_lap= AIE.objectFifo.createObjectFifo(%tile36_2,{%tile37_2},5){ sym_name ="block_24_buf_row_2_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_24_buf_row_2_inter_flx1= AIE.objectFifo.createObjectFifo(%tile37_2,{%tile38_2},6) { sym_name ="block_24_buf_row_2_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_24_buf_out_shim_42= AIE.objectFifo.createObjectFifo(%tile38_2,{%tile42_0},5){ sym_name ="block_24_buf_out_shim_42"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_24_buf_row_3_inter_lap= AIE.objectFifo.createObjectFifo(%tile36_3,{%tile37_3},5){ sym_name ="block_24_buf_row_3_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_24_buf_row_3_inter_flx1= AIE.objectFifo.createObjectFifo(%tile37_3,{%tile38_3},6) { sym_name ="block_24_buf_row_3_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_24_buf_row_3_out_flx2= AIE.objectFifo.createObjectFifo(%tile38_3,{%tile38_2},2) { sym_name ="block_24_buf_row_3_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_24_buf_row_4_inter_lap= AIE.objectFifo.createObjectFifo(%tile36_4,{%tile37_4},5){ sym_name ="block_24_buf_row_4_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_24_buf_row_4_inter_flx1= AIE.objectFifo.createObjectFifo(%tile37_4,{%tile38_4},6) { sym_name ="block_24_buf_row_4_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_24_buf_row_4_out_flx2= AIE.objectFifo.createObjectFifo(%tile38_4,{%tile38_2},2) { sym_name ="block_24_buf_row_4_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B25 buffers---*-
  %block_25_buf_in_shim_42 = AIE.objectFifo.createObjectFifo(%tile42_0,{%tile36_5,%tile37_5,%tile36_6,%tile37_6,%tile36_7,%tile37_7,%tile36_8,%tile37_8},9) { sym_name = "block_25_buf_in_shim_42" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_25_buf_row_5_inter_lap= AIE.objectFifo.createObjectFifo(%tile36_5,{%tile37_5},5){ sym_name ="block_25_buf_row_5_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_25_buf_row_5_inter_flx1= AIE.objectFifo.createObjectFifo(%tile37_5,{%tile38_5},6) { sym_name ="block_25_buf_row_5_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_25_buf_row_5_out_flx2= AIE.objectFifo.createObjectFifo(%tile38_5,{%tile38_6},2) { sym_name ="block_25_buf_row_5_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_25_buf_row_6_inter_lap= AIE.objectFifo.createObjectFifo(%tile36_6,{%tile37_6},5){ sym_name ="block_25_buf_row_6_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_25_buf_row_6_inter_flx1= AIE.objectFifo.createObjectFifo(%tile37_6,{%tile38_6},6) { sym_name ="block_25_buf_row_6_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_25_buf_out_shim_42= AIE.objectFifo.createObjectFifo(%tile38_6,{%tile42_0},5){ sym_name ="block_25_buf_out_shim_42"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_25_buf_row_7_inter_lap= AIE.objectFifo.createObjectFifo(%tile36_7,{%tile37_7},5){ sym_name ="block_25_buf_row_7_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_25_buf_row_7_inter_flx1= AIE.objectFifo.createObjectFifo(%tile37_7,{%tile38_7},6) { sym_name ="block_25_buf_row_7_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_25_buf_row_7_out_flx2= AIE.objectFifo.createObjectFifo(%tile38_7,{%tile38_6},2) { sym_name ="block_25_buf_row_7_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_25_buf_row_8_inter_lap= AIE.objectFifo.createObjectFifo(%tile36_8,{%tile37_8},5){ sym_name ="block_25_buf_row_8_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_25_buf_row_8_inter_flx1= AIE.objectFifo.createObjectFifo(%tile37_8,{%tile38_8},6) { sym_name ="block_25_buf_row_8_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_25_buf_row_8_out_flx2= AIE.objectFifo.createObjectFifo(%tile38_8,{%tile38_6},2) { sym_name ="block_25_buf_row_8_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B26 buffers---*-
  %block_26_buf_in_shim_43 = AIE.objectFifo.createObjectFifo(%tile43_0,{%tile39_1,%tile40_1,%tile39_2,%tile40_2,%tile39_3,%tile40_3,%tile39_4,%tile40_4},9) { sym_name = "block_26_buf_in_shim_43" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_26_buf_row_1_inter_lap= AIE.objectFifo.createObjectFifo(%tile39_1,{%tile40_1},5){ sym_name ="block_26_buf_row_1_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_26_buf_row_1_inter_flx1= AIE.objectFifo.createObjectFifo(%tile40_1,{%tile41_1},6) { sym_name ="block_26_buf_row_1_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_26_buf_row_1_out_flx2= AIE.objectFifo.createObjectFifo(%tile41_1,{%tile41_2},2) { sym_name ="block_26_buf_row_1_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_26_buf_row_2_inter_lap= AIE.objectFifo.createObjectFifo(%tile39_2,{%tile40_2},5){ sym_name ="block_26_buf_row_2_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_26_buf_row_2_inter_flx1= AIE.objectFifo.createObjectFifo(%tile40_2,{%tile41_2},6) { sym_name ="block_26_buf_row_2_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_26_buf_out_shim_43= AIE.objectFifo.createObjectFifo(%tile41_2,{%tile43_0},5){ sym_name ="block_26_buf_out_shim_43"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_26_buf_row_3_inter_lap= AIE.objectFifo.createObjectFifo(%tile39_3,{%tile40_3},5){ sym_name ="block_26_buf_row_3_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_26_buf_row_3_inter_flx1= AIE.objectFifo.createObjectFifo(%tile40_3,{%tile41_3},6) { sym_name ="block_26_buf_row_3_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_26_buf_row_3_out_flx2= AIE.objectFifo.createObjectFifo(%tile41_3,{%tile41_2},2) { sym_name ="block_26_buf_row_3_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_26_buf_row_4_inter_lap= AIE.objectFifo.createObjectFifo(%tile39_4,{%tile40_4},5){ sym_name ="block_26_buf_row_4_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_26_buf_row_4_inter_flx1= AIE.objectFifo.createObjectFifo(%tile40_4,{%tile41_4},6) { sym_name ="block_26_buf_row_4_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_26_buf_row_4_out_flx2= AIE.objectFifo.createObjectFifo(%tile41_4,{%tile41_2},2) { sym_name ="block_26_buf_row_4_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B27 buffers---*-
  %block_27_buf_in_shim_43 = AIE.objectFifo.createObjectFifo(%tile43_0,{%tile39_5,%tile40_5,%tile39_6,%tile40_6,%tile39_7,%tile40_7,%tile39_8,%tile40_8},9) { sym_name = "block_27_buf_in_shim_43" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_27_buf_row_5_inter_lap= AIE.objectFifo.createObjectFifo(%tile39_5,{%tile40_5},5){ sym_name ="block_27_buf_row_5_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_27_buf_row_5_inter_flx1= AIE.objectFifo.createObjectFifo(%tile40_5,{%tile41_5},6) { sym_name ="block_27_buf_row_5_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_27_buf_row_5_out_flx2= AIE.objectFifo.createObjectFifo(%tile41_5,{%tile41_6},2) { sym_name ="block_27_buf_row_5_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_27_buf_row_6_inter_lap= AIE.objectFifo.createObjectFifo(%tile39_6,{%tile40_6},5){ sym_name ="block_27_buf_row_6_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_27_buf_row_6_inter_flx1= AIE.objectFifo.createObjectFifo(%tile40_6,{%tile41_6},6) { sym_name ="block_27_buf_row_6_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_27_buf_out_shim_43= AIE.objectFifo.createObjectFifo(%tile41_6,{%tile43_0},5){ sym_name ="block_27_buf_out_shim_43"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_27_buf_row_7_inter_lap= AIE.objectFifo.createObjectFifo(%tile39_7,{%tile40_7},5){ sym_name ="block_27_buf_row_7_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_27_buf_row_7_inter_flx1= AIE.objectFifo.createObjectFifo(%tile40_7,{%tile41_7},6) { sym_name ="block_27_buf_row_7_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_27_buf_row_7_out_flx2= AIE.objectFifo.createObjectFifo(%tile41_7,{%tile41_6},2) { sym_name ="block_27_buf_row_7_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_27_buf_row_8_inter_lap= AIE.objectFifo.createObjectFifo(%tile39_8,{%tile40_8},5){ sym_name ="block_27_buf_row_8_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_27_buf_row_8_inter_flx1= AIE.objectFifo.createObjectFifo(%tile40_8,{%tile41_8},6) { sym_name ="block_27_buf_row_8_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_27_buf_row_8_out_flx2= AIE.objectFifo.createObjectFifo(%tile41_8,{%tile41_6},2) { sym_name ="block_27_buf_row_8_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B28 buffers---*-
  %block_28_buf_in_shim_46 = AIE.objectFifo.createObjectFifo(%tile46_0,{%tile42_1,%tile43_1,%tile42_2,%tile43_2,%tile42_3,%tile43_3,%tile42_4,%tile43_4},9) { sym_name = "block_28_buf_in_shim_46" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_28_buf_row_1_inter_lap= AIE.objectFifo.createObjectFifo(%tile42_1,{%tile43_1},5){ sym_name ="block_28_buf_row_1_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_28_buf_row_1_inter_flx1= AIE.objectFifo.createObjectFifo(%tile43_1,{%tile44_1},6) { sym_name ="block_28_buf_row_1_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_28_buf_row_1_out_flx2= AIE.objectFifo.createObjectFifo(%tile44_1,{%tile44_2},2) { sym_name ="block_28_buf_row_1_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_28_buf_row_2_inter_lap= AIE.objectFifo.createObjectFifo(%tile42_2,{%tile43_2},5){ sym_name ="block_28_buf_row_2_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_28_buf_row_2_inter_flx1= AIE.objectFifo.createObjectFifo(%tile43_2,{%tile44_2},6) { sym_name ="block_28_buf_row_2_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_28_buf_out_shim_46= AIE.objectFifo.createObjectFifo(%tile44_2,{%tile46_0},5){ sym_name ="block_28_buf_out_shim_46"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_28_buf_row_3_inter_lap= AIE.objectFifo.createObjectFifo(%tile42_3,{%tile43_3},5){ sym_name ="block_28_buf_row_3_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_28_buf_row_3_inter_flx1= AIE.objectFifo.createObjectFifo(%tile43_3,{%tile44_3},6) { sym_name ="block_28_buf_row_3_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_28_buf_row_3_out_flx2= AIE.objectFifo.createObjectFifo(%tile44_3,{%tile44_2},2) { sym_name ="block_28_buf_row_3_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_28_buf_row_4_inter_lap= AIE.objectFifo.createObjectFifo(%tile42_4,{%tile43_4},5){ sym_name ="block_28_buf_row_4_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_28_buf_row_4_inter_flx1= AIE.objectFifo.createObjectFifo(%tile43_4,{%tile44_4},6) { sym_name ="block_28_buf_row_4_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_28_buf_row_4_out_flx2= AIE.objectFifo.createObjectFifo(%tile44_4,{%tile44_2},2) { sym_name ="block_28_buf_row_4_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B29 buffers---*-
  %block_29_buf_in_shim_46 = AIE.objectFifo.createObjectFifo(%tile46_0,{%tile42_5,%tile43_5,%tile42_6,%tile43_6,%tile42_7,%tile43_7,%tile42_8,%tile43_8},9) { sym_name = "block_29_buf_in_shim_46" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_29_buf_row_5_inter_lap= AIE.objectFifo.createObjectFifo(%tile42_5,{%tile43_5},5){ sym_name ="block_29_buf_row_5_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_29_buf_row_5_inter_flx1= AIE.objectFifo.createObjectFifo(%tile43_5,{%tile44_5},6) { sym_name ="block_29_buf_row_5_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_29_buf_row_5_out_flx2= AIE.objectFifo.createObjectFifo(%tile44_5,{%tile44_6},2) { sym_name ="block_29_buf_row_5_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_29_buf_row_6_inter_lap= AIE.objectFifo.createObjectFifo(%tile42_6,{%tile43_6},5){ sym_name ="block_29_buf_row_6_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_29_buf_row_6_inter_flx1= AIE.objectFifo.createObjectFifo(%tile43_6,{%tile44_6},6) { sym_name ="block_29_buf_row_6_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_29_buf_out_shim_46= AIE.objectFifo.createObjectFifo(%tile44_6,{%tile46_0},5){ sym_name ="block_29_buf_out_shim_46"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_29_buf_row_7_inter_lap= AIE.objectFifo.createObjectFifo(%tile42_7,{%tile43_7},5){ sym_name ="block_29_buf_row_7_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_29_buf_row_7_inter_flx1= AIE.objectFifo.createObjectFifo(%tile43_7,{%tile44_7},6) { sym_name ="block_29_buf_row_7_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_29_buf_row_7_out_flx2= AIE.objectFifo.createObjectFifo(%tile44_7,{%tile44_6},2) { sym_name ="block_29_buf_row_7_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_29_buf_row_8_inter_lap= AIE.objectFifo.createObjectFifo(%tile42_8,{%tile43_8},5){ sym_name ="block_29_buf_row_8_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_29_buf_row_8_inter_flx1= AIE.objectFifo.createObjectFifo(%tile43_8,{%tile44_8},6) { sym_name ="block_29_buf_row_8_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_29_buf_row_8_out_flx2= AIE.objectFifo.createObjectFifo(%tile44_8,{%tile44_6},2) { sym_name ="block_29_buf_row_8_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B30 buffers---*-
  %block_30_buf_in_shim_47 = AIE.objectFifo.createObjectFifo(%tile47_0,{%tile45_1,%tile46_1,%tile45_2,%tile46_2,%tile45_3,%tile46_3,%tile45_4,%tile46_4},9) { sym_name = "block_30_buf_in_shim_47" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_30_buf_row_1_inter_lap= AIE.objectFifo.createObjectFifo(%tile45_1,{%tile46_1},5){ sym_name ="block_30_buf_row_1_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_30_buf_row_1_inter_flx1= AIE.objectFifo.createObjectFifo(%tile46_1,{%tile47_1},6) { sym_name ="block_30_buf_row_1_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_30_buf_row_1_out_flx2= AIE.objectFifo.createObjectFifo(%tile47_1,{%tile47_2},2) { sym_name ="block_30_buf_row_1_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_30_buf_row_2_inter_lap= AIE.objectFifo.createObjectFifo(%tile45_2,{%tile46_2},5){ sym_name ="block_30_buf_row_2_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_30_buf_row_2_inter_flx1= AIE.objectFifo.createObjectFifo(%tile46_2,{%tile47_2},6) { sym_name ="block_30_buf_row_2_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_30_buf_out_shim_47= AIE.objectFifo.createObjectFifo(%tile47_2,{%tile47_0},5){ sym_name ="block_30_buf_out_shim_47"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_30_buf_row_3_inter_lap= AIE.objectFifo.createObjectFifo(%tile45_3,{%tile46_3},5){ sym_name ="block_30_buf_row_3_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_30_buf_row_3_inter_flx1= AIE.objectFifo.createObjectFifo(%tile46_3,{%tile47_3},6) { sym_name ="block_30_buf_row_3_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_30_buf_row_3_out_flx2= AIE.objectFifo.createObjectFifo(%tile47_3,{%tile47_2},2) { sym_name ="block_30_buf_row_3_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_30_buf_row_4_inter_lap= AIE.objectFifo.createObjectFifo(%tile45_4,{%tile46_4},5){ sym_name ="block_30_buf_row_4_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_30_buf_row_4_inter_flx1= AIE.objectFifo.createObjectFifo(%tile46_4,{%tile47_4},6) { sym_name ="block_30_buf_row_4_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_30_buf_row_4_out_flx2= AIE.objectFifo.createObjectFifo(%tile47_4,{%tile47_2},2) { sym_name ="block_30_buf_row_4_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
//---Generating B31 buffers---*-
  %block_31_buf_in_shim_47 = AIE.objectFifo.createObjectFifo(%tile47_0,{%tile45_5,%tile46_5,%tile45_6,%tile46_6,%tile45_7,%tile46_7,%tile45_8,%tile46_8},9) { sym_name = "block_31_buf_in_shim_47" } : !AIE.objectFifo<memref<256xi32>> //B block input
  %block_31_buf_row_5_inter_lap= AIE.objectFifo.createObjectFifo(%tile45_5,{%tile46_5},5){ sym_name ="block_31_buf_row_5_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_31_buf_row_5_inter_flx1= AIE.objectFifo.createObjectFifo(%tile46_5,{%tile47_5},6) { sym_name ="block_31_buf_row_5_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_31_buf_row_5_out_flx2= AIE.objectFifo.createObjectFifo(%tile47_5,{%tile47_6},2) { sym_name ="block_31_buf_row_5_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_31_buf_row_6_inter_lap= AIE.objectFifo.createObjectFifo(%tile45_6,{%tile46_6},5){ sym_name ="block_31_buf_row_6_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_31_buf_row_6_inter_flx1= AIE.objectFifo.createObjectFifo(%tile46_6,{%tile47_6},6) { sym_name ="block_31_buf_row_6_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_31_buf_out_shim_47= AIE.objectFifo.createObjectFifo(%tile47_6,{%tile47_0},5){ sym_name ="block_31_buf_out_shim_47"} : !AIE.objectFifo<memref<256xi32>> //B block output
  %block_31_buf_row_7_inter_lap= AIE.objectFifo.createObjectFifo(%tile45_7,{%tile46_7},5){ sym_name ="block_31_buf_row_7_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_31_buf_row_7_inter_flx1= AIE.objectFifo.createObjectFifo(%tile46_7,{%tile47_7},6) { sym_name ="block_31_buf_row_7_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_31_buf_row_7_out_flx2= AIE.objectFifo.createObjectFifo(%tile47_7,{%tile47_6},2) { sym_name ="block_31_buf_row_7_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %block_31_buf_row_8_inter_lap= AIE.objectFifo.createObjectFifo(%tile45_8,{%tile46_8},5){ sym_name ="block_31_buf_row_8_inter_lap"} : !AIE.objectFifo<memref<256xi32>>
  %block_31_buf_row_8_inter_flx1= AIE.objectFifo.createObjectFifo(%tile46_8,{%tile47_8},6) { sym_name ="block_31_buf_row_8_inter_flx1"} : !AIE.objectFifo<memref<512xi32>>
  %block_31_buf_row_8_out_flx2= AIE.objectFifo.createObjectFifo(%tile47_8,{%tile47_6},2) { sym_name ="block_31_buf_row_8_out_flx2"} : !AIE.objectFifo<memref<256xi32>>
  %ext_buffer_in_0 = AIE.external_buffer  {sym_name = "ddr_buffer_in_0"}: memref<2304 x i32>
  %ext_buffer_out_0 = AIE.external_buffer  {sym_name = "ddr_buffer_out_0"}: memref<2048 x i32>

  %ext_buffer_in_1 = AIE.external_buffer  {sym_name = "ddr_buffer_in_1"}: memref<2304 x i32>
  %ext_buffer_out_1 = AIE.external_buffer  {sym_name = "ddr_buffer_out_1"}: memref<2048 x i32>

  %ext_buffer_in_2 = AIE.external_buffer  {sym_name = "ddr_buffer_in_2"}: memref<2304 x i32>
  %ext_buffer_out_2 = AIE.external_buffer  {sym_name = "ddr_buffer_out_2"}: memref<2048 x i32>

  %ext_buffer_in_3 = AIE.external_buffer  {sym_name = "ddr_buffer_in_3"}: memref<2304 x i32>
  %ext_buffer_out_3 = AIE.external_buffer  {sym_name = "ddr_buffer_out_3"}: memref<2048 x i32>

  %ext_buffer_in_4 = AIE.external_buffer  {sym_name = "ddr_buffer_in_4"}: memref<2304 x i32>
  %ext_buffer_out_4 = AIE.external_buffer  {sym_name = "ddr_buffer_out_4"}: memref<2048 x i32>

  %ext_buffer_in_5 = AIE.external_buffer  {sym_name = "ddr_buffer_in_5"}: memref<2304 x i32>
  %ext_buffer_out_5 = AIE.external_buffer  {sym_name = "ddr_buffer_out_5"}: memref<2048 x i32>

  %ext_buffer_in_6 = AIE.external_buffer  {sym_name = "ddr_buffer_in_6"}: memref<2304 x i32>
  %ext_buffer_out_6 = AIE.external_buffer  {sym_name = "ddr_buffer_out_6"}: memref<2048 x i32>

  %ext_buffer_in_7 = AIE.external_buffer  {sym_name = "ddr_buffer_in_7"}: memref<2304 x i32>
  %ext_buffer_out_7 = AIE.external_buffer  {sym_name = "ddr_buffer_out_7"}: memref<2048 x i32>

  %ext_buffer_in_8 = AIE.external_buffer  {sym_name = "ddr_buffer_in_8"}: memref<2304 x i32>
  %ext_buffer_out_8 = AIE.external_buffer  {sym_name = "ddr_buffer_out_8"}: memref<2048 x i32>

  %ext_buffer_in_9 = AIE.external_buffer  {sym_name = "ddr_buffer_in_9"}: memref<2304 x i32>
  %ext_buffer_out_9 = AIE.external_buffer  {sym_name = "ddr_buffer_out_9"}: memref<2048 x i32>

  %ext_buffer_in_10 = AIE.external_buffer  {sym_name = "ddr_buffer_in_10"}: memref<2304 x i32>
  %ext_buffer_out_10 = AIE.external_buffer  {sym_name = "ddr_buffer_out_10"}: memref<2048 x i32>

  %ext_buffer_in_11 = AIE.external_buffer  {sym_name = "ddr_buffer_in_11"}: memref<2304 x i32>
  %ext_buffer_out_11 = AIE.external_buffer  {sym_name = "ddr_buffer_out_11"}: memref<2048 x i32>

  %ext_buffer_in_12 = AIE.external_buffer  {sym_name = "ddr_buffer_in_12"}: memref<2304 x i32>
  %ext_buffer_out_12 = AIE.external_buffer  {sym_name = "ddr_buffer_out_12"}: memref<2048 x i32>

  %ext_buffer_in_13 = AIE.external_buffer  {sym_name = "ddr_buffer_in_13"}: memref<2304 x i32>
  %ext_buffer_out_13 = AIE.external_buffer  {sym_name = "ddr_buffer_out_13"}: memref<2048 x i32>

  %ext_buffer_in_14 = AIE.external_buffer  {sym_name = "ddr_buffer_in_14"}: memref<2304 x i32>
  %ext_buffer_out_14 = AIE.external_buffer  {sym_name = "ddr_buffer_out_14"}: memref<2048 x i32>

  %ext_buffer_in_15 = AIE.external_buffer  {sym_name = "ddr_buffer_in_15"}: memref<2304 x i32>
  %ext_buffer_out_15 = AIE.external_buffer  {sym_name = "ddr_buffer_out_15"}: memref<2048 x i32>

  %ext_buffer_in_16 = AIE.external_buffer  {sym_name = "ddr_buffer_in_16"}: memref<2304 x i32>
  %ext_buffer_out_16 = AIE.external_buffer  {sym_name = "ddr_buffer_out_16"}: memref<2048 x i32>

  %ext_buffer_in_17 = AIE.external_buffer  {sym_name = "ddr_buffer_in_17"}: memref<2304 x i32>
  %ext_buffer_out_17 = AIE.external_buffer  {sym_name = "ddr_buffer_out_17"}: memref<2048 x i32>

  %ext_buffer_in_18 = AIE.external_buffer  {sym_name = "ddr_buffer_in_18"}: memref<2304 x i32>
  %ext_buffer_out_18 = AIE.external_buffer  {sym_name = "ddr_buffer_out_18"}: memref<2048 x i32>

  %ext_buffer_in_19 = AIE.external_buffer  {sym_name = "ddr_buffer_in_19"}: memref<2304 x i32>
  %ext_buffer_out_19 = AIE.external_buffer  {sym_name = "ddr_buffer_out_19"}: memref<2048 x i32>

  %ext_buffer_in_20 = AIE.external_buffer  {sym_name = "ddr_buffer_in_20"}: memref<2304 x i32>
  %ext_buffer_out_20 = AIE.external_buffer  {sym_name = "ddr_buffer_out_20"}: memref<2048 x i32>

  %ext_buffer_in_21 = AIE.external_buffer  {sym_name = "ddr_buffer_in_21"}: memref<2304 x i32>
  %ext_buffer_out_21 = AIE.external_buffer  {sym_name = "ddr_buffer_out_21"}: memref<2048 x i32>

  %ext_buffer_in_22 = AIE.external_buffer  {sym_name = "ddr_buffer_in_22"}: memref<2304 x i32>
  %ext_buffer_out_22 = AIE.external_buffer  {sym_name = "ddr_buffer_out_22"}: memref<2048 x i32>

  %ext_buffer_in_23 = AIE.external_buffer  {sym_name = "ddr_buffer_in_23"}: memref<2304 x i32>
  %ext_buffer_out_23 = AIE.external_buffer  {sym_name = "ddr_buffer_out_23"}: memref<2048 x i32>

  %ext_buffer_in_24 = AIE.external_buffer  {sym_name = "ddr_buffer_in_24"}: memref<2304 x i32>
  %ext_buffer_out_24 = AIE.external_buffer  {sym_name = "ddr_buffer_out_24"}: memref<2048 x i32>

  %ext_buffer_in_25 = AIE.external_buffer  {sym_name = "ddr_buffer_in_25"}: memref<2304 x i32>
  %ext_buffer_out_25 = AIE.external_buffer  {sym_name = "ddr_buffer_out_25"}: memref<2048 x i32>

  %ext_buffer_in_26 = AIE.external_buffer  {sym_name = "ddr_buffer_in_26"}: memref<2304 x i32>
  %ext_buffer_out_26 = AIE.external_buffer  {sym_name = "ddr_buffer_out_26"}: memref<2048 x i32>

  %ext_buffer_in_27 = AIE.external_buffer  {sym_name = "ddr_buffer_in_27"}: memref<2304 x i32>
  %ext_buffer_out_27 = AIE.external_buffer  {sym_name = "ddr_buffer_out_27"}: memref<2048 x i32>

  %ext_buffer_in_28 = AIE.external_buffer  {sym_name = "ddr_buffer_in_28"}: memref<2304 x i32>
  %ext_buffer_out_28 = AIE.external_buffer  {sym_name = "ddr_buffer_out_28"}: memref<2048 x i32>

  %ext_buffer_in_29 = AIE.external_buffer  {sym_name = "ddr_buffer_in_29"}: memref<2304 x i32>
  %ext_buffer_out_29 = AIE.external_buffer  {sym_name = "ddr_buffer_out_29"}: memref<2048 x i32>

  %ext_buffer_in_30 = AIE.external_buffer  {sym_name = "ddr_buffer_in_30"}: memref<2304 x i32>
  %ext_buffer_out_30 = AIE.external_buffer  {sym_name = "ddr_buffer_out_30"}: memref<2048 x i32>

  %ext_buffer_in_31 = AIE.external_buffer  {sym_name = "ddr_buffer_in_31"}: memref<2304 x i32>
  %ext_buffer_out_31 = AIE.external_buffer  {sym_name = "ddr_buffer_out_31"}: memref<2048 x i32>

//Registering buffers
  AIE.objectFifo.registerExternalBuffers(%tile2_0, %block_0_buf_in_shim_2 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_0}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile2_0, %block_0_buf_out_shim_2 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_0}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile2_0, %block_1_buf_in_shim_2 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_1}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile2_0, %block_1_buf_out_shim_2 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_1}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile3_0, %block_2_buf_in_shim_3 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_2}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile3_0, %block_2_buf_out_shim_3 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_2}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile3_0, %block_3_buf_in_shim_3 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_3}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile3_0, %block_3_buf_out_shim_3 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_3}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile6_0, %block_4_buf_in_shim_6 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_4}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile6_0, %block_4_buf_out_shim_6 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_4}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile6_0, %block_5_buf_in_shim_6 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_5}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile6_0, %block_5_buf_out_shim_6 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_5}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile7_0, %block_6_buf_in_shim_7 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_6}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile7_0, %block_6_buf_out_shim_7 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_6}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile7_0, %block_7_buf_in_shim_7 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_7}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile7_0, %block_7_buf_out_shim_7 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_7}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile10_0, %block_8_buf_in_shim_10 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_8}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile10_0, %block_8_buf_out_shim_10 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_8}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile10_0, %block_9_buf_in_shim_10 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_9}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile10_0, %block_9_buf_out_shim_10 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_9}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile11_0, %block_10_buf_in_shim_11 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_10}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile11_0, %block_10_buf_out_shim_11 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_10}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile11_0, %block_11_buf_in_shim_11 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_11}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile11_0, %block_11_buf_out_shim_11 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_11}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile18_0, %block_12_buf_in_shim_18 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_12}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile18_0, %block_12_buf_out_shim_18 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_12}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile18_0, %block_13_buf_in_shim_18 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_13}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile18_0, %block_13_buf_out_shim_18 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_13}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile19_0, %block_14_buf_in_shim_19 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_14}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile19_0, %block_14_buf_out_shim_19 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_14}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile19_0, %block_15_buf_in_shim_19 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_15}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile19_0, %block_15_buf_out_shim_19 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_15}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile26_0, %block_16_buf_in_shim_26 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_16}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile26_0, %block_16_buf_out_shim_26 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_16}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile26_0, %block_17_buf_in_shim_26 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_17}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile26_0, %block_17_buf_out_shim_26 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_17}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile27_0, %block_18_buf_in_shim_27 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_18}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile27_0, %block_18_buf_out_shim_27 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_18}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile27_0, %block_19_buf_in_shim_27 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_19}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile27_0, %block_19_buf_out_shim_27 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_19}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile34_0, %block_20_buf_in_shim_34 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_20}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile34_0, %block_20_buf_out_shim_34 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_20}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile34_0, %block_21_buf_in_shim_34 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_21}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile34_0, %block_21_buf_out_shim_34 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_21}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile35_0, %block_22_buf_in_shim_35 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_22}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile35_0, %block_22_buf_out_shim_35 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_22}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile35_0, %block_23_buf_in_shim_35 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_23}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile35_0, %block_23_buf_out_shim_35 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_23}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile42_0, %block_24_buf_in_shim_42 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_24}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile42_0, %block_24_buf_out_shim_42 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_24}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile42_0, %block_25_buf_in_shim_42 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_25}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile42_0, %block_25_buf_out_shim_42 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_25}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile43_0, %block_26_buf_in_shim_43 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_26}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile43_0, %block_26_buf_out_shim_43 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_26}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile43_0, %block_27_buf_in_shim_43 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_27}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile43_0, %block_27_buf_out_shim_43 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_27}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile46_0, %block_28_buf_in_shim_46 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_28}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile46_0, %block_28_buf_out_shim_46 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_28}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile46_0, %block_29_buf_in_shim_46 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_29}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile46_0, %block_29_buf_out_shim_46 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_29}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile47_0, %block_30_buf_in_shim_47 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_30}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile47_0, %block_30_buf_out_shim_47 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_30}) : (memref<2048xi32>)

  AIE.objectFifo.registerExternalBuffers(%tile47_0, %block_31_buf_in_shim_47 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_in_31}) : (memref<2304xi32>)
  AIE.objectFifo.registerExternalBuffers(%tile47_0, %block_31_buf_out_shim_47 : !AIE.objectFifo<memref<256xi32>>, {%ext_buffer_out_31}) : (memref<2048xi32>)


  func.func private @hdiff_lap(%AL: memref<256xi32>,%BL: memref<256xi32>, %CL:  memref<256xi32>, %DL: memref<256xi32>, %EL:  memref<256xi32>,  %OLL1: memref<256xi32>,  %OLL2: memref<256xi32>,  %OLL3: memref<256xi32>,  %OLL4: memref<256xi32>) -> ()
  func.func private @hdiff_flux1(%AF: memref<256xi32>,%BF: memref<256xi32>, %CF:  memref<256xi32>,   %OLF1: memref<256xi32>,  %OLF2: memref<256xi32>,  %OLF3: memref<256xi32>,  %OLF4: memref<256xi32>,  %OFI1: memref<512xi32>,  %OFI2: memref<512xi32>,  %OFI3: memref<512xi32>,  %OFI4: memref<512xi32>,  %OFI5: memref<512xi32>) -> ()
  func.func private @hdiff_flux2( %Inter1: memref<512xi32>,%Inter2: memref<512xi32>, %Inter3: memref<512xi32>,%Inter4: memref<512xi32>,%Inter5: memref<512xi32>,  %Out: memref<256xi32>) -> ()

  %block_0_core0_1 = AIE.core(%tile0_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_0_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_0_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_0_core1_1 = AIE.core(%tile1_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_0_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_0_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_0_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_0_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_0_core2_1 = AIE.core(%tile2_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_0_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_0_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_0_buf_row_1_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_0_buf_row_1_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_0_core0_2 = AIE.core(%tile0_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock02_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_0_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_0_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_0_core1_2 = AIE.core(%tile1_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_0_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_0_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_0_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_0_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_0_core2_2 = AIE.core(%tile2_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_0_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_0_buf_out_shim_2: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_0_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_0_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_0_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_0_buf_row_2_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_0_buf_row_1_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_0_buf_row_3_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_0_buf_row_4_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_0_buf_out_shim_2:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock22_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_0_core0_3 = AIE.core(%tile0_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_0_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_0_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_0_core1_3 = AIE.core(%tile1_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_0_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_0_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_0_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_0_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_0_core2_3 = AIE.core(%tile2_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_0_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_0_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_0_buf_row_3_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_0_buf_row_3_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_0_core0_4 = AIE.core(%tile0_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_0_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_0_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_0_core1_4 = AIE.core(%tile1_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_0_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_0_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_0_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_0_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_0_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_0_core2_4 = AIE.core(%tile2_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_0_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_0_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_0_buf_row_4_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_0_buf_row_4_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_1_core0_5 = AIE.core(%tile0_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_1_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_1_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_1_core1_5 = AIE.core(%tile1_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_1_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_1_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_1_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_1_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_1_core2_5 = AIE.core(%tile2_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_1_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_1_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_1_buf_row_5_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_1_buf_row_5_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_1_core0_6 = AIE.core(%tile0_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock06_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_1_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_1_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_1_core1_6 = AIE.core(%tile1_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_1_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_1_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_1_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_1_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_1_core2_6 = AIE.core(%tile2_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_1_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_1_buf_out_shim_2: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_1_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_1_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_1_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_1_buf_row_6_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_1_buf_row_5_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_1_buf_row_7_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_1_buf_row_8_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_1_buf_out_shim_2:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock26_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_1_core0_7 = AIE.core(%tile0_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_1_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_1_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_1_core1_7 = AIE.core(%tile1_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_1_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_1_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_1_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_1_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_1_core2_7 = AIE.core(%tile2_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_1_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_1_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_1_buf_row_7_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_1_buf_row_7_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_1_core0_8 = AIE.core(%tile0_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_1_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_1_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_1_core1_8 = AIE.core(%tile1_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_1_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_1_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_1_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_1_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_1_buf_in_shim_2: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_1_core2_8 = AIE.core(%tile2_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_1_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_1_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_1_buf_row_8_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_1_buf_row_8_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_2_core3_1 = AIE.core(%tile3_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_2_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_2_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_2_core4_1 = AIE.core(%tile4_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_2_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_2_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_2_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_2_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_2_core5_1 = AIE.core(%tile5_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_2_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_2_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_2_buf_row_1_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_2_buf_row_1_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_2_core3_2 = AIE.core(%tile3_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock32_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_2_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_2_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_2_core4_2 = AIE.core(%tile4_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_2_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_2_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_2_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_2_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_2_core5_2 = AIE.core(%tile5_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_2_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_2_buf_out_shim_3: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_2_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_2_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_2_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_2_buf_row_2_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_2_buf_row_1_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_2_buf_row_3_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_2_buf_row_4_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_2_buf_out_shim_3:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock52_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_2_core3_3 = AIE.core(%tile3_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_2_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_2_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_2_core4_3 = AIE.core(%tile4_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_2_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_2_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_2_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_2_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_2_core5_3 = AIE.core(%tile5_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_2_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_2_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_2_buf_row_3_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_2_buf_row_3_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_2_core3_4 = AIE.core(%tile3_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_2_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_2_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_2_core4_4 = AIE.core(%tile4_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_2_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_2_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_2_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_2_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_2_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_2_core5_4 = AIE.core(%tile5_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_2_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_2_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_2_buf_row_4_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_2_buf_row_4_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_3_core3_5 = AIE.core(%tile3_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_3_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_3_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_3_core4_5 = AIE.core(%tile4_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_3_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_3_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_3_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_3_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_3_core5_5 = AIE.core(%tile5_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_3_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_3_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_3_buf_row_5_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_3_buf_row_5_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_3_core3_6 = AIE.core(%tile3_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock36_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_3_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_3_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_3_core4_6 = AIE.core(%tile4_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_3_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_3_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_3_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_3_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_3_core5_6 = AIE.core(%tile5_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_3_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_3_buf_out_shim_3: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_3_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_3_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_3_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_3_buf_row_6_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_3_buf_row_5_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_3_buf_row_7_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_3_buf_row_8_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_3_buf_out_shim_3:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock56_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_3_core3_7 = AIE.core(%tile3_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_3_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_3_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_3_core4_7 = AIE.core(%tile4_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_3_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_3_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_3_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_3_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_3_core5_7 = AIE.core(%tile5_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_3_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_3_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_3_buf_row_7_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_3_buf_row_7_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_3_core3_8 = AIE.core(%tile3_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_3_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_3_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_3_core4_8 = AIE.core(%tile4_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_3_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_3_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_3_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_3_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_3_buf_in_shim_3: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_3_core5_8 = AIE.core(%tile5_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_3_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_3_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_3_buf_row_8_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_3_buf_row_8_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_4_core6_1 = AIE.core(%tile6_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_4_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_4_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_4_core7_1 = AIE.core(%tile7_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_4_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_4_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_4_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_4_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_4_core8_1 = AIE.core(%tile8_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_4_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_4_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_4_buf_row_1_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_4_buf_row_1_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_4_core6_2 = AIE.core(%tile6_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock62_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_4_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_4_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_4_core7_2 = AIE.core(%tile7_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_4_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_4_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_4_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_4_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_4_core8_2 = AIE.core(%tile8_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_4_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_4_buf_out_shim_6: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_4_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_4_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_4_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_4_buf_row_2_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_4_buf_row_1_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_4_buf_row_3_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_4_buf_row_4_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_4_buf_out_shim_6:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock82_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_4_core6_3 = AIE.core(%tile6_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_4_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_4_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_4_core7_3 = AIE.core(%tile7_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_4_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_4_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_4_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_4_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_4_core8_3 = AIE.core(%tile8_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_4_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_4_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_4_buf_row_3_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_4_buf_row_3_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_4_core6_4 = AIE.core(%tile6_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_4_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_4_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_4_core7_4 = AIE.core(%tile7_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_4_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_4_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_4_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_4_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_4_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_4_core8_4 = AIE.core(%tile8_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_4_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_4_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_4_buf_row_4_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_4_buf_row_4_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_5_core6_5 = AIE.core(%tile6_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_5_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_5_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_5_core7_5 = AIE.core(%tile7_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_5_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_5_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_5_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_5_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_5_core8_5 = AIE.core(%tile8_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_5_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_5_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_5_buf_row_5_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_5_buf_row_5_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_5_core6_6 = AIE.core(%tile6_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock66_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_5_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_5_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_5_core7_6 = AIE.core(%tile7_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_5_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_5_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_5_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_5_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_5_core8_6 = AIE.core(%tile8_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_5_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_5_buf_out_shim_6: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_5_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_5_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_5_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_5_buf_row_6_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_5_buf_row_5_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_5_buf_row_7_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_5_buf_row_8_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_5_buf_out_shim_6:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock86_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_5_core6_7 = AIE.core(%tile6_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_5_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_5_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_5_core7_7 = AIE.core(%tile7_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_5_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_5_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_5_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_5_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_5_core8_7 = AIE.core(%tile8_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_5_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_5_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_5_buf_row_7_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_5_buf_row_7_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_5_core6_8 = AIE.core(%tile6_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_5_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_5_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_5_core7_8 = AIE.core(%tile7_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_5_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_5_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_5_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_5_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_5_buf_in_shim_6: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_5_core8_8 = AIE.core(%tile8_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_5_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_5_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_5_buf_row_8_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_5_buf_row_8_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_6_core9_1 = AIE.core(%tile9_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_6_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_6_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_6_core10_1 = AIE.core(%tile10_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_6_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_6_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_6_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_6_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_6_core11_1 = AIE.core(%tile11_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_6_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_6_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_6_buf_row_1_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_6_buf_row_1_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_6_core9_2 = AIE.core(%tile9_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock92_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_6_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_6_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_6_core10_2 = AIE.core(%tile10_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_6_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_6_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_6_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_6_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_6_core11_2 = AIE.core(%tile11_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_6_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_6_buf_out_shim_7: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_6_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_6_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_6_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_6_buf_row_2_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_6_buf_row_1_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_6_buf_row_3_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_6_buf_row_4_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_6_buf_out_shim_7:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock112_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_6_core9_3 = AIE.core(%tile9_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_6_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_6_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_6_core10_3 = AIE.core(%tile10_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_6_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_6_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_6_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_6_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_6_core11_3 = AIE.core(%tile11_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_6_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_6_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_6_buf_row_3_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_6_buf_row_3_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_6_core9_4 = AIE.core(%tile9_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_6_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_6_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_6_core10_4 = AIE.core(%tile10_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_6_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_6_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_6_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_6_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_6_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_6_core11_4 = AIE.core(%tile11_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_6_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_6_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_6_buf_row_4_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_6_buf_row_4_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_7_core9_5 = AIE.core(%tile9_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_7_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_7_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_7_core10_5 = AIE.core(%tile10_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_7_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_7_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_7_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_7_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_7_core11_5 = AIE.core(%tile11_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_7_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_7_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_7_buf_row_5_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_7_buf_row_5_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_7_core9_6 = AIE.core(%tile9_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock96_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_7_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_7_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_7_core10_6 = AIE.core(%tile10_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_7_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_7_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_7_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_7_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_7_core11_6 = AIE.core(%tile11_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_7_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_7_buf_out_shim_7: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_7_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_7_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_7_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_7_buf_row_6_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_7_buf_row_5_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_7_buf_row_7_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_7_buf_row_8_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_7_buf_out_shim_7:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock116_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_7_core9_7 = AIE.core(%tile9_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_7_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_7_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_7_core10_7 = AIE.core(%tile10_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_7_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_7_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_7_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_7_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_7_core11_7 = AIE.core(%tile11_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_7_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_7_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_7_buf_row_7_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_7_buf_row_7_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_7_core9_8 = AIE.core(%tile9_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_7_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_7_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_7_core10_8 = AIE.core(%tile10_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_7_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_7_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_7_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_7_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_7_buf_in_shim_7: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_7_core11_8 = AIE.core(%tile11_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_7_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_7_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_7_buf_row_8_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_7_buf_row_8_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_8_core12_1 = AIE.core(%tile12_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_8_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_8_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_8_core13_1 = AIE.core(%tile13_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_8_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_8_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_8_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_8_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_8_core14_1 = AIE.core(%tile14_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_8_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_8_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_8_buf_row_1_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_8_buf_row_1_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_8_core12_2 = AIE.core(%tile12_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock122_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_8_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_8_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_8_core13_2 = AIE.core(%tile13_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_8_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_8_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_8_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_8_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_8_core14_2 = AIE.core(%tile14_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_8_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_8_buf_out_shim_10: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_8_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_8_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_8_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_8_buf_row_2_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_8_buf_row_1_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_8_buf_row_3_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_8_buf_row_4_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_8_buf_out_shim_10:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock142_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_8_core12_3 = AIE.core(%tile12_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_8_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_8_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_8_core13_3 = AIE.core(%tile13_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_8_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_8_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_8_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_8_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_8_core14_3 = AIE.core(%tile14_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_8_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_8_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_8_buf_row_3_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_8_buf_row_3_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_8_core12_4 = AIE.core(%tile12_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_8_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_8_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_8_core13_4 = AIE.core(%tile13_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_8_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_8_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_8_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_8_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_8_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_8_core14_4 = AIE.core(%tile14_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_8_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_8_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_8_buf_row_4_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_8_buf_row_4_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_9_core12_5 = AIE.core(%tile12_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_9_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_9_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_9_core13_5 = AIE.core(%tile13_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_9_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_9_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_9_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_9_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_9_core14_5 = AIE.core(%tile14_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_9_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_9_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_9_buf_row_5_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_9_buf_row_5_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_9_core12_6 = AIE.core(%tile12_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock126_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_9_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_9_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_9_core13_6 = AIE.core(%tile13_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_9_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_9_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_9_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_9_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_9_core14_6 = AIE.core(%tile14_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_9_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_9_buf_out_shim_10: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_9_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_9_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_9_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_9_buf_row_6_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_9_buf_row_5_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_9_buf_row_7_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_9_buf_row_8_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_9_buf_out_shim_10:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock146_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_9_core12_7 = AIE.core(%tile12_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_9_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_9_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_9_core13_7 = AIE.core(%tile13_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_9_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_9_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_9_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_9_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_9_core14_7 = AIE.core(%tile14_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_9_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_9_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_9_buf_row_7_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_9_buf_row_7_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_9_core12_8 = AIE.core(%tile12_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_9_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_9_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_9_core13_8 = AIE.core(%tile13_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_9_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_9_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_9_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_9_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_9_buf_in_shim_10: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_9_core14_8 = AIE.core(%tile14_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_9_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_9_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_9_buf_row_8_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_9_buf_row_8_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_10_core15_1 = AIE.core(%tile15_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_10_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_10_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_10_core16_1 = AIE.core(%tile16_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_10_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_10_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_10_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_10_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_10_core17_1 = AIE.core(%tile17_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_10_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_10_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_10_buf_row_1_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_10_buf_row_1_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_10_core15_2 = AIE.core(%tile15_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock152_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_10_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_10_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_10_core16_2 = AIE.core(%tile16_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_10_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_10_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_10_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_10_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_10_core17_2 = AIE.core(%tile17_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_10_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_10_buf_out_shim_11: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_10_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_10_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_10_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_10_buf_row_2_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_10_buf_row_1_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_10_buf_row_3_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_10_buf_row_4_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_10_buf_out_shim_11:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock172_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_10_core15_3 = AIE.core(%tile15_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_10_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_10_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_10_core16_3 = AIE.core(%tile16_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_10_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_10_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_10_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_10_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_10_core17_3 = AIE.core(%tile17_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_10_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_10_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_10_buf_row_3_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_10_buf_row_3_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_10_core15_4 = AIE.core(%tile15_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_10_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_10_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_10_core16_4 = AIE.core(%tile16_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_10_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_10_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_10_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_10_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_10_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_10_core17_4 = AIE.core(%tile17_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_10_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_10_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_10_buf_row_4_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_10_buf_row_4_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_11_core15_5 = AIE.core(%tile15_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_11_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_11_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_11_core16_5 = AIE.core(%tile16_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_11_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_11_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_11_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_11_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_11_core17_5 = AIE.core(%tile17_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_11_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_11_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_11_buf_row_5_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_11_buf_row_5_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_11_core15_6 = AIE.core(%tile15_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock156_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_11_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_11_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_11_core16_6 = AIE.core(%tile16_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_11_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_11_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_11_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_11_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_11_core17_6 = AIE.core(%tile17_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_11_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_11_buf_out_shim_11: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_11_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_11_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_11_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_11_buf_row_6_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_11_buf_row_5_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_11_buf_row_7_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_11_buf_row_8_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_11_buf_out_shim_11:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock176_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_11_core15_7 = AIE.core(%tile15_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_11_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_11_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_11_core16_7 = AIE.core(%tile16_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_11_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_11_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_11_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_11_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_11_core17_7 = AIE.core(%tile17_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_11_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_11_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_11_buf_row_7_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_11_buf_row_7_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_11_core15_8 = AIE.core(%tile15_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_11_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_11_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_11_core16_8 = AIE.core(%tile16_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_11_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_11_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_11_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_11_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_11_buf_in_shim_11: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_11_core17_8 = AIE.core(%tile17_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_11_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_11_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_11_buf_row_8_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_11_buf_row_8_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_12_core18_1 = AIE.core(%tile18_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_12_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_12_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_12_core19_1 = AIE.core(%tile19_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_12_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_12_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_12_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_12_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_12_core20_1 = AIE.core(%tile20_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_12_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_12_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_12_buf_row_1_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_12_buf_row_1_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_12_core18_2 = AIE.core(%tile18_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock182_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_12_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_12_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_12_core19_2 = AIE.core(%tile19_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_12_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_12_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_12_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_12_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_12_core20_2 = AIE.core(%tile20_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_12_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_12_buf_out_shim_18: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_12_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_12_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_12_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_12_buf_row_2_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_12_buf_row_1_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_12_buf_row_3_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_12_buf_row_4_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_12_buf_out_shim_18:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock202_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_12_core18_3 = AIE.core(%tile18_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_12_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_12_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_12_core19_3 = AIE.core(%tile19_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_12_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_12_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_12_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_12_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_12_core20_3 = AIE.core(%tile20_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_12_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_12_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_12_buf_row_3_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_12_buf_row_3_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_12_core18_4 = AIE.core(%tile18_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_12_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_12_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_12_core19_4 = AIE.core(%tile19_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_12_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_12_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_12_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_12_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_12_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_12_core20_4 = AIE.core(%tile20_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_12_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_12_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_12_buf_row_4_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_12_buf_row_4_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_13_core18_5 = AIE.core(%tile18_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_13_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_13_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_13_core19_5 = AIE.core(%tile19_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_13_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_13_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_13_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_13_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_13_core20_5 = AIE.core(%tile20_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_13_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_13_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_13_buf_row_5_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_13_buf_row_5_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_13_core18_6 = AIE.core(%tile18_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock186_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_13_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_13_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_13_core19_6 = AIE.core(%tile19_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_13_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_13_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_13_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_13_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_13_core20_6 = AIE.core(%tile20_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_13_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_13_buf_out_shim_18: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_13_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_13_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_13_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_13_buf_row_6_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_13_buf_row_5_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_13_buf_row_7_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_13_buf_row_8_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_13_buf_out_shim_18:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock206_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_13_core18_7 = AIE.core(%tile18_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_13_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_13_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_13_core19_7 = AIE.core(%tile19_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_13_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_13_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_13_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_13_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_13_core20_7 = AIE.core(%tile20_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_13_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_13_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_13_buf_row_7_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_13_buf_row_7_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_13_core18_8 = AIE.core(%tile18_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_13_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_13_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_13_core19_8 = AIE.core(%tile19_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_13_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_13_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_13_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_13_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_13_buf_in_shim_18: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_13_core20_8 = AIE.core(%tile20_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_13_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_13_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_13_buf_row_8_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_13_buf_row_8_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_14_core21_1 = AIE.core(%tile21_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_14_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_14_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_14_core22_1 = AIE.core(%tile22_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_14_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_14_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_14_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_14_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_14_core23_1 = AIE.core(%tile23_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_14_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_14_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_14_buf_row_1_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_14_buf_row_1_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_14_core21_2 = AIE.core(%tile21_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock212_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_14_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_14_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_14_core22_2 = AIE.core(%tile22_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_14_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_14_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_14_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_14_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_14_core23_2 = AIE.core(%tile23_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_14_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_14_buf_out_shim_19: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_14_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_14_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_14_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_14_buf_row_2_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_14_buf_row_1_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_14_buf_row_3_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_14_buf_row_4_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_14_buf_out_shim_19:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock232_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_14_core21_3 = AIE.core(%tile21_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_14_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_14_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_14_core22_3 = AIE.core(%tile22_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_14_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_14_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_14_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_14_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_14_core23_3 = AIE.core(%tile23_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_14_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_14_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_14_buf_row_3_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_14_buf_row_3_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_14_core21_4 = AIE.core(%tile21_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_14_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_14_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_14_core22_4 = AIE.core(%tile22_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_14_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_14_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_14_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_14_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_14_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_14_core23_4 = AIE.core(%tile23_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_14_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_14_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_14_buf_row_4_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_14_buf_row_4_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_15_core21_5 = AIE.core(%tile21_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_15_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_15_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_15_core22_5 = AIE.core(%tile22_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_15_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_15_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_15_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_15_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_15_core23_5 = AIE.core(%tile23_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_15_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_15_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_15_buf_row_5_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_15_buf_row_5_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_15_core21_6 = AIE.core(%tile21_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock216_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_15_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_15_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_15_core22_6 = AIE.core(%tile22_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_15_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_15_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_15_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_15_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_15_core23_6 = AIE.core(%tile23_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_15_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_15_buf_out_shim_19: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_15_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_15_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_15_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_15_buf_row_6_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_15_buf_row_5_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_15_buf_row_7_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_15_buf_row_8_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_15_buf_out_shim_19:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock236_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_15_core21_7 = AIE.core(%tile21_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_15_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_15_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_15_core22_7 = AIE.core(%tile22_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_15_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_15_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_15_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_15_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_15_core23_7 = AIE.core(%tile23_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_15_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_15_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_15_buf_row_7_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_15_buf_row_7_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_15_core21_8 = AIE.core(%tile21_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_15_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_15_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_15_core22_8 = AIE.core(%tile22_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_15_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_15_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_15_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_15_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_15_buf_in_shim_19: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_15_core23_8 = AIE.core(%tile23_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_15_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_15_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_15_buf_row_8_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_15_buf_row_8_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_16_core24_1 = AIE.core(%tile24_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_16_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_16_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_16_core25_1 = AIE.core(%tile25_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_16_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_16_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_16_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_16_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_16_core26_1 = AIE.core(%tile26_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_16_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_16_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_16_buf_row_1_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_16_buf_row_1_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_16_core24_2 = AIE.core(%tile24_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock242_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_16_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_16_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_16_core25_2 = AIE.core(%tile25_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_16_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_16_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_16_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_16_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_16_core26_2 = AIE.core(%tile26_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_16_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_16_buf_out_shim_26: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_16_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_16_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_16_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_16_buf_row_2_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_16_buf_row_1_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_16_buf_row_3_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_16_buf_row_4_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_16_buf_out_shim_26:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock262_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_16_core24_3 = AIE.core(%tile24_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_16_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_16_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_16_core25_3 = AIE.core(%tile25_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_16_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_16_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_16_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_16_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_16_core26_3 = AIE.core(%tile26_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_16_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_16_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_16_buf_row_3_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_16_buf_row_3_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_16_core24_4 = AIE.core(%tile24_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_16_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_16_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_16_core25_4 = AIE.core(%tile25_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_16_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_16_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_16_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_16_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_16_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_16_core26_4 = AIE.core(%tile26_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_16_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_16_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_16_buf_row_4_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_16_buf_row_4_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_17_core24_5 = AIE.core(%tile24_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_17_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_17_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_17_core25_5 = AIE.core(%tile25_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_17_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_17_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_17_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_17_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_17_core26_5 = AIE.core(%tile26_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_17_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_17_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_17_buf_row_5_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_17_buf_row_5_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_17_core24_6 = AIE.core(%tile24_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock246_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_17_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_17_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_17_core25_6 = AIE.core(%tile25_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_17_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_17_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_17_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_17_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_17_core26_6 = AIE.core(%tile26_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_17_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_17_buf_out_shim_26: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_17_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_17_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_17_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_17_buf_row_6_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_17_buf_row_5_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_17_buf_row_7_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_17_buf_row_8_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_17_buf_out_shim_26:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock266_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_17_core24_7 = AIE.core(%tile24_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_17_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_17_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_17_core25_7 = AIE.core(%tile25_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_17_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_17_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_17_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_17_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_17_core26_7 = AIE.core(%tile26_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_17_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_17_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_17_buf_row_7_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_17_buf_row_7_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_17_core24_8 = AIE.core(%tile24_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_17_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_17_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_17_core25_8 = AIE.core(%tile25_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_17_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_17_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_17_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_17_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_17_buf_in_shim_26: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_17_core26_8 = AIE.core(%tile26_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_17_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_17_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_17_buf_row_8_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_17_buf_row_8_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_18_core27_1 = AIE.core(%tile27_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_18_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_18_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_18_core28_1 = AIE.core(%tile28_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_18_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_18_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_18_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_18_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_18_core29_1 = AIE.core(%tile29_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_18_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_18_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_18_buf_row_1_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_18_buf_row_1_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_18_core27_2 = AIE.core(%tile27_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock272_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_18_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_18_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_18_core28_2 = AIE.core(%tile28_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_18_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_18_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_18_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_18_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_18_core29_2 = AIE.core(%tile29_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_18_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_18_buf_out_shim_27: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_18_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_18_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_18_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_18_buf_row_2_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_18_buf_row_1_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_18_buf_row_3_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_18_buf_row_4_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_18_buf_out_shim_27:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock292_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_18_core27_3 = AIE.core(%tile27_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_18_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_18_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_18_core28_3 = AIE.core(%tile28_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_18_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_18_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_18_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_18_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_18_core29_3 = AIE.core(%tile29_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_18_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_18_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_18_buf_row_3_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_18_buf_row_3_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_18_core27_4 = AIE.core(%tile27_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_18_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_18_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_18_core28_4 = AIE.core(%tile28_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_18_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_18_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_18_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_18_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_18_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_18_core29_4 = AIE.core(%tile29_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_18_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_18_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_18_buf_row_4_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_18_buf_row_4_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_19_core27_5 = AIE.core(%tile27_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_19_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_19_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_19_core28_5 = AIE.core(%tile28_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_19_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_19_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_19_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_19_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_19_core29_5 = AIE.core(%tile29_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_19_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_19_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_19_buf_row_5_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_19_buf_row_5_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_19_core27_6 = AIE.core(%tile27_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock276_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_19_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_19_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_19_core28_6 = AIE.core(%tile28_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_19_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_19_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_19_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_19_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_19_core29_6 = AIE.core(%tile29_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_19_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_19_buf_out_shim_27: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_19_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_19_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_19_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_19_buf_row_6_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_19_buf_row_5_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_19_buf_row_7_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_19_buf_row_8_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_19_buf_out_shim_27:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock296_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_19_core27_7 = AIE.core(%tile27_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_19_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_19_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_19_core28_7 = AIE.core(%tile28_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_19_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_19_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_19_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_19_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_19_core29_7 = AIE.core(%tile29_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_19_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_19_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_19_buf_row_7_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_19_buf_row_7_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_19_core27_8 = AIE.core(%tile27_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_19_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_19_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_19_core28_8 = AIE.core(%tile28_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_19_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_19_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_19_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_19_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_19_buf_in_shim_27: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_19_core29_8 = AIE.core(%tile29_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_19_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_19_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_19_buf_row_8_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_19_buf_row_8_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_20_core30_1 = AIE.core(%tile30_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_20_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_20_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_20_core31_1 = AIE.core(%tile31_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_20_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_20_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_20_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_20_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_20_core32_1 = AIE.core(%tile32_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_20_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_20_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_20_buf_row_1_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_20_buf_row_1_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_20_core30_2 = AIE.core(%tile30_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock302_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_20_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_20_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_20_core31_2 = AIE.core(%tile31_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_20_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_20_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_20_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_20_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_20_core32_2 = AIE.core(%tile32_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_20_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_20_buf_out_shim_34: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_20_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_20_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_20_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_20_buf_row_2_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_20_buf_row_1_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_20_buf_row_3_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_20_buf_row_4_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_20_buf_out_shim_34:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock322_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_20_core30_3 = AIE.core(%tile30_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_20_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_20_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_20_core31_3 = AIE.core(%tile31_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_20_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_20_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_20_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_20_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_20_core32_3 = AIE.core(%tile32_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_20_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_20_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_20_buf_row_3_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_20_buf_row_3_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_20_core30_4 = AIE.core(%tile30_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_20_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_20_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_20_core31_4 = AIE.core(%tile31_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_20_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_20_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_20_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_20_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_20_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_20_core32_4 = AIE.core(%tile32_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_20_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_20_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_20_buf_row_4_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_20_buf_row_4_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_21_core30_5 = AIE.core(%tile30_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_21_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_21_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_21_core31_5 = AIE.core(%tile31_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_21_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_21_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_21_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_21_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_21_core32_5 = AIE.core(%tile32_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_21_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_21_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_21_buf_row_5_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_21_buf_row_5_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_21_core30_6 = AIE.core(%tile30_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock306_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_21_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_21_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_21_core31_6 = AIE.core(%tile31_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_21_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_21_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_21_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_21_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_21_core32_6 = AIE.core(%tile32_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_21_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_21_buf_out_shim_34: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_21_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_21_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_21_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_21_buf_row_6_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_21_buf_row_5_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_21_buf_row_7_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_21_buf_row_8_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_21_buf_out_shim_34:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock326_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_21_core30_7 = AIE.core(%tile30_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_21_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_21_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_21_core31_7 = AIE.core(%tile31_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_21_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_21_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_21_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_21_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_21_core32_7 = AIE.core(%tile32_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_21_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_21_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_21_buf_row_7_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_21_buf_row_7_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_21_core30_8 = AIE.core(%tile30_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_21_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_21_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_21_core31_8 = AIE.core(%tile31_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_21_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_21_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_21_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_21_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_21_buf_in_shim_34: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_21_core32_8 = AIE.core(%tile32_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_21_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_21_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_21_buf_row_8_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_21_buf_row_8_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_22_core33_1 = AIE.core(%tile33_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_22_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_22_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_22_core34_1 = AIE.core(%tile34_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_22_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_22_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_22_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_22_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_22_core35_1 = AIE.core(%tile35_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_22_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_22_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_22_buf_row_1_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_22_buf_row_1_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_22_core33_2 = AIE.core(%tile33_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock332_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_22_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_22_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_22_core34_2 = AIE.core(%tile34_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_22_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_22_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_22_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_22_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_22_core35_2 = AIE.core(%tile35_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_22_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_22_buf_out_shim_35: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_22_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_22_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_22_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_22_buf_row_2_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_22_buf_row_1_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_22_buf_row_3_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_22_buf_row_4_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_22_buf_out_shim_35:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock352_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_22_core33_3 = AIE.core(%tile33_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_22_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_22_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_22_core34_3 = AIE.core(%tile34_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_22_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_22_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_22_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_22_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_22_core35_3 = AIE.core(%tile35_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_22_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_22_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_22_buf_row_3_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_22_buf_row_3_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_22_core33_4 = AIE.core(%tile33_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_22_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_22_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_22_core34_4 = AIE.core(%tile34_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_22_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_22_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_22_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_22_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_22_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_22_core35_4 = AIE.core(%tile35_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_22_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_22_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_22_buf_row_4_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_22_buf_row_4_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_23_core33_5 = AIE.core(%tile33_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_23_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_23_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_23_core34_5 = AIE.core(%tile34_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_23_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_23_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_23_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_23_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_23_core35_5 = AIE.core(%tile35_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_23_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_23_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_23_buf_row_5_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_23_buf_row_5_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_23_core33_6 = AIE.core(%tile33_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock336_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_23_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_23_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_23_core34_6 = AIE.core(%tile34_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_23_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_23_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_23_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_23_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_23_core35_6 = AIE.core(%tile35_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_23_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_23_buf_out_shim_35: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_23_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_23_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_23_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_23_buf_row_6_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_23_buf_row_5_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_23_buf_row_7_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_23_buf_row_8_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_23_buf_out_shim_35:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock356_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_23_core33_7 = AIE.core(%tile33_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_23_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_23_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_23_core34_7 = AIE.core(%tile34_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_23_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_23_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_23_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_23_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_23_core35_7 = AIE.core(%tile35_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_23_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_23_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_23_buf_row_7_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_23_buf_row_7_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_23_core33_8 = AIE.core(%tile33_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_23_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_23_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_23_core34_8 = AIE.core(%tile34_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_23_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_23_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_23_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_23_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_23_buf_in_shim_35: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_23_core35_8 = AIE.core(%tile35_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_23_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_23_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_23_buf_row_8_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_23_buf_row_8_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_24_core36_1 = AIE.core(%tile36_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_24_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_24_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_24_core37_1 = AIE.core(%tile37_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_24_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_24_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_24_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_24_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_24_core38_1 = AIE.core(%tile38_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_24_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_24_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_24_buf_row_1_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_24_buf_row_1_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_24_core36_2 = AIE.core(%tile36_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock362_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_24_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_24_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_24_core37_2 = AIE.core(%tile37_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_24_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_24_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_24_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_24_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_24_core38_2 = AIE.core(%tile38_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_24_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_24_buf_out_shim_42: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_24_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_24_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_24_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_24_buf_row_2_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_24_buf_row_1_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_24_buf_row_3_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_24_buf_row_4_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_24_buf_out_shim_42:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock382_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_24_core36_3 = AIE.core(%tile36_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_24_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_24_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_24_core37_3 = AIE.core(%tile37_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_24_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_24_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_24_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_24_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_24_core38_3 = AIE.core(%tile38_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_24_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_24_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_24_buf_row_3_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_24_buf_row_3_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_24_core36_4 = AIE.core(%tile36_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_24_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_24_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_24_core37_4 = AIE.core(%tile37_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_24_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_24_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_24_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_24_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_24_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_24_core38_4 = AIE.core(%tile38_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_24_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_24_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_24_buf_row_4_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_24_buf_row_4_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_25_core36_5 = AIE.core(%tile36_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_25_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_25_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_25_core37_5 = AIE.core(%tile37_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_25_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_25_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_25_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_25_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_25_core38_5 = AIE.core(%tile38_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_25_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_25_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_25_buf_row_5_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_25_buf_row_5_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_25_core36_6 = AIE.core(%tile36_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock366_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_25_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_25_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_25_core37_6 = AIE.core(%tile37_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_25_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_25_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_25_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_25_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_25_core38_6 = AIE.core(%tile38_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_25_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_25_buf_out_shim_42: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_25_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_25_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_25_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_25_buf_row_6_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_25_buf_row_5_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_25_buf_row_7_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_25_buf_row_8_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_25_buf_out_shim_42:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock386_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_25_core36_7 = AIE.core(%tile36_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_25_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_25_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_25_core37_7 = AIE.core(%tile37_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_25_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_25_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_25_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_25_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_25_core38_7 = AIE.core(%tile38_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_25_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_25_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_25_buf_row_7_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_25_buf_row_7_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_25_core36_8 = AIE.core(%tile36_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_25_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_25_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_25_core37_8 = AIE.core(%tile37_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_25_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_25_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_25_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_25_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_25_buf_in_shim_42: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_25_core38_8 = AIE.core(%tile38_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_25_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_25_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_25_buf_row_8_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_25_buf_row_8_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_26_core39_1 = AIE.core(%tile39_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_26_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_26_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_26_core40_1 = AIE.core(%tile40_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_26_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_26_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_26_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_26_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_26_core41_1 = AIE.core(%tile41_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_26_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_26_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_26_buf_row_1_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_26_buf_row_1_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_26_core39_2 = AIE.core(%tile39_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock392_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_26_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_26_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_26_core40_2 = AIE.core(%tile40_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_26_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_26_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_26_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_26_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_26_core41_2 = AIE.core(%tile41_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_26_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_26_buf_out_shim_43: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_26_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_26_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_26_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_26_buf_row_2_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_26_buf_row_1_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_26_buf_row_3_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_26_buf_row_4_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_26_buf_out_shim_43:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock412_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_26_core39_3 = AIE.core(%tile39_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_26_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_26_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_26_core40_3 = AIE.core(%tile40_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_26_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_26_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_26_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_26_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_26_core41_3 = AIE.core(%tile41_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_26_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_26_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_26_buf_row_3_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_26_buf_row_3_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_26_core39_4 = AIE.core(%tile39_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_26_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_26_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_26_core40_4 = AIE.core(%tile40_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_26_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_26_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_26_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_26_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_26_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_26_core41_4 = AIE.core(%tile41_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_26_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_26_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_26_buf_row_4_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_26_buf_row_4_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_27_core39_5 = AIE.core(%tile39_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_27_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_27_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_27_core40_5 = AIE.core(%tile40_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_27_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_27_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_27_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_27_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_27_core41_5 = AIE.core(%tile41_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_27_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_27_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_27_buf_row_5_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_27_buf_row_5_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_27_core39_6 = AIE.core(%tile39_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock396_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_27_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_27_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_27_core40_6 = AIE.core(%tile40_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_27_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_27_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_27_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_27_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_27_core41_6 = AIE.core(%tile41_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_27_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_27_buf_out_shim_43: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_27_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_27_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_27_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_27_buf_row_6_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_27_buf_row_5_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_27_buf_row_7_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_27_buf_row_8_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_27_buf_out_shim_43:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock416_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_27_core39_7 = AIE.core(%tile39_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_27_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_27_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_27_core40_7 = AIE.core(%tile40_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_27_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_27_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_27_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_27_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_27_core41_7 = AIE.core(%tile41_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_27_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_27_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_27_buf_row_7_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_27_buf_row_7_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_27_core39_8 = AIE.core(%tile39_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_27_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_27_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_27_core40_8 = AIE.core(%tile40_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_27_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_27_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_27_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_27_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_27_buf_in_shim_43: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_27_core41_8 = AIE.core(%tile41_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_27_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_27_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_27_buf_row_8_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_27_buf_row_8_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_28_core42_1 = AIE.core(%tile42_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_28_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_28_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_28_core43_1 = AIE.core(%tile43_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_28_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_28_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_28_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_28_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_28_core44_1 = AIE.core(%tile44_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_28_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_28_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_28_buf_row_1_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_28_buf_row_1_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_28_core42_2 = AIE.core(%tile42_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock422_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_28_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_28_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_28_core43_2 = AIE.core(%tile43_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_28_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_28_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_28_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_28_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_28_core44_2 = AIE.core(%tile44_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_28_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_28_buf_out_shim_46: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_28_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_28_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_28_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_28_buf_row_2_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_28_buf_row_1_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_28_buf_row_3_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_28_buf_row_4_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_28_buf_out_shim_46:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock442_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_28_core42_3 = AIE.core(%tile42_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_28_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_28_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_28_core43_3 = AIE.core(%tile43_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_28_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_28_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_28_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_28_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_28_core44_3 = AIE.core(%tile44_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_28_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_28_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_28_buf_row_3_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_28_buf_row_3_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_28_core42_4 = AIE.core(%tile42_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_28_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_28_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_28_core43_4 = AIE.core(%tile43_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_28_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_28_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_28_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_28_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_28_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_28_core44_4 = AIE.core(%tile44_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_28_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_28_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_28_buf_row_4_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_28_buf_row_4_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_29_core42_5 = AIE.core(%tile42_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_29_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_29_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_29_core43_5 = AIE.core(%tile43_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_29_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_29_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_29_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_29_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_29_core44_5 = AIE.core(%tile44_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_29_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_29_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_29_buf_row_5_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_29_buf_row_5_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_29_core42_6 = AIE.core(%tile42_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock426_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_29_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_29_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_29_core43_6 = AIE.core(%tile43_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_29_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_29_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_29_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_29_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_29_core44_6 = AIE.core(%tile44_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_29_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_29_buf_out_shim_46: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_29_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_29_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_29_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_29_buf_row_6_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_29_buf_row_5_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_29_buf_row_7_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_29_buf_row_8_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_29_buf_out_shim_46:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock446_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_29_core42_7 = AIE.core(%tile42_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_29_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_29_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_29_core43_7 = AIE.core(%tile43_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_29_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_29_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_29_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_29_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_29_core44_7 = AIE.core(%tile44_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_29_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_29_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_29_buf_row_7_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_29_buf_row_7_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_29_core42_8 = AIE.core(%tile42_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_29_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_29_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_29_core43_8 = AIE.core(%tile43_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_29_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_29_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_29_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_29_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_29_buf_in_shim_46: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_29_core44_8 = AIE.core(%tile44_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_29_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_29_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_29_buf_row_8_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_29_buf_row_8_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_30_core45_1 = AIE.core(%tile45_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_30_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_30_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_30_core46_1 = AIE.core(%tile46_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_30_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_30_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_30_buf_row_1_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_30_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_30_core47_1 = AIE.core(%tile47_1) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_30_buf_row_1_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_30_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_30_buf_row_1_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_30_buf_row_1_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_30_core45_2 = AIE.core(%tile45_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock452_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_30_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_30_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_30_core46_2 = AIE.core(%tile46_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_30_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_30_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_30_buf_row_2_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_30_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_30_core47_2 = AIE.core(%tile47_2) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_30_buf_row_2_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_30_buf_out_shim_47: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_30_buf_row_1_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_30_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_30_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_30_buf_row_2_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_30_buf_row_1_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_30_buf_row_3_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_30_buf_row_4_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_30_buf_out_shim_47:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock472_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_30_core45_3 = AIE.core(%tile45_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_30_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_30_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_30_core46_3 = AIE.core(%tile46_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_30_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_30_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_30_buf_row_3_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_30_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_30_core47_3 = AIE.core(%tile47_3) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_30_buf_row_3_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_30_buf_row_3_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_30_buf_row_3_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_30_buf_row_3_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_30_core45_4 = AIE.core(%tile45_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_30_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_30_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_30_core46_4 = AIE.core(%tile46_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_30_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_30_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_30_buf_row_4_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_30_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_30_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_30_core47_4 = AIE.core(%tile47_4) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_30_buf_row_4_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_30_buf_row_4_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_30_buf_row_4_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_30_buf_row_4_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_31_core45_5 = AIE.core(%tile45_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_31_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_31_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_31_core46_5 = AIE.core(%tile46_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_31_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_31_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_31_buf_row_5_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_31_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_31_core47_5 = AIE.core(%tile47_5) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_31_buf_row_5_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_31_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_31_buf_row_5_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_31_buf_row_5_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_31_core45_6 = AIE.core(%tile45_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    AIE.useLock(%lock456_14, "Acquire", 0) // start the timer
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_31_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_31_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_31_core46_6 = AIE.core(%tile46_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_31_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_31_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_31_buf_row_6_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_31_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  // Gathering Tile
  %block_31_core47_6 = AIE.core(%tile47_6) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_31_buf_row_6_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_31_buf_out_shim_47: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
  // Acquire all elements and add in order
      %obj_out_flux_element0 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_flux_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
  // Acquiring outputs from other flux
      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Consume>(%block_31_buf_row_5_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux3 = AIE.objectFifo.acquire<Consume>(%block_31_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from3 = AIE.objectFifo.subview.access %obj_out_subview_flux3[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux4 = AIE.objectFifo.acquire<Consume>(%block_31_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %final_out_from4 = AIE.objectFifo.subview.access %obj_out_subview_flux4[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

  // Ordering and copying data to gather tile (src-->dst)
      memref.copy %final_out_from1 , %obj_out_flux_element0 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from3 , %obj_out_flux_element2 : memref<256xi32> to memref<256xi32>
      memref.copy %final_out_from4 , %obj_out_flux_element3 : memref<256xi32> to memref<256xi32>
      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_31_buf_row_6_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_31_buf_row_5_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_31_buf_row_7_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Consume>(%block_31_buf_row_8_out_flx2:!AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_31_buf_out_shim_47:!AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.useLock(%lock476_14, "Acquire", 0) // stop the timer
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_31_core45_7 = AIE.core(%tile45_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_31_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_31_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_31_core46_7 = AIE.core(%tile46_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_31_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_31_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_31_buf_row_7_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_31_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_31_core47_7 = AIE.core(%tile47_7) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_31_buf_row_7_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_31_buf_row_7_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_31_buf_row_7_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_31_buf_row_7_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

  %block_31_core45_8 = AIE.core(%tile45_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row0 = AIE.objectFifo.subview.access %obj_in_subview[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row4 = AIE.objectFifo.subview.access %obj_in_subview[7] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Produce>(%block_31_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_lap(%row0,%row1,%row2,%row3,%row4,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>,  memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 1)
      AIE.objectFifo.release<Produce>(%block_31_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
    }
    AIE.objectFifo.release<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 4)
    AIE.end
  } { link_with="hdiff_lap.o" }

  %block_31_core46_8 = AIE.core(%tile46_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_in_subview = AIE.objectFifo.acquire<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 8) : !AIE.objectFifoSubview<memref<256xi32>>
      %row1 = AIE.objectFifo.subview.access %obj_in_subview[4] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row2 = AIE.objectFifo.subview.access %obj_in_subview[5] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %row3 = AIE.objectFifo.subview.access %obj_in_subview[6] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_lap = AIE.objectFifo.acquire<Consume>(%block_31_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_lap1 = AIE.objectFifo.subview.access %obj_out_subview_lap[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap2 = AIE.objectFifo.subview.access %obj_out_subview_lap[1] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap3 = AIE.objectFifo.subview.access %obj_out_subview_lap[2] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>
      %obj_out_lap4 = AIE.objectFifo.subview.access %obj_out_subview_lap[3] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      %obj_out_subview_flux1 = AIE.objectFifo.acquire<Produce>(%block_31_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_out_flux_inter1 = AIE.objectFifo.subview.access %obj_out_subview_flux1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter2 = AIE.objectFifo.subview.access %obj_out_subview_flux1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter3 = AIE.objectFifo.subview.access %obj_out_subview_flux1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter4 = AIE.objectFifo.subview.access %obj_out_subview_flux1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_out_flux_inter5 = AIE.objectFifo.subview.access %obj_out_subview_flux1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      func.call @hdiff_flux1(%row1,%row2,%row3,%obj_out_lap1,%obj_out_lap2,%obj_out_lap3,%obj_out_lap4, %obj_out_flux_inter1 , %obj_out_flux_inter2, %obj_out_flux_inter3, %obj_out_flux_inter4, %obj_out_flux_inter5) : (memref<256xi32>,memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>, memref<256xi32>,  memref<256xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>,  memref<512xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_31_buf_row_8_inter_lap: !AIE.objectFifo<memref<256xi32>>, 4)
      AIE.objectFifo.release<Produce>(%block_31_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.objectFifo.release<Consume>(%block_31_buf_in_shim_47: !AIE.objectFifo<memref<256xi32>>, 7)
    AIE.end
  } { link_with="hdiff_flux1.o" }

  %block_31_core47_8 = AIE.core(%tile47_8) {
    %lb = arith.constant 0 : index
    %ub = arith.constant 2 : index
    %step = arith.constant 1 : index
    scf.for %iv = %lb to %ub step %step {  
      %obj_out_subview_flux_inter1 = AIE.objectFifo.acquire<Consume>(%block_31_buf_row_8_inter_flx1: !AIE.objectFifo<memref<512xi32>>, 5): !AIE.objectFifoSubview<memref<512xi32>>
      %obj_flux_inter_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[0] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element2 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[1] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element3 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[2] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element4 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[3] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>
      %obj_flux_inter_element5 = AIE.objectFifo.subview.access %obj_out_subview_flux_inter1[4] : !AIE.objectFifoSubview<memref<512xi32>> -> memref<512xi32>

      %obj_out_subview_flux = AIE.objectFifo.acquire<Produce>(%block_31_buf_row_8_out_flx2: !AIE.objectFifo<memref<256xi32>>, 1): !AIE.objectFifoSubview<memref<256xi32>>
      %obj_out_flux_element1 = AIE.objectFifo.subview.access %obj_out_subview_flux[0] : !AIE.objectFifoSubview<memref<256xi32>> -> memref<256xi32>

      func.call @hdiff_flux2(%obj_flux_inter_element1, %obj_flux_inter_element2,%obj_flux_inter_element3, %obj_flux_inter_element4, %obj_flux_inter_element5,  %obj_out_flux_element1 ) : ( memref<512xi32>,  memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<512xi32>, memref<256xi32>) -> ()

      AIE.objectFifo.release<Consume>(%block_31_buf_row_8_inter_flx1 :!AIE.objectFifo<memref<512xi32>>, 5)
      AIE.objectFifo.release<Produce>(%block_31_buf_row_8_out_flx2 :!AIE.objectFifo<memref<256xi32>>, 1)
    }
    AIE.end
  } { link_with="hdiff_flux2.o" }

}
