
// Function: void sequence((NOTE: unhandled type) , (NOTE: unhandled type) , (NOTE: unhandled type) )
[
  0 : sequence bnd=e
  1 : _cst val=1f typ=__i1
  2 : __arg0 typ=__Pvoid
  3 : __arg1 typ=__Pvoid
  4 : __arg2 typ=__Pvoid
]
Lsequence
{
  { // BB#0
    ( vreg.1 var=1 ) const ( ) <1>;
    ( vreg.2 var=2 ) inp ( ) <2>;
    ( vreg.3 var=3 ) inp ( ) <3>;
    ( vreg.4 var=4 ) inp ( ) <4>;
    ( ) return ( ) <5>;
  } #2 nxt=-2
} #1
0 : 'sequence';
----------
0 : (0,0:0,0);
----------

// Function: void core_6_2()
[
  0 : core_6_2 bnd=e
  1 : _cst val=1f typ=__i1
  2 : _cst val=9223372036854775806f typ=__i64
  3 : _cst val=0f typ=__i64
  4 : __tmp typ=__i64
  5 : _cst val=1f typ=__i64
  6 : _cst val=16f typ=__i32
  7 : _cst val=1f typ=__i32
  8 : llvm___aie___lock___acquire___reg bnd=e
  9 : _cst val=0f
  10 : _cst val=18f typ=__i32
  11 : _cst val=0f typ=__i32
  12 : _cst val=64f
  13 : _cst val=4f
  14 : in_cons_buff_0 typ=__Pvoid bnd=e
  15 : __tmp typ=__i32
  16 : _cst val=3f typ=__i32
  17 : out_buff_0 typ=__Pvoid bnd=e
  18 : _cst val=4f typ=__i32
  19 : __tmp typ=__Pvoid
  20 : _cst val=8f typ=__i32
  21 : _cst val=12f typ=__i32
  22 : _cst val=20f typ=__i32
  23 : _cst val=24f typ=__i32
  24 : _cst val=28f typ=__i32
  25 : _cst val=32f typ=__i32
  26 : _cst val=36f typ=__i32
  27 : _cst val=40f typ=__i32
  28 : _cst val=44f typ=__i32
  29 : _cst val=48f typ=__i32
  30 : _cst val=52f typ=__i32
  31 : _cst val=56f typ=__i32
  32 : _cst val=60f typ=__i32
  33 : llvm___aie___lock___release___reg bnd=e
  34 : _cst val=17f typ=__i32
  35 : _cst val=19f typ=__i32
  36 : in_cons_buff_1 typ=__Pvoid bnd=e
  37 : out_buff_1 typ=__Pvoid bnd=e
  38 : _cst val=2f typ=__i64
  39 : __tmp typ=__i1
  40 : _cst val=9223372036854775807f typ=__i64
]
Lcore_6_2
{
  { // BB#0
    ( vreg.1 var=1 ) const ( ) <1>;
    ( vreg.2 var=2 ) const ( ) <2>;
    ( vreg.3 var=3 ) const ( ) <3>;
  } #2
  // NOTE: GOTO FROM BB#0 TO BB#1 [HIDDEN]
  do {
    { // no associated BB
      ( vreg.238 var=4 ) entry ( vreg.233 vreg.3 ) <238>;
    } #4
    {
      sync {
        ( vreg.4 var=4 ) sync_link ( vreg.238 ) sid=1 <4>;
      } #6
      { // BB#1
        ( ) chain_tie_loop ( ) <5>;
        ( vreg.6 var=5 ) const ( ) <6>;
        ( vreg.7 var=3 ) const ( ) <7>;
      } #7
      // NOTE: GOTO FROM BB#1 TO BB#2 [HIDDEN]
      do {
        { // no associated BB
          ( vreg.229 var=4 ) entry ( vreg.224 vreg.7 ) <229>;
        } #9
        {
          sync {
            ( vreg.8 var=4 ) sync_link ( vreg.229 ) sid=2 <8>;
          } #11
          { // BB#2
            ( ) chain_tie_loop ( ) <9>;
            ( vreg.10 var=6 ) const ( ) <10>;
            ( vreg.11 var=7 ) const ( ) <11>;
            ( vreg.12 var=8 ) const ( ) <12>;
            ( vreg.13 var=9 ) const ( ) <13>;
            ( ) lcall /* llvm___aie___lock___acquire___reg */ ( vreg.13 vreg.12 vreg.10 vreg.11 ) <14>;
            ( vreg.15 var=10 ) const ( ) <15>;
            ( vreg.16 var=11 ) const ( ) <16>;
            ( vreg.17 var=8 ) const ( ) <17>;
            ( vreg.18 var=9 ) const ( ) <18>;
            ( ) lcall /* llvm___aie___lock___acquire___reg */ ( vreg.18 vreg.17 vreg.15 vreg.16 ) <19>;
            ( vreg.20 var=12 ) const ( ) <20>;
            ( vreg.21 var=13 ) const ( ) <21>;
            ( vreg.22 var=14 ) global ( vreg.20 vreg.21 ) <22>;
            ( vreg.23 var=15 ) load___i32 ( vreg.22 ) <23>;
            ( vreg.24 var=16 ) const ( ) <24>;
            ( vreg.25 var=15 ) mul___i32 ( vreg.23 vreg.24 ) <25>;
            ( vreg.26 var=12 ) const ( ) <26>;
            ( vreg.27 var=13 ) const ( ) <27>;
            ( vreg.28 var=17 ) global ( vreg.26 vreg.27 ) <28>;
            ( ) store___i32 ( vreg.25 vreg.28 ) <29>;
            ( vreg.30 var=18 ) const ( ) <30>;
            ( vreg.31 var=19 ) add___Pvoid ( vreg.22 vreg.30 ) <31>;
            ( vreg.32 var=15 ) load___i32 ( vreg.31 ) <32>;
            ( vreg.33 var=15 ) mul___i32 ( vreg.32 vreg.24 ) <33>;
            ( vreg.34 var=19 ) add___Pvoid ( vreg.28 vreg.30 ) <34>;
            ( ) store___i32 ( vreg.33 vreg.34 ) <35>;
            ( vreg.36 var=20 ) const ( ) <36>;
            ( vreg.37 var=19 ) add___Pvoid ( vreg.22 vreg.36 ) <37>;
            ( vreg.38 var=15 ) load___i32 ( vreg.37 ) <38>;
            ( vreg.39 var=15 ) mul___i32 ( vreg.38 vreg.24 ) <39>;
            ( vreg.40 var=19 ) add___Pvoid ( vreg.28 vreg.36 ) <40>;
            ( ) store___i32 ( vreg.39 vreg.40 ) <41>;
            ( vreg.42 var=21 ) const ( ) <42>;
            ( vreg.43 var=19 ) add___Pvoid ( vreg.22 vreg.42 ) <43>;
            ( vreg.44 var=15 ) load___i32 ( vreg.43 ) <44>;
            ( vreg.45 var=15 ) mul___i32 ( vreg.44 vreg.24 ) <45>;
            ( vreg.46 var=19 ) add___Pvoid ( vreg.28 vreg.42 ) <46>;
            ( ) store___i32 ( vreg.45 vreg.46 ) <47>;
            ( vreg.48 var=19 ) add___Pvoid ( vreg.22 vreg.10 ) <48>;
            ( vreg.49 var=15 ) load___i32 ( vreg.48 ) <49>;
            ( vreg.50 var=15 ) mul___i32 ( vreg.49 vreg.24 ) <50>;
            ( vreg.51 var=19 ) add___Pvoid ( vreg.28 vreg.10 ) <51>;
            ( ) store___i32 ( vreg.50 vreg.51 ) <52>;
            ( vreg.53 var=22 ) const ( ) <53>;
            ( vreg.54 var=19 ) add___Pvoid ( vreg.22 vreg.53 ) <54>;
            ( vreg.55 var=15 ) load___i32 ( vreg.54 ) <55>;
            ( vreg.56 var=15 ) mul___i32 ( vreg.55 vreg.24 ) <56>;
            ( vreg.57 var=19 ) add___Pvoid ( vreg.28 vreg.53 ) <57>;
            ( ) store___i32 ( vreg.56 vreg.57 ) <58>;
            ( vreg.59 var=23 ) const ( ) <59>;
            ( vreg.60 var=19 ) add___Pvoid ( vreg.22 vreg.59 ) <60>;
            ( vreg.61 var=15 ) load___i32 ( vreg.60 ) <61>;
            ( vreg.62 var=15 ) mul___i32 ( vreg.61 vreg.24 ) <62>;
            ( vreg.63 var=19 ) add___Pvoid ( vreg.28 vreg.59 ) <63>;
            ( ) store___i32 ( vreg.62 vreg.63 ) <64>;
            ( vreg.65 var=24 ) const ( ) <65>;
            ( vreg.66 var=19 ) add___Pvoid ( vreg.22 vreg.65 ) <66>;
            ( vreg.67 var=15 ) load___i32 ( vreg.66 ) <67>;
            ( vreg.68 var=15 ) mul___i32 ( vreg.67 vreg.24 ) <68>;
            ( vreg.69 var=19 ) add___Pvoid ( vreg.28 vreg.65 ) <69>;
            ( ) store___i32 ( vreg.68 vreg.69 ) <70>;
            ( vreg.71 var=25 ) const ( ) <71>;
            ( vreg.72 var=19 ) add___Pvoid ( vreg.22 vreg.71 ) <72>;
            ( vreg.73 var=15 ) load___i32 ( vreg.72 ) <73>;
            ( vreg.74 var=15 ) mul___i32 ( vreg.73 vreg.24 ) <74>;
            ( vreg.75 var=19 ) add___Pvoid ( vreg.28 vreg.71 ) <75>;
            ( ) store___i32 ( vreg.74 vreg.75 ) <76>;
            ( vreg.77 var=26 ) const ( ) <77>;
            ( vreg.78 var=19 ) add___Pvoid ( vreg.22 vreg.77 ) <78>;
            ( vreg.79 var=15 ) load___i32 ( vreg.78 ) <79>;
            ( vreg.80 var=15 ) mul___i32 ( vreg.79 vreg.24 ) <80>;
            ( vreg.81 var=19 ) add___Pvoid ( vreg.28 vreg.77 ) <81>;
            ( ) store___i32 ( vreg.80 vreg.81 ) <82>;
            ( vreg.83 var=27 ) const ( ) <83>;
            ( vreg.84 var=19 ) add___Pvoid ( vreg.22 vreg.83 ) <84>;
            ( vreg.85 var=15 ) load___i32 ( vreg.84 ) <85>;
            ( vreg.86 var=15 ) mul___i32 ( vreg.85 vreg.24 ) <86>;
            ( vreg.87 var=19 ) add___Pvoid ( vreg.28 vreg.83 ) <87>;
            ( ) store___i32 ( vreg.86 vreg.87 ) <88>;
            ( vreg.89 var=28 ) const ( ) <89>;
            ( vreg.90 var=19 ) add___Pvoid ( vreg.22 vreg.89 ) <90>;
            ( vreg.91 var=15 ) load___i32 ( vreg.90 ) <91>;
            ( vreg.92 var=15 ) mul___i32 ( vreg.91 vreg.24 ) <92>;
            ( vreg.93 var=19 ) add___Pvoid ( vreg.28 vreg.89 ) <93>;
            ( ) store___i32 ( vreg.92 vreg.93 ) <94>;
            ( vreg.95 var=29 ) const ( ) <95>;
            ( vreg.96 var=19 ) add___Pvoid ( vreg.22 vreg.95 ) <96>;
            ( vreg.97 var=15 ) load___i32 ( vreg.96 ) <97>;
            ( vreg.98 var=15 ) mul___i32 ( vreg.97 vreg.24 ) <98>;
            ( vreg.99 var=19 ) add___Pvoid ( vreg.28 vreg.95 ) <99>;
            ( ) store___i32 ( vreg.98 vreg.99 ) <100>;
            ( vreg.101 var=30 ) const ( ) <101>;
            ( vreg.102 var=19 ) add___Pvoid ( vreg.22 vreg.101 ) <102>;
            ( vreg.103 var=15 ) load___i32 ( vreg.102 ) <103>;
            ( vreg.104 var=15 ) mul___i32 ( vreg.103 vreg.24 ) <104>;
            ( vreg.105 var=19 ) add___Pvoid ( vreg.28 vreg.101 ) <105>;
            ( ) store___i32 ( vreg.104 vreg.105 ) <106>;
            ( vreg.107 var=31 ) const ( ) <107>;
            ( vreg.108 var=19 ) add___Pvoid ( vreg.22 vreg.107 ) <108>;
            ( vreg.109 var=15 ) load___i32 ( vreg.108 ) <109>;
            ( vreg.110 var=15 ) mul___i32 ( vreg.109 vreg.24 ) <110>;
            ( vreg.111 var=19 ) add___Pvoid ( vreg.28 vreg.107 ) <111>;
            ( ) store___i32 ( vreg.110 vreg.111 ) <112>;
            ( vreg.113 var=32 ) const ( ) <113>;
            ( vreg.114 var=19 ) add___Pvoid ( vreg.22 vreg.113 ) <114>;
            ( vreg.115 var=15 ) load___i32 ( vreg.114 ) <115>;
            ( vreg.116 var=15 ) mul___i32 ( vreg.115 vreg.24 ) <116>;
            ( vreg.117 var=19 ) add___Pvoid ( vreg.28 vreg.113 ) <117>;
            ( ) store___i32 ( vreg.116 vreg.117 ) <118>;
            ( vreg.119 var=33 ) const ( ) <119>;
            ( vreg.120 var=9 ) const ( ) <120>;
            ( ) lcall /* llvm___aie___lock___release___reg */ ( vreg.120 vreg.119 vreg.10 vreg.16 ) <121>;
            ( vreg.122 var=33 ) const ( ) <122>;
            ( vreg.123 var=9 ) const ( ) <123>;
            ( ) lcall /* llvm___aie___lock___release___reg */ ( vreg.123 vreg.122 vreg.15 vreg.11 ) <124>;
            ( vreg.125 var=34 ) const ( ) <125>;
            ( vreg.126 var=8 ) const ( ) <126>;
            ( vreg.127 var=9 ) const ( ) <127>;
            ( ) lcall /* llvm___aie___lock___acquire___reg */ ( vreg.127 vreg.126 vreg.125 vreg.11 ) <128>;
            ( vreg.129 var=35 ) const ( ) <129>;
            ( vreg.130 var=8 ) const ( ) <130>;
            ( vreg.131 var=9 ) const ( ) <131>;
            ( ) lcall /* llvm___aie___lock___acquire___reg */ ( vreg.131 vreg.130 vreg.129 vreg.16 ) <132>;
            ( vreg.133 var=12 ) const ( ) <133>;
            ( vreg.134 var=13 ) const ( ) <134>;
            ( vreg.135 var=36 ) global ( vreg.133 vreg.134 ) <135>;
            ( vreg.136 var=15 ) load___i32 ( vreg.135 ) <136>;
            ( vreg.137 var=15 ) mul___i32 ( vreg.136 vreg.24 ) <137>;
            ( vreg.138 var=12 ) const ( ) <138>;
            ( vreg.139 var=13 ) const ( ) <139>;
            ( vreg.140 var=37 ) global ( vreg.138 vreg.139 ) <140>;
            ( ) store___i32 ( vreg.137 vreg.140 ) <141>;
            ( vreg.142 var=19 ) add___Pvoid ( vreg.135 vreg.30 ) <142>;
            ( vreg.143 var=15 ) load___i32 ( vreg.142 ) <143>;
            ( vreg.144 var=15 ) mul___i32 ( vreg.143 vreg.24 ) <144>;
            ( vreg.145 var=19 ) add___Pvoid ( vreg.140 vreg.30 ) <145>;
            ( ) store___i32 ( vreg.144 vreg.145 ) <146>;
            ( vreg.147 var=19 ) add___Pvoid ( vreg.135 vreg.36 ) <147>;
            ( vreg.148 var=15 ) load___i32 ( vreg.147 ) <148>;
            ( vreg.149 var=15 ) mul___i32 ( vreg.148 vreg.24 ) <149>;
            ( vreg.150 var=19 ) add___Pvoid ( vreg.140 vreg.36 ) <150>;
            ( ) store___i32 ( vreg.149 vreg.150 ) <151>;
            ( vreg.152 var=19 ) add___Pvoid ( vreg.135 vreg.42 ) <152>;
            ( vreg.153 var=15 ) load___i32 ( vreg.152 ) <153>;
            ( vreg.154 var=15 ) mul___i32 ( vreg.153 vreg.24 ) <154>;
            ( vreg.155 var=19 ) add___Pvoid ( vreg.140 vreg.42 ) <155>;
            ( ) store___i32 ( vreg.154 vreg.155 ) <156>;
            ( vreg.157 var=19 ) add___Pvoid ( vreg.135 vreg.10 ) <157>;
            ( vreg.158 var=15 ) load___i32 ( vreg.157 ) <158>;
            ( vreg.159 var=15 ) mul___i32 ( vreg.158 vreg.24 ) <159>;
            ( vreg.160 var=19 ) add___Pvoid ( vreg.140 vreg.10 ) <160>;
            ( ) store___i32 ( vreg.159 vreg.160 ) <161>;
            ( vreg.162 var=19 ) add___Pvoid ( vreg.135 vreg.53 ) <162>;
            ( vreg.163 var=15 ) load___i32 ( vreg.162 ) <163>;
            ( vreg.164 var=15 ) mul___i32 ( vreg.163 vreg.24 ) <164>;
            ( vreg.165 var=19 ) add___Pvoid ( vreg.140 vreg.53 ) <165>;
            ( ) store___i32 ( vreg.164 vreg.165 ) <166>;
            ( vreg.167 var=19 ) add___Pvoid ( vreg.135 vreg.59 ) <167>;
            ( vreg.168 var=15 ) load___i32 ( vreg.167 ) <168>;
            ( vreg.169 var=15 ) mul___i32 ( vreg.168 vreg.24 ) <169>;
            ( vreg.170 var=19 ) add___Pvoid ( vreg.140 vreg.59 ) <170>;
            ( ) store___i32 ( vreg.169 vreg.170 ) <171>;
            ( vreg.172 var=19 ) add___Pvoid ( vreg.135 vreg.65 ) <172>;
            ( vreg.173 var=15 ) load___i32 ( vreg.172 ) <173>;
            ( vreg.174 var=15 ) mul___i32 ( vreg.173 vreg.24 ) <174>;
            ( vreg.175 var=19 ) add___Pvoid ( vreg.140 vreg.65 ) <175>;
            ( ) store___i32 ( vreg.174 vreg.175 ) <176>;
            ( vreg.177 var=19 ) add___Pvoid ( vreg.135 vreg.71 ) <177>;
            ( vreg.178 var=15 ) load___i32 ( vreg.177 ) <178>;
            ( vreg.179 var=15 ) mul___i32 ( vreg.178 vreg.24 ) <179>;
            ( vreg.180 var=19 ) add___Pvoid ( vreg.140 vreg.71 ) <180>;
            ( ) store___i32 ( vreg.179 vreg.180 ) <181>;
            ( vreg.182 var=19 ) add___Pvoid ( vreg.135 vreg.77 ) <182>;
            ( vreg.183 var=15 ) load___i32 ( vreg.182 ) <183>;
            ( vreg.184 var=15 ) mul___i32 ( vreg.183 vreg.24 ) <184>;
            ( vreg.185 var=19 ) add___Pvoid ( vreg.140 vreg.77 ) <185>;
            ( ) store___i32 ( vreg.184 vreg.185 ) <186>;
            ( vreg.187 var=19 ) add___Pvoid ( vreg.135 vreg.83 ) <187>;
            ( vreg.188 var=15 ) load___i32 ( vreg.187 ) <188>;
            ( vreg.189 var=15 ) mul___i32 ( vreg.188 vreg.24 ) <189>;
            ( vreg.190 var=19 ) add___Pvoid ( vreg.140 vreg.83 ) <190>;
            ( ) store___i32 ( vreg.189 vreg.190 ) <191>;
            ( vreg.192 var=19 ) add___Pvoid ( vreg.135 vreg.89 ) <192>;
            ( vreg.193 var=15 ) load___i32 ( vreg.192 ) <193>;
            ( vreg.194 var=15 ) mul___i32 ( vreg.193 vreg.24 ) <194>;
            ( vreg.195 var=19 ) add___Pvoid ( vreg.140 vreg.89 ) <195>;
            ( ) store___i32 ( vreg.194 vreg.195 ) <196>;
            ( vreg.197 var=19 ) add___Pvoid ( vreg.135 vreg.95 ) <197>;
            ( vreg.198 var=15 ) load___i32 ( vreg.197 ) <198>;
            ( vreg.199 var=15 ) mul___i32 ( vreg.198 vreg.24 ) <199>;
            ( vreg.200 var=19 ) add___Pvoid ( vreg.140 vreg.95 ) <200>;
            ( ) store___i32 ( vreg.199 vreg.200 ) <201>;
            ( vreg.202 var=19 ) add___Pvoid ( vreg.135 vreg.101 ) <202>;
            ( vreg.203 var=15 ) load___i32 ( vreg.202 ) <203>;
            ( vreg.204 var=15 ) mul___i32 ( vreg.203 vreg.24 ) <204>;
            ( vreg.205 var=19 ) add___Pvoid ( vreg.140 vreg.101 ) <205>;
            ( ) store___i32 ( vreg.204 vreg.205 ) <206>;
            ( vreg.207 var=19 ) add___Pvoid ( vreg.135 vreg.107 ) <207>;
            ( vreg.208 var=15 ) load___i32 ( vreg.207 ) <208>;
            ( vreg.209 var=15 ) mul___i32 ( vreg.208 vreg.24 ) <209>;
            ( vreg.210 var=19 ) add___Pvoid ( vreg.140 vreg.107 ) <210>;
            ( ) store___i32 ( vreg.209 vreg.210 ) <211>;
            ( vreg.212 var=19 ) add___Pvoid ( vreg.135 vreg.113 ) <212>;
            ( vreg.213 var=15 ) load___i32 ( vreg.212 ) <213>;
            ( vreg.214 var=15 ) mul___i32 ( vreg.213 vreg.24 ) <214>;
            ( vreg.215 var=19 ) add___Pvoid ( vreg.140 vreg.113 ) <215>;
            ( ) store___i32 ( vreg.214 vreg.215 ) <216>;
            ( vreg.217 var=33 ) const ( ) <217>;
            ( vreg.218 var=9 ) const ( ) <218>;
            ( ) lcall /* llvm___aie___lock___release___reg */ ( vreg.218 vreg.217 vreg.125 vreg.16 ) <219>;
            ( vreg.220 var=33 ) const ( ) <220>;
            ( vreg.221 var=9 ) const ( ) <221>;
            ( ) lcall_tail /* llvm___aie___lock___release___reg */ ( vreg.221 vreg.220 vreg.129 vreg.11 ) <222>;
            ( vreg.223 var=38 ) const ( ) <223>;
            ( vreg.224 var=4 ) add___i64 ( vreg.8 vreg.223 ) <224>;
            ( vreg.225 var=3 ) const ( ) <225>;
            ( vreg.226 var=39 ) seteq___i64 ( vreg.8 vreg.225 ) <226>;
            ( vreg.227 var=15 ) zext___i1___i32 ( vreg.226 ) <227>;
          } #12
          if {
            { // no associated BB
              ( ) if_expr ( vreg.226 ) <228>;
            } #14
            {
              // NOTE: GOTO FROM BB#2 TO BB#2 [HIDDEN]
            } #15
            {
              // NOTE: GOTO FROM BB#2 TO BB#3 [HIDDEN]
            } #16
            { // no associated BB
            } #17
          } #13 // if
        } #10
        { // no associated BB
          ( ) while_expr ( vreg.226 ) <230>;
          ( ) backedge_taken_count ( vreg.6 ) <231>;
        } #18
      } #8// do_while
      // NOTE: GOTO FROM BB#2 TO BB#3 [HIDDEN]
      { // BB#3
        ( vreg.232 var=5 ) const ( ) <232>;
        ( vreg.233 var=4 ) add___i64 ( vreg.4 vreg.232 ) <233>;
        ( vreg.234 var=40 ) const ( ) <234>;
        ( vreg.235 var=39 ) setne___i64 ( vreg.233 vreg.234 ) <235>;
        ( vreg.236 var=15 ) zext___i1___i32 ( vreg.235 ) <236>;
      } #19
      if {
        { // no associated BB
          ( ) if_expr ( vreg.235 ) <237>;
        } #21
        {
          // NOTE: GOTO FROM BB#3 TO BB#1 [HIDDEN]
        } #22
        {
          // NOTE: GOTO FROM BB#3 TO BB#4 [HIDDEN]
        } #23
        { // no associated BB
        } #24
      } #20 // if
    } #5
    { // no associated BB
      ( ) while_expr ( vreg.235 ) <239>;
      ( ) backedge_taken_count ( vreg.2 ) <240>;
    } #25
  } #3// do_while
  // NOTE: GOTO FROM BB#3 TO BB#4 [HIDDEN]
  { // BB#4
    ( ) return ( ) <241>;
  } #26 nxt=-2
} #1
0 : 'core_6_2';
----------
0 : (0,0:0,0);
----------
==========alias_info
23 : 1;
29 : 0;
32 : 1;
35 : 0;
38 : 1;
41 : 0;
44 : 1;
47 : 0;
49 : 1;
52 : 0;
55 : 1;
58 : 0;
61 : 1;
64 : 0;
67 : 1;
70 : 0;
73 : 1;
76 : 0;
79 : 1;
82 : 0;
85 : 1;
88 : 0;
91 : 1;
94 : 0;
97 : 1;
100 : 0;
103 : 1;
106 : 0;
109 : 1;
112 : 0;
115 : 1;
118 : 0;
136 : 1;
141 : 0;
143 : 1;
146 : 0;
148 : 1;
151 : 0;
153 : 1;
156 : 0;
158 : 1;
161 : 0;
163 : 1;
166 : 0;
168 : 1;
171 : 0;
173 : 1;
176 : 0;
178 : 1;
181 : 0;
183 : 1;
186 : 0;
188 : 1;
191 : 0;
193 : 1;
196 : 0;
198 : 1;
201 : 0;
203 : 1;
206 : 0;
208 : 1;
211 : 0;
213 : 1;
216 : 0;

// Function: void llvm___aie___lock___acquire___reg(i32 , i32 )
[
  0 : llvm___aie___lock___acquire___reg bnd=e
  1 : _cst val=1f typ=__i1
  2 : __arg0 typ=__i32
  3 : __arg1 typ=__i32
  4 : _Z25chess_separator_schedulerv bnd=e
  5 : _cst val=0f
  6 : _cst val=-1f typ=uint1_t
  7 : __regcall3__chessintr_void_acquire___uint_uint1_t___uint bnd=e
]
Lllvm___aie___lock___acquire___reg
{
  { // BB#0
    ( vreg.1 var=1 ) const ( ) <1>;
    ( vreg.2 var=2 ) inp ( ) <2>;
    ( vreg.3 var=3 ) inp ( ) <3>;
    ( ) chain_tie_volatile ( ) <4>;
    ( vreg.5 var=4 ) const ( ) <5>;
    ( vreg.6 var=5 ) const ( ) <6>;
    ( ) lcall /* _Z25chess_separator_schedulerv */ ( vreg.6 vreg.5 ) <7>;
    ( vreg.8 var=6 ) const ( ) <8>;
    ( vreg.9 var=7 ) const ( ) <9>;
    ( vreg.10 var=5 ) const ( ) <10>;
    ( ) lcall /* __regcall3__chessintr_void_acquire___uint_uint1_t___uint */ ( vreg.10 vreg.9 vreg.2 vreg.8 vreg.3 ) <11>;
    ( vreg.12 var=4 ) const ( ) <12>;
    ( vreg.13 var=5 ) const ( ) <13>;
    ( ) lcall /* _Z25chess_separator_schedulerv */ ( vreg.13 vreg.12 ) <14>;
    ( ) chain_tie_volatile ( ) <15>;
    ( ) return ( ) <16>;
  } #2 nxt=-2
} #1
0 : 'llvm___aie___lock___acquire___reg';
----------
0 : (0,0:0,0);
----------
==========alias_info
4 :;
15 :;

// Function: void llvm___aie___lock___release___reg(i32 , i32 )
[
  0 : llvm___aie___lock___release___reg bnd=e
  1 : _cst val=1f typ=__i1
  2 : __arg0 typ=__i32
  3 : __arg1 typ=__i32
  4 : _Z25chess_separator_schedulerv bnd=e
  5 : _cst val=0f
  6 : _cst val=-1f typ=uint1_t
  7 : __regcall3__chessintr_void_release___uint_uint1_t___uint bnd=e
]
Lllvm___aie___lock___release___reg
{
  { // BB#0
    ( vreg.1 var=1 ) const ( ) <1>;
    ( vreg.2 var=2 ) inp ( ) <2>;
    ( vreg.3 var=3 ) inp ( ) <3>;
    ( ) chain_tie_volatile ( ) <4>;
    ( vreg.5 var=4 ) const ( ) <5>;
    ( vreg.6 var=5 ) const ( ) <6>;
    ( ) lcall /* _Z25chess_separator_schedulerv */ ( vreg.6 vreg.5 ) <7>;
    ( vreg.8 var=6 ) const ( ) <8>;
    ( vreg.9 var=7 ) const ( ) <9>;
    ( vreg.10 var=5 ) const ( ) <10>;
    ( ) lcall /* __regcall3__chessintr_void_release___uint_uint1_t___uint */ ( vreg.10 vreg.9 vreg.2 vreg.8 vreg.3 ) <11>;
    ( vreg.12 var=4 ) const ( ) <12>;
    ( vreg.13 var=5 ) const ( ) <13>;
    ( ) lcall /* _Z25chess_separator_schedulerv */ ( vreg.13 vreg.12 ) <14>;
    ( ) chain_tie_volatile ( ) <15>;
    ( ) return ( ) <16>;
  } #2 nxt=-2
} #1
0 : 'llvm___aie___lock___release___reg';
----------
0 : (0,0:0,0);
----------
==========alias_info
4 :;
15 :;

[
1 : _cst val=64f
2 : _cst val=4f
3 : in_cons_buff_1 typ=__Pvoid bnd=e
4 : in_cons_buff_0 typ=__Pvoid bnd=e
5 : out_buff_1 typ=__Pvoid bnd=e
6 : out_buff_0 typ=__Pvoid bnd=e
]
llvmgvt
{ // no associated BB
( vreg.1 var=1 ) const ( ) <1>;
( vreg.2 var=2 ) const ( ) <2>;
( vreg.3 var=3 ) global ( vreg.1 vreg.2 ) <3>;
( ) out ( vreg.3 ) <4>;
( vreg.5 var=1 ) const ( ) <5>;
( vreg.6 var=2 ) const ( ) <6>;
( vreg.7 var=4 ) global ( vreg.5 vreg.6 ) <7>;
( ) out ( vreg.7 ) <8>;
( vreg.9 var=1 ) const ( ) <9>;
( vreg.10 var=2 ) const ( ) <10>;
( vreg.11 var=5 ) global ( vreg.9 vreg.10 ) <11>;
( ) out ( vreg.11 ) <12>;
( vreg.13 var=1 ) const ( ) <13>;
( vreg.14 var=2 ) const ( ) <14>;
( vreg.15 var=6 ) global ( vreg.13 vreg.14 ) <15>;
( ) out ( vreg.15 ) <16>;
} #0
0 : './dummy_file';
----------
0 : (0,0:0,0);
----------
==========debug_type_info
==========data_init
	.section	".linker-options","e",@llvm_linker_options
