#include "gen_cdo.h"
#include <getopt.h>
#include <iostream>
#include <unistd.h>
extern "C" {
#include "cdo_driver.h"
}

int main(int argc, char **argv) {
  std::string workDirPath;
  bool AXIdebug = false;
  bool endianness = byte_ordering::Little_Endian;
  int opt;
  static struct option long_options[] = {
      /* name, has_arg, flag, val */
      {"help", no_argument, NULL, 0},
      {"aximm-dump", no_argument, NULL, 1},
      {"big-endian-cdo", no_argument, NULL, 2},
      {"work-dir-path", required_argument, NULL, 3}};
  while (1) {
    int optIndex = 0;
    opt = getopt_long(argc, argv, "habw:", long_options, &optIndex);
    if (opt == -1)
      break;
    switch (opt) {
    case 0:
    case 'h':
      std::cout << "\n*********************************************************"
                   "***********************************************************"
                   "*********** \n\n\t";
      std::cout
          << "\n This script is used in AI Engine Compiler to generate CDO "
             "binaries and record statically allocated resources. Files "
             "generated by this script are:\n\n"
             "\t\t\t >> aie_cdo_init.bin            : Initial Configurations "
             "CDO. Stream Switch, DMA, SHIM etc...\n"
             "\t\t\t >> aie_cdo_enable.bin          : Core Enable CDO\n"
             "\t\t\t >> aie_cdo_debug.bin           : Core Debug Halt CDO \n"
             "\t\t\t >> aie_cdo_reset.bin           : Partition Reset CDO \n"
             "\t\t\t >> aie_cdo_mem_clear.bin       : Partition DM/PM clearing "
             "CDO\n"
             "\t\t\t >> aie_cdo_error_handling.bin  : Error Handling CDO \n"
             "\t\t\t >> aie_cdo_clock_gating.bin    : Clock Gating CDO \n"
             "\t\t\t >> aie_cdo_elfs.bin            : AIE ELF packed into CDO "
             "(Default ECC-scrubbing enabled)\n"
             "\t\t\t >> aie_resources.bin           : Statically allocated "
             "resource file";
      std::cout << "\n*********************************************************"
                   "***********************************************************"
                   "*********** \n\n\t";
      std::cout << "\nAccepted options are :\n\n\t"
                   "1) --help or -h: Displays list of options accepted by cdo "
                   "executable.(Usage: --help) \n\n\t"
                   "2) --aximm-dump or -a: Generates AXI-MM Dump helpful for "
                   "debugging.(Usage: --aximm-dump)\n\n\t"
                   "3) --big-endian-cdo or -b: Generates AIE CDO in big endian "
                   "format, default is little-endian (Usage: --big-endian-cdo) "
                   "\n\n  ";
      return EXIT_SUCCESS;
    case 1:
    case 'a':
      AXIdebug = true;
      break;
    case 2:
    case 'b':
      endianness = byte_ordering::Big_Endian;
      break;
    case 3:
    case 'w':
      workDirPath = optarg;
      break;
    case '?':
      return EXIT_FAILURE;
      break;
    default:
      std::cout
          << "getopt returned char code which is not handled, returned code:"
          << opt << std::endl;
      return EXIT_FAILURE;
    }
  }
  if (optind < argc) {
    std::cout << "Value provided without any option(non-optioned argv): ";
    while (optind < argc)
      std::cout << argv[optind++];
    std::cout << "\n";
    return EXIT_FAILURE;
  }

  initializeCDOGenerator(AXIdebug, endianness);
  generateCDOBinariesSeparately(workDirPath, AXIdebug);
  return EXIT_SUCCESS;
}
