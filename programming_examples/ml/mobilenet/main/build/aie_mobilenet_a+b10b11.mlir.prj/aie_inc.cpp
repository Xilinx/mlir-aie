
// This file was auto-generated by aiecc.py --aie-generate-xaie.

#ifndef MLIR_AIE_QUIET
#define __mlir_aie_verbose(x) x
#else
#define __mlir_aie_verbose(x)
#endif

// The following is a wrapper for the common "if(call() != 0) return 1" pattern.
// Use this only in functions that return int. If the call this wrapper is used
// on does not succeed, the expanded code will exit out of the function
// containing this macro with an error code.
#define __mlir_aie_try(x) do { \
  AieRC ret = (x); \
  if(ret != XAIE_OK) { \
    return x; \
  } \
} while(0)

static XAie_DmaDimDesc *__mlir_aie_alloc_dim_desc(size_t ndims) {
  XAie_DmaDimDesc *ret = NULL;
  ret = (XAie_DmaDimDesc *)calloc(sizeof(XAie_DmaDimDesc), ndims);
  if(NULL == ret) {
    __mlir_aie_verbose(fprintf(stderr, "Allocating DmaDimDesc failed.\n"));
  }
  return ret;
}

aie_libxaie_ctx_t* mlir_aie_init_libxaie() {
  aie_libxaie_ctx_t *ctx = new aie_libxaie_ctx_t;
  if (!ctx)
    return 0;
  ctx->AieConfigPtr.AieGen = XAIE_DEV_GEN_AIEML;
  ctx->AieConfigPtr.BaseAddr = 0x20000000000;
  ctx->AieConfigPtr.ColShift = 25;
  ctx->AieConfigPtr.RowShift = 20;
  ctx->AieConfigPtr.NumRows = 6;
  ctx->AieConfigPtr.NumCols = 4;
  ctx->AieConfigPtr.ShimRowNum = 0;
  ctx->AieConfigPtr.MemTileRowStart = 1;
  ctx->AieConfigPtr.MemTileNumRows = 1;
  //  ctx->AieConfigPtr.ReservedRowStart = XAIE_RES_TILE_ROW_START;
  //  ctx->AieConfigPtr.ReservedNumRows  = XAIE_RES_TILE_NUM_ROWS;
  ctx->AieConfigPtr.AieTileRowStart = 2;
  ctx->AieConfigPtr.AieTileNumRows = 4;
  ctx->AieConfigPtr.PartProp = {0};
  ctx->DevInst = {0};
  return ctx;
}

int mlir_aie_configure_cores(aie_libxaie_ctx_t* ctx) {
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(0,3)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(0,3), (const char*)"core_0_3.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 0, 3, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(0,4)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(0,4), (const char*)"core_0_4.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 0, 4, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(0,5)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(0,5), (const char*)"core_0_5.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 0, 5, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(1,5)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(1,5), (const char*)"core_1_5.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 1, 5, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(1,4)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(1,4), (const char*)"core_1_4.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 1, 4, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(1,2)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(1,2), (const char*)"core_1_2.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 1, 2, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(1,3)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(1,3), (const char*)"core_1_3.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 1, 3, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(2,2)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(2,2)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(2,2), (const char*)"core_2_2.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 2, 2, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(2,3)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(2,3)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(2,3), (const char*)"core_2_3.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 2, 3, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(2,4)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(2,4)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(2,4), (const char*)"core_2_4.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 2, 4, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(2,5)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(2,5)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(2,5), (const char*)"core_2_5.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 2, 5, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(3,5)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(3,5)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,5), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(3,5), (const char*)"core_3_5.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 3, 5, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(3,4)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(3,4)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(3,4), (const char*)"core_3_4.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 3, 4, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(3,3)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(3,3)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(3,3), (const char*)"core_3_3.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 3, 3, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(3,2)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(3,2), (const char*)"core_3_2.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 3, 2, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(0,2)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(l, 0x0), 0));
return XAIE_OK;
} // mlir_aie_configure_cores

int mlir_aie_start_cores(aie_libxaie_ctx_t* ctx) {
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(2,2)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(2,2)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(2,3)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(2,3)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(2,4)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(2,4)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(2,5)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(2,5)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(3,5)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(3,5)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(3,4)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(3,4)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(3,3)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(3,3)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(0,2)));
return XAIE_OK;
} // mlir_aie_start_cores

int mlir_aie_configure_dmas(aie_libxaie_ctx_t* ctx) {
XAie_DmaDesc dma_tile24_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile24_bd0), XAie_TileLoc(2,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile24_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile24_bd0), /* addrA */ 0x400,  /* len */ 38400));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile24_bd0),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile24_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile24_bd0), XAie_TileLoc(2,4),  /* bd */ 0));
XAie_DmaDesc dma_tile24_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile24_bd1), XAie_TileLoc(2,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile24_bd1), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile24_bd1), /* addrA */ 0x9A00,  /* len */ 6720));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile24_bd1),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile24_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile24_bd1), XAie_TileLoc(2,4),  /* bd */ 1));
XAie_DmaDesc dma_tile24_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile24_bd2), XAie_TileLoc(2,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile24_bd2), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile24_bd2), /* addrA */ 0xB440,  /* len */ 6720));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile24_bd2),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile24_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile24_bd2), XAie_TileLoc(2,4),  /* bd */ 2));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,4), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,4), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,4), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */1, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,4), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile25_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile25_bd0), XAie_TileLoc(2,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile25_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile25_bd0), /* addrA */ 0xA180,  /* len */ 4320));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile25_bd0),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile25_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile25_bd0), XAie_TileLoc(2,5),  /* bd */ 0));
XAie_DmaDesc dma_tile25_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile25_bd1), XAie_TileLoc(2,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile25_bd1), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile25_bd1), /* addrA */ 0x3880,  /* len */ 6720));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile25_bd1),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile25_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile25_bd1), XAie_TileLoc(2,5),  /* bd */ 1));
XAie_DmaDesc dma_tile25_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile25_bd2), XAie_TileLoc(2,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile25_bd2), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile25_bd2), /* addrA */ 0x52C0,  /* len */ 6720));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile25_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile25_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile25_bd2), XAie_TileLoc(2,5),  /* bd */ 2));
XAie_DmaDesc dma_tile25_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile25_bd3), XAie_TileLoc(2,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile25_bd3), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile25_bd3), /* addrA */ 0x6D00,  /* len */ 6720));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile25_bd3),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile25_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile25_bd3), XAie_TileLoc(2,5),  /* bd */ 3));
XAie_DmaDesc dma_tile25_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile25_bd4), XAie_TileLoc(2,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile25_bd4), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile25_bd4), /* addrA */ 0x8740,  /* len */ 6720));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile25_bd4),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile25_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile25_bd4), XAie_TileLoc(2,5),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,5), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,5), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,5), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */1, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,5), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
XAie_DmaDesc dma_tile35_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile35_bd0), XAie_TileLoc(3,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile35_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile35_bd0), /* addrA */ 0x400,  /* len */ 53760));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile35_bd0),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile35_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile35_bd0), XAie_TileLoc(3,5),  /* bd */ 0));
XAie_DmaDesc dma_tile35_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile35_bd1), XAie_TileLoc(3,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile35_bd1), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile35_bd1), /* addrA */ 0xD600,  /* len */ 1568));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile35_bd1),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile35_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile35_bd1), XAie_TileLoc(3,5),  /* bd */ 1));
XAie_DmaDesc dma_tile35_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile35_bd2), XAie_TileLoc(3,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile35_bd2), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile35_bd2), /* addrA */ 0xDC20,  /* len */ 1568));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile35_bd2),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile35_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile35_bd2), XAie_TileLoc(3,5),  /* bd */ 2));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,5), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,5), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,5), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */1, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,5), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile34_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile34_bd0), XAie_TileLoc(3,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile34_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile34_bd0), /* addrA */ 0x400,  /* len */ 37632));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile34_bd0),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile34_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile34_bd0), XAie_TileLoc(3,4),  /* bd */ 0));
XAie_DmaDesc dma_tile34_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile34_bd1), XAie_TileLoc(3,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile34_bd1), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile34_bd1), /* addrA */ 0xBBC0,  /* len */ 1568));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile34_bd1),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile34_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile34_bd1), XAie_TileLoc(3,4),  /* bd */ 1));
XAie_DmaDesc dma_tile34_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile34_bd2), XAie_TileLoc(3,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile34_bd2), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile34_bd2), /* addrA */ 0xC1E0,  /* len */ 1568));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile34_bd2),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile34_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile34_bd2), XAie_TileLoc(3,4),  /* bd */ 2));
XAie_DmaDesc dma_tile34_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile34_bd3), XAie_TileLoc(3,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile34_bd3), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile34_bd3), /* addrA */ 0x9700,  /* len */ 4704));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile34_bd3),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile34_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile34_bd3), XAie_TileLoc(3,4),  /* bd */ 3));
XAie_DmaDesc dma_tile34_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile34_bd4), XAie_TileLoc(3,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile34_bd4), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile34_bd4), /* addrA */ 0xA960,  /* len */ 4704));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile34_bd4),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile34_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile34_bd4), XAie_TileLoc(3,4),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,4), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,4), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,4), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */1, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,4), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,4), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */3, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,4), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile33_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile33_bd0), XAie_TileLoc(3,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile33_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile33_bd0), /* addrA */ 0x7240,  /* len */ 3024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile33_bd0),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile33_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile33_bd0), XAie_TileLoc(3,3),  /* bd */ 0));
XAie_DmaDesc dma_tile33_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile33_bd1), XAie_TileLoc(3,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile33_bd1), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile33_bd1), /* addrA */ 0x28C0,  /* len */ 4704));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile33_bd1),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile33_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile33_bd1), XAie_TileLoc(3,3),  /* bd */ 1));
XAie_DmaDesc dma_tile33_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile33_bd2), XAie_TileLoc(3,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile33_bd2), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile33_bd2), /* addrA */ 0x3B20,  /* len */ 4704));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile33_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile33_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile33_bd2), XAie_TileLoc(3,3),  /* bd */ 2));
XAie_DmaDesc dma_tile33_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile33_bd3), XAie_TileLoc(3,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile33_bd3), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile33_bd3), /* addrA */ 0x4D80,  /* len */ 4704));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile33_bd3),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile33_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile33_bd3), XAie_TileLoc(3,3),  /* bd */ 3));
XAie_DmaDesc dma_tile33_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile33_bd4), XAie_TileLoc(3,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile33_bd4), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile33_bd4), /* addrA */ 0x5FE0,  /* len */ 4704));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile33_bd4),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile33_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile33_bd4), XAie_TileLoc(3,3),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,3), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,3), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,3), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */1, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,3), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
XAie_DmaDesc dma_tile32_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile32_bd0), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile32_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile32_bd0), /* addrA */ 0x400,  /* len */ 37632));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile32_bd0),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile32_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile32_bd0), XAie_TileLoc(3,2),  /* bd */ 0));
XAie_DmaDesc dma_tile32_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile32_bd1), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile32_bd1), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile32_bd1), /* addrA */ 0xA340,  /* len */ 1568));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile32_bd1),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile32_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile32_bd1), XAie_TileLoc(3,2),  /* bd */ 1));
XAie_DmaDesc dma_tile32_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile32_bd2), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile32_bd2), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile32_bd2), /* addrA */ 0xA960,  /* len */ 1568));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile32_bd2),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile32_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile32_bd2), XAie_TileLoc(3,2),  /* bd */ 2));
XAie_DmaDesc dma_tile32_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile32_bd3), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile32_bd3), XAie_LockInit(4,-1),XAie_LockInit(5,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile32_bd3), /* addrA */ 0x9700,  /* len */ 1568));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile32_bd3),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile32_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile32_bd3), XAie_TileLoc(3,2),  /* bd */ 3));
XAie_DmaDesc dma_tile32_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile32_bd4), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile32_bd4), XAie_LockInit(4,-1),XAie_LockInit(5,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile32_bd4), /* addrA */ 0x9D20,  /* len */ 1568));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile32_bd4),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile32_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile32_bd4), XAie_TileLoc(3,2),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,2), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,2), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,2), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */1, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,2), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,2), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */3, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,2), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
XAie_DmaDesc dma_tile03_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile03_bd0), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile03_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile03_bd0), /* addrA */ 0x81D0,  /* len */ 1792));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile03_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile03_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile03_bd0), XAie_TileLoc(0,3),  /* bd */ 0));
XAie_DmaDesc dma_tile03_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile03_bd1), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile03_bd1), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile03_bd1), /* addrA */ 0x88D0,  /* len */ 1792));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile03_bd1),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile03_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile03_bd1), XAie_TileLoc(0,3),  /* bd */ 1));
XAie_DmaDesc dma_tile03_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile03_bd2), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile03_bd2), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile03_bd2), /* addrA */ 0x8FD0,  /* len */ 1792));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile03_bd2),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile03_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile03_bd2), XAie_TileLoc(0,3),  /* bd */ 2));
XAie_DmaDesc dma_tile03_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile03_bd3), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile03_bd3), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile03_bd3), /* addrA */ 0x6600,  /* len */ 3536));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile03_bd3),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile03_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile03_bd3), XAie_TileLoc(0,3),  /* bd */ 3));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,3), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,3), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,3), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */3, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,3), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
XAie_DmaDesc dma_tile04_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile04_bd0), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile04_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile04_bd0), /* addrA */ 0x400,  /* len */ 4104));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile04_bd0),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile04_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile04_bd0), XAie_TileLoc(0,4),  /* bd */ 0));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,4), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,4), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
XAie_DmaDesc dma_tile05_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile05_bd0), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile05_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile05_bd0), /* addrA */ 0x400,  /* len */ 5256));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile05_bd0),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile05_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile05_bd0), XAie_TileLoc(0,5),  /* bd */ 0));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,5), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,5), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
XAie_DmaDesc dma_tile15_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile15_bd0), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile15_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile15_bd0), /* addrA */ 0x400,  /* len */ 10680));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile15_bd0),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile15_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile15_bd0), XAie_TileLoc(1,5),  /* bd */ 0));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,5), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,5), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
XAie_DmaDesc dma_tile14_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile14_bd0), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile14_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile14_bd0), /* addrA */ 0x400,  /* len */ 10680));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile14_bd0),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile14_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile14_bd0), XAie_TileLoc(1,4),  /* bd */ 0));
XAie_DmaDesc dma_tile14_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile14_bd1), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile14_bd1), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile14_bd1), /* addrA */ 0x6238,  /* len */ 1120));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile14_bd1),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile14_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile14_bd1), XAie_TileLoc(1,4),  /* bd */ 1));
XAie_DmaDesc dma_tile14_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile14_bd2), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile14_bd2), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile14_bd2), /* addrA */ 0x6698,  /* len */ 1120));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile14_bd2),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile14_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile14_bd2), XAie_TileLoc(1,4),  /* bd */ 2));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,4), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,4), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,4), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */1, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,4), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile12_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile12_bd0), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile12_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile12_bd0), /* addrA */ 0x400,  /* len */ 30960));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile12_bd0),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile12_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile12_bd0), XAie_TileLoc(1,2),  /* bd */ 0));
XAie_DmaDesc dma_tile12_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile12_bd1), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile12_bd1), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile12_bd1), /* addrA */ 0xE190,  /* len */ 1120));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile12_bd1),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile12_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile12_bd1), XAie_TileLoc(1,2),  /* bd */ 1));
XAie_DmaDesc dma_tile12_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile12_bd2), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile12_bd2), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile12_bd2), /* addrA */ 0xE5F0,  /* len */ 1120));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile12_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile12_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile12_bd2), XAie_TileLoc(1,2),  /* bd */ 2));
XAie_DmaDesc dma_tile12_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile12_bd3), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile12_bd3), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile12_bd3), /* addrA */ 0xEA50,  /* len */ 1120));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile12_bd3),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile12_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile12_bd3), XAie_TileLoc(1,2),  /* bd */ 3));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,2), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,2), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,2), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */1, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,2), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
XAie_DmaDesc dma_tile13_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile13_bd0), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile13_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile13_bd0), /* addrA */ 0x400,  /* len */ 33800));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile13_bd0),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile13_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile13_bd0), XAie_TileLoc(1,3),  /* bd */ 0));
XAie_DmaDesc dma_tile13_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile13_bd1), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile13_bd1), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile13_bd1), /* addrA */ 0xB3C8,  /* len */ 1120));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile13_bd1),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile13_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile13_bd1), XAie_TileLoc(1,3),  /* bd */ 1));
XAie_DmaDesc dma_tile13_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile13_bd2), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile13_bd2), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile13_bd2), /* addrA */ 0xB828,  /* len */ 1120));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile13_bd2),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile13_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile13_bd2), XAie_TileLoc(1,3),  /* bd */ 2));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,3), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,3), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,3), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */1, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,3), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile22_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile22_bd0), XAie_TileLoc(2,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile22_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile22_bd0), /* addrA */ 0x400,  /* len */ 31096));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile22_bd0),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile22_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile22_bd0), XAie_TileLoc(2,2),  /* bd */ 0));
XAie_DmaDesc dma_tile22_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile22_bd1), XAie_TileLoc(2,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile22_bd1), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile22_bd1), /* addrA */ 0xAE78,  /* len */ 1120));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile22_bd1),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile22_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile22_bd1), XAie_TileLoc(2,2),  /* bd */ 1));
XAie_DmaDesc dma_tile22_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile22_bd2), XAie_TileLoc(2,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile22_bd2), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile22_bd2), /* addrA */ 0xB2D8,  /* len */ 1120));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile22_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile22_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile22_bd2), XAie_TileLoc(2,2),  /* bd */ 2));
XAie_DmaDesc dma_tile22_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile22_bd3), XAie_TileLoc(2,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile22_bd3), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile22_bd3), /* addrA */ 0xB738,  /* len */ 1120));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile22_bd3),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile22_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile22_bd3), XAie_TileLoc(2,2),  /* bd */ 3));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,2), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,2), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,2), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */1, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,2), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
XAie_DmaDesc dma_tile23_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile23_bd0), XAie_TileLoc(2,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile23_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile23_bd0), /* addrA */ 0x400,  /* len */ 31096));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile23_bd0),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile23_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile23_bd0), XAie_TileLoc(2,3),  /* bd */ 0));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,3), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,3), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
XAie_DmaDesc dma_tile21_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd0), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd0), XAie_LockInit(64,-3),XAie_LockInit(65,3)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd0), /* addrA */ 0x80000,  /* len */ 96480));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd0),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd0), XAie_TileLoc(2,1),  /* bd */ 0));
XAie_DmaDesc dma_tile21_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd1), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd1), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd1), /* addrA */ 0x80000,  /* len */ 38400));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd1),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd1), XAie_TileLoc(2,1),  /* bd */ 1));
XAie_DmaDesc dma_tile21_bd24;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd24), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd24), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd24), /* addrA */ 0x89600,  /* len */ 4320));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd24),  /* nextbd */ 24,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd24)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd24), XAie_TileLoc(2,1),  /* bd */ 24));
XAie_DmaDesc dma_tile21_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd2), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd2), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd2), /* addrA */ 0x8A6E0,  /* len */ 53760));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd2),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd2), XAie_TileLoc(2,1),  /* bd */ 2));
XAie_DmaDesc dma_tile21_bd25;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd25), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd25), XAie_LockInit(66,-1),XAie_LockInit(67,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd25), /* addrA */ 0x978E0,  /* len */ 1568));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd25),  /* nextbd */ 26,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd25)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd25), XAie_TileLoc(2,1),  /* bd */ 25));
XAie_DmaDesc dma_tile21_bd26;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd26), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd26), XAie_LockInit(66,-1),XAie_LockInit(67,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd26), /* addrA */ 0x97F00,  /* len */ 1568));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd26),  /* nextbd */ 27,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd26)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd26), XAie_TileLoc(2,1),  /* bd */ 26));
XAie_DmaDesc dma_tile21_bd27;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd27), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd27), XAie_LockInit(66,-1),XAie_LockInit(67,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd27), /* addrA */ 0x98520,  /* len */ 1568));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd27),  /* nextbd */ 28,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd27)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd27), XAie_TileLoc(2,1),  /* bd */ 27));
XAie_DmaDesc dma_tile21_bd28;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd28), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd28), XAie_LockInit(66,-1),XAie_LockInit(67,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd28), /* addrA */ 0x98B40,  /* len */ 1568));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd28),  /* nextbd */ 29,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd28)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd28), XAie_TileLoc(2,1),  /* bd */ 28));
XAie_DmaDesc dma_tile21_bd29;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd29), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd29), XAie_LockInit(66,-1),XAie_LockInit(67,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd29), /* addrA */ 0x99160,  /* len */ 1568));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd29),  /* nextbd */ 30,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd29)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd29), XAie_TileLoc(2,1),  /* bd */ 29));
XAie_DmaDesc dma_tile21_bd30;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd30), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd30), XAie_LockInit(66,-1),XAie_LockInit(67,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd30), /* addrA */ 0x99780,  /* len */ 1568));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd30),  /* nextbd */ 25,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd30)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd30), XAie_TileLoc(2,1),  /* bd */ 30));
XAie_DmaDesc dma_tile21_bd31;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd31), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd31), XAie_LockInit(67,-1),XAie_LockInit(66,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd31), /* addrA */ 0x978E0,  /* len */ 1568));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd31),  /* nextbd */ 32,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd31)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd31), XAie_TileLoc(2,1),  /* bd */ 31));
XAie_DmaDesc dma_tile21_bd32;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd32), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd32), XAie_LockInit(67,-1),XAie_LockInit(66,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd32), /* addrA */ 0x97F00,  /* len */ 1568));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd32),  /* nextbd */ 33,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd32)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd32), XAie_TileLoc(2,1),  /* bd */ 32));
XAie_DmaDesc dma_tile21_bd33;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd33), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd33), XAie_LockInit(67,-1),XAie_LockInit(66,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd33), /* addrA */ 0x98520,  /* len */ 1568));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd33),  /* nextbd */ 34,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd33)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd33), XAie_TileLoc(2,1),  /* bd */ 33));
XAie_DmaDesc dma_tile21_bd34;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd34), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd34), XAie_LockInit(67,-1),XAie_LockInit(66,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd34), /* addrA */ 0x98B40,  /* len */ 1568));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd34),  /* nextbd */ 35,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd34)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd34), XAie_TileLoc(2,1),  /* bd */ 34));
XAie_DmaDesc dma_tile21_bd35;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd35), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd35), XAie_LockInit(67,-1),XAie_LockInit(66,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd35), /* addrA */ 0x99160,  /* len */ 1568));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd35),  /* nextbd */ 36,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd35)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd35), XAie_TileLoc(2,1),  /* bd */ 35));
XAie_DmaDesc dma_tile21_bd36;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd36), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd36), XAie_LockInit(67,-1),XAie_LockInit(66,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd36), /* addrA */ 0x99780,  /* len */ 1568));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd36),  /* nextbd */ 31,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd36)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd36), XAie_TileLoc(2,1),  /* bd */ 36));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */1, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */1, /* dmaDir */ DMA_MM2S, /* BdNum */24, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */ 1, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */2, /* dmaDir */ DMA_MM2S, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */ 2, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */25, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */3, /* dmaDir */ DMA_MM2S, /* BdNum */31, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */ 3, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile31_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile31_bd0), XAie_TileLoc(3,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile31_bd0), XAie_LockInit(64,-3),XAie_LockInit(65,3)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile31_bd0), /* addrA */ 0x80000,  /* len */ 78288));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile31_bd0),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile31_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile31_bd0), XAie_TileLoc(3,1),  /* bd */ 0));
XAie_DmaDesc dma_tile31_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile31_bd1), XAie_TileLoc(3,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile31_bd1), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile31_bd1), /* addrA */ 0x80000,  /* len */ 37632));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile31_bd1),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile31_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile31_bd1), XAie_TileLoc(3,1),  /* bd */ 1));
XAie_DmaDesc dma_tile31_bd24;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile31_bd24), XAie_TileLoc(3,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile31_bd24), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile31_bd24), /* addrA */ 0x89300,  /* len */ 3024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile31_bd24),  /* nextbd */ 24,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile31_bd24)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile31_bd24), XAie_TileLoc(3,1),  /* bd */ 24));
XAie_DmaDesc dma_tile31_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile31_bd2), XAie_TileLoc(3,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile31_bd2), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile31_bd2), /* addrA */ 0x89ED0,  /* len */ 37632));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile31_bd2),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile31_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile31_bd2), XAie_TileLoc(3,1),  /* bd */ 2));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */1, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */1, /* dmaDir */ DMA_MM2S, /* BdNum */24, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */ 1, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */2, /* dmaDir */ DMA_MM2S, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */ 2, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile01_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd0), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd0), XAie_LockInit(64,-5),XAie_LockInit(65,5)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd0), /* addrA */ 0x80000,  /* len */ 34256));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd0),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd0), XAie_TileLoc(0,1),  /* bd */ 0));
XAie_DmaDesc dma_tile01_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd1), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd1), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd1), /* addrA */ 0x80000,  /* len */ 3536));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd1),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd1), XAie_TileLoc(0,1),  /* bd */ 1));
XAie_DmaDesc dma_tile01_bd24;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd24), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd24), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd24), /* addrA */ 0x80DD0,  /* len */ 4104));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd24),  /* nextbd */ 24,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd24)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd24), XAie_TileLoc(0,1),  /* bd */ 24));
XAie_DmaDesc dma_tile01_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd2), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd2), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd2), /* addrA */ 0x81DD8,  /* len */ 5256));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd2),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd2), XAie_TileLoc(0,1),  /* bd */ 2));
XAie_DmaDesc dma_tile01_bd25;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd25), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd25), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd25), /* addrA */ 0x83260,  /* len */ 10680));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd25),  /* nextbd */ 25,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd25)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd25), XAie_TileLoc(0,1),  /* bd */ 25));
XAie_DmaDesc dma_tile01_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd3), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd3), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd3), /* addrA */ 0x85C18,  /* len */ 10680));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd3),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd3), XAie_TileLoc(0,1),  /* bd */ 3));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */1, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */1, /* dmaDir */ DMA_MM2S, /* BdNum */24, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 1, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */2, /* dmaDir */ DMA_MM2S, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 2, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */3, /* dmaDir */ DMA_MM2S, /* BdNum */25, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 3, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */4, /* dmaDir */ DMA_MM2S, /* BdNum */3, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 4, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile11_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd0), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd0), XAie_LockInit(64,-4),XAie_LockInit(65,4)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd0), /* addrA */ 0x80000,  /* len */ 126952));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd0),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd0), XAie_TileLoc(1,1),  /* bd */ 0));
XAie_DmaDesc dma_tile11_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd1), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd1), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd1), /* addrA */ 0x80000,  /* len */ 30960));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd1),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd1), XAie_TileLoc(1,1),  /* bd */ 1));
XAie_DmaDesc dma_tile11_bd24;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd24), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd24), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd24), /* addrA */ 0x878F0,  /* len */ 33800));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd24),  /* nextbd */ 24,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd24)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd24), XAie_TileLoc(1,1),  /* bd */ 24));
XAie_DmaDesc dma_tile11_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd2), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd2), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd2), /* addrA */ 0x8FCF8,  /* len */ 31096));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd2),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd2), XAie_TileLoc(1,1),  /* bd */ 2));
XAie_DmaDesc dma_tile11_bd25;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd25), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd25), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd25), /* addrA */ 0x97670,  /* len */ 31096));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd25),  /* nextbd */ 25,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd25)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd25), XAie_TileLoc(1,1),  /* bd */ 25));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */1, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */1, /* dmaDir */ DMA_MM2S, /* BdNum */24, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 1, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */2, /* dmaDir */ DMA_MM2S, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 2, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */3, /* dmaDir */ DMA_MM2S, /* BdNum */25, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 3, /* dmaDir */ DMA_MM2S));
return XAIE_OK;
} // mlir_aie_configure_dmas

int mlir_aie_initialize_locks(aie_libxaie_ctx_t* ctx) {
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(4, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(2, 4)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(4, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(4, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(2, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(2, 6)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,5), XAie_LockInit(2, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,5), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(4, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(2, 4)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(2, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,0), XAie_LockInit(2, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,0), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(2, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(6, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(7, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(4, 3)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(2, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(8, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(9, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(6, 3)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(7, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(4, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(6, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(7, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(4, 3)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(2, 3)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(2, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(8, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(9, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(6, 3)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(7, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(4, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(6, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(7, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(4, 3)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(2, 3)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(2, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(6, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(7, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(4, 3)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(2, 3)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(6, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(7, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(4, 3)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(2, 3)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(6, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(7, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(4, 3)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(2, 3)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(12, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(13, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(10, 3)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(11, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(8, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(9, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(6, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(7, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(4, 3)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(0, 4)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(2, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(0, 5)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(2, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(0, 3)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,1), XAie_LockInit(0, 3)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,1), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,0), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,0), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,5), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,5), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(0, 3)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,0), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,0), XAie_LockInit(1, 0)));
return XAIE_OK;
} // mlir_aie_initialize_locks
int mlir_aie_configure_switchboxes(aie_libxaie_ctx_t* ctx) {
  int x, y;
// Core Stream Switch column 2 row 0
x = 2;
y = 0;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 0));
// Core Stream Switch column 2 row 1
x = 2;
y = 1;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 1, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 2, NORTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 3, NORTH, 3));
// Core Stream Switch column 2 row 2
x = 2;
y = 2;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, NORTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 1, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 0, SOUTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, EAST, 0));
// Core Stream Switch column 2 row 3
x = 2;
y = 3;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, NORTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 0, DMA, 0));
// Core Stream Switch column 2 row 4
x = 2;
y = 4;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, NORTH, 2));
// Core Stream Switch column 2 row 5
x = 2;
y = 5;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, EAST, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, DMA, 1));
// Core Stream Switch column 3 row 5
x = 3;
y = 5;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 0));
// Core Stream Switch column 3 row 0
x = 3;
y = 0;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, SOUTH, 2));
// Core Stream Switch column 3 row 1
x = 3;
y = 1;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 1, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 2, NORTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, SOUTH, 0));
// Core Stream Switch column 3 row 2
x = 3;
y = 2;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, WEST, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 0, DMA, 1));
// Core Stream Switch column 3 row 3
x = 3;
y = 3;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, SOUTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 1, DMA, 1));
// Core Stream Switch column 3 row 4
x = 3;
y = 4;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, SOUTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 1));
// Core Stream Switch column 0 row 0
x = 0;
y = 0;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 7, NORTH, 1));
// Core Stream Switch column 0 row 1
x = 0;
y = 1;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 1, NORTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 2, NORTH, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 3, NORTH, 4));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 4, NORTH, 5));
// Core Stream Switch column 0 row 2
x = 0;
y = 2;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, NORTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 4, NORTH, 4));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, NORTH, 5));
// Core Stream Switch column 0 row 3
x = 0;
y = 3;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 4, NORTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, NORTH, 3));
// Core Stream Switch column 0 row 4
x = 0;
y = 4;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, EAST, 0));
// Core Stream Switch column 0 row 5
x = 0;
y = 5;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, EAST, 0));
// Core Stream Switch column 1 row 5
x = 1;
y = 5;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 0, DMA, 0));
// Core Stream Switch column 1 row 4
x = 1;
y = 4;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 0));
// Core Stream Switch column 1 row 0
x = 1;
y = 0;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 0));
// Core Stream Switch column 1 row 1
x = 1;
y = 1;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 1, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 2, NORTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 3, NORTH, 3));
// Core Stream Switch column 1 row 2
x = 1;
y = 2;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, EAST, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 1, EAST, 1));
// Core Stream Switch column 1 row 3
x = 1;
y = 3;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, EAST, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, SOUTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 1));
// ShimMux column 2 row 0
// NOTE ShimMux always connects from the south as directions are defined relative to the tile stream switch
x = 2;
y = 0;
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 3));
// ShimMux column 3 row 0
// NOTE ShimMux always connects from the south as directions are defined relative to the tile stream switch
x = 3;
y = 0;
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 3));
__mlir_aie_try(XAie_EnableAieToShimDmaStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 2));
// ShimMux column 0 row 0
// NOTE ShimMux always connects from the south as directions are defined relative to the tile stream switch
x = 0;
y = 0;
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 3));
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 7));
// ShimMux column 1 row 0
// NOTE ShimMux always connects from the south as directions are defined relative to the tile stream switch
x = 1;
y = 0;
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 3));
return XAIE_OK;
} // mlir_aie_configure_switchboxes

int mlir_aie_configure_cascade(aie_libxaie_ctx_t* ctx) {
return XAIE_OK;
} // mlir_aie_configure_cascade

// buffer bn8_act_2_3_buff_0 with unsupported type memref<14x1x184xui8>;
// buffer bn8_act_1_2_buff_0 with unsupported type memref<14x1x184xui8>;
// buffer bn8_act_1_2_buff_1 with unsupported type memref<14x1x184xui8>;
// buffer bn8_act_1_2_buff_2 with unsupported type memref<14x1x184xui8>;
// buffer act_bn8_bn9_buff_0 with unsupported type memref<14x1x80xi8>;
// buffer act_bn8_bn9_buff_1 with unsupported type memref<14x1x80xi8>;
// buffer act_bn7_bn8_cons_buff_0 with unsupported type memref<14x1x80xi8>;
// buffer act_bn7_bn8_cons_buff_1 with unsupported type memref<14x1x80xi8>;
// buffer act_bn7_bn8_cons_buff_2 with unsupported type memref<14x1x80xi8>;
// buffer bn8_wts_OF_L2L1_cons_buff_0 with unsupported type memref<31096xi8>;
const int rtp22_offset = 48024;
int32_t mlir_aie_read_buffer_rtp22(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(2,2), rtp22_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_rtp22(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(2,2), rtp22_offset + (index*4), int_value);
return rc;
}
// buffer B_OF_b10_act_layer2_layer3_buff_0 with unsupported type memref<14x1x480xui8>;
// buffer B_OF_b10_act_layer2_layer3_buff_1 with unsupported type memref<14x1x480xui8>;
// buffer B_OF_b10_act_layer1_layer2_cons_buff_0 with unsupported type memref<14x1x480xui8>;
// buffer B_OF_b10_act_layer1_layer2_cons_buff_1 with unsupported type memref<14x1x480xui8>;
// buffer B_OF_b10_act_layer1_layer2_cons_buff_2 with unsupported type memref<14x1x480xui8>;
// buffer B_OF_b10_act_layer1_layer2_cons_buff_3 with unsupported type memref<14x1x480xui8>;
// buffer weightsInBN10_layer2_cons_buff_0 with unsupported type memref<4320xi8>;
const int bn10_2_rtp_offset = 45664;
int32_t mlir_aie_read_buffer_bn10_2_rtp(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(2,5), bn10_2_rtp_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_bn10_2_rtp(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(2,5), bn10_2_rtp_offset + (index*4), int_value);
return rc;
}
// buffer B_OF_b10_layer3_bn_11_layer1_1_cons_buff_0 with unsupported type memref<14x1x112xi8>;
// buffer B_OF_b10_layer3_bn_11_layer1_1_cons_buff_1 with unsupported type memref<14x1x112xi8>;
// buffer B_OF_b10_layer3_bn_11_layer1_1_cons_buff_2 with unsupported type memref<14x1x112xi8>;
// buffer B_OF_b10_layer3_bn_11_layer1_1_cons_buff_3 with unsupported type memref<14x1x112xi8>;
// buffer B_OF_b10_layer3_bn_11_layer1_1_cons_buff_4 with unsupported type memref<14x1x112xi8>;
// buffer B_OF_b10_layer3_bn_11_layer1_1_cons_buff_5 with unsupported type memref<14x1x112xi8>;
// buffer wts_b10_L3L2_cons_buff_0 with unsupported type memref<96480xi8>;
// buffer bn6_act_2_3_buff_0 with unsupported type memref<14x1x240xui8>;
// buffer bn6_act_1_2_buff_0 with unsupported type memref<28x1x240xui8>;
// buffer bn6_act_1_2_buff_1 with unsupported type memref<28x1x240xui8>;
// buffer bn6_act_1_2_buff_2 with unsupported type memref<28x1x240xui8>;
// buffer act_bn6_bn7_buff_0 with unsupported type memref<14x1x80xi8>;
// buffer act_bn6_bn7_buff_1 with unsupported type memref<14x1x80xi8>;
// buffer act_bn5_bn6_cons_buff_0 with unsupported type memref<28x1x40xi8>;
// buffer act_bn5_bn6_cons_buff_1 with unsupported type memref<28x1x40xi8>;
// buffer act_bn5_bn6_cons_buff_2 with unsupported type memref<28x1x40xi8>;
// buffer bn6_wts_OF_L2L1_cons_buff_0 with unsupported type memref<30960xi8>;
const int rtp12_offset = 61104;
int32_t mlir_aie_read_buffer_rtp12(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(1,2), rtp12_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_rtp12(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(1,2), rtp12_offset + (index*4), int_value);
return rc;
}
// buffer bn01_act_bn1_2_3_buff_0 with unsupported type memref<56x1x64xui8>;
// buffer bn01_act_bn1_1_2_buff_0 with unsupported type memref<112x1x64xui8>;
// buffer bn01_act_bn1_1_2_buff_1 with unsupported type memref<112x1x64xui8>;
// buffer bn01_act_bn1_1_2_buff_2 with unsupported type memref<112x1x64xui8>;
// buffer bn01_act_bn0_bn1_buff_0 with unsupported type memref<112x1x16xi8>;
// buffer bn01_act_bn0_2_3_buff_0 with unsupported type memref<112x1x16xui8>;
// buffer act_bn01_bn2_buff_0 with unsupported type memref<56x1x24xi8>;
// buffer act_bn01_bn2_buff_1 with unsupported type memref<56x1x24xi8>;
// buffer act_bn01_bn2_buff_2 with unsupported type memref<56x1x24xi8>;
// buffer bn0_1_wts_OF_L2L1_cons_buff_0 with unsupported type memref<3536xi8>;
// buffer act_in_cons_buff_0 with unsupported type memref<112x1x16xui8>;
// buffer act_in_cons_buff_1 with unsupported type memref<112x1x16xui8>;
// buffer act_in_cons_buff_2 with unsupported type memref<112x1x16xui8>;
const int rtp03_offset = 42640;
int32_t mlir_aie_read_buffer_rtp03(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(0,3), rtp03_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_rtp03(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(0,3), rtp03_offset + (index*4), int_value);
return rc;
}
// buffer wts_OF_01_L3L2_cons_buff_0 with unsupported type memref<34256xi8>;
// buffer OF_b11_skip_cons_buff_0 with unsupported type memref<14x1x112xi8>;
// buffer OF_b11_skip_cons_buff_1 with unsupported type memref<14x1x112xi8>;
// buffer act_out_buff_0 with unsupported type memref<14x1x112xi8>;
// buffer act_out_buff_1 with unsupported type memref<14x1x112xi8>;
// buffer weightsInBN11_layer3_cons_buff_0 with unsupported type memref<37632xi8>;
const int bn11_3_rtp_offset = 44928;
int32_t mlir_aie_read_buffer_bn11_3_rtp(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(3,2), bn11_3_rtp_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_bn11_3_rtp(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(3,2), bn11_3_rtp_offset + (index*4), int_value);
return rc;
}
// buffer bn5_act_2_3_buff_0 with unsupported type memref<28x1x120xui8>;
// buffer bn5_act_1_2_buff_0 with unsupported type memref<28x1x120xui8>;
// buffer bn5_act_1_2_buff_1 with unsupported type memref<28x1x120xui8>;
// buffer bn5_act_1_2_buff_2 with unsupported type memref<28x1x120xui8>;
// buffer act_bn5_bn6_buff_0 with unsupported type memref<28x1x40xi8>;
// buffer act_bn5_bn6_buff_1 with unsupported type memref<28x1x40xi8>;
// buffer bn5_wts_OF_L2L1_cons_buff_0 with unsupported type memref<10680xi8>;
const int rtp14_offset = 27384;
int32_t mlir_aie_read_buffer_rtp14(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(1,4), rtp14_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_rtp14(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(1,4), rtp14_offset + (index*4), int_value);
return rc;
}
// buffer bn7_act_2_3_buff_0 with unsupported type memref<14x1x200xui8>;
// buffer bn7_act_1_2_buff_0 with unsupported type memref<14x1x200xui8>;
// buffer bn7_act_1_2_buff_1 with unsupported type memref<14x1x200xui8>;
// buffer bn7_act_1_2_buff_2 with unsupported type memref<14x1x200xui8>;
// buffer act_bn7_bn8_buff_0 with unsupported type memref<14x1x80xi8>;
// buffer act_bn7_bn8_buff_1 with unsupported type memref<14x1x80xi8>;
// buffer bn7_wts_OF_L2L1_cons_buff_0 with unsupported type memref<33800xi8>;
const int rtp13_offset = 48264;
int32_t mlir_aie_read_buffer_rtp13(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(1,3), rtp13_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_rtp13(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(1,3), rtp13_offset + (index*4), int_value);
return rc;
}
// buffer B_OF_b10_act_layer1_layer2_buff_0 with unsupported type memref<14x1x480xui8>;
// buffer B_OF_b10_act_layer1_layer2_buff_1 with unsupported type memref<14x1x480xui8>;
// buffer weightsInBN10_layer1_cons_buff_0 with unsupported type memref<38400xi8>;
const int bn10_1_rtp_offset = 52864;
int32_t mlir_aie_read_buffer_bn10_1_rtp(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(2,4), bn10_1_rtp_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_bn10_1_rtp(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(2,4), bn10_1_rtp_offset + (index*4), int_value);
return rc;
}
// buffer wts_OF_11_L3L2_cons_buff_0 with unsupported type memref<126952xi8>;
// buffer bn2_act_2_3_buff_0 with unsupported type memref<56x1x72xui8>;
// buffer bn2_act_1_2_buff_0 with unsupported type memref<56x1x72xui8>;
// buffer bn2_act_1_2_buff_1 with unsupported type memref<56x1x72xui8>;
// buffer bn2_act_1_2_buff_2 with unsupported type memref<56x1x72xui8>;
// buffer act_bn2_bn3_buff_0 with unsupported type memref<56x1x24xi8>;
// buffer act_bn2_bn3_buff_1 with unsupported type memref<56x1x24xi8>;
// buffer act_bn2_bn3_buff_2 with unsupported type memref<56x1x24xi8>;
// buffer bn2_wts_OF_L2L1_cons_buff_0 with unsupported type memref<4104xi8>;
const int rtp04_offset = 25288;
int32_t mlir_aie_read_buffer_rtp04(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(0,4), rtp04_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_rtp04(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(0,4), rtp04_offset + (index*4), int_value);
return rc;
}
// buffer bn4_act_2_3_buff_0 with unsupported type memref<28x1x120xui8>;
// buffer bn4_act_1_2_buff_0 with unsupported type memref<28x1x120xui8>;
// buffer bn4_act_1_2_buff_1 with unsupported type memref<28x1x120xui8>;
// buffer bn4_act_1_2_buff_2 with unsupported type memref<28x1x120xui8>;
// buffer act_bn4_bn5_buff_0 with unsupported type memref<28x1x40xi8>;
// buffer act_bn4_bn5_buff_1 with unsupported type memref<28x1x40xi8>;
// buffer act_bn4_bn5_buff_2 with unsupported type memref<28x1x40xi8>;
// buffer bn4_wts_OF_L2L1_cons_buff_0 with unsupported type memref<10680xi8>;
const int rtp15_offset = 28504;
int32_t mlir_aie_read_buffer_rtp15(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(1,5), rtp15_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_rtp15(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(1,5), rtp15_offset + (index*4), int_value);
return rc;
}
// buffer B_OF_b11_act_layer2_layer3_buff_0 with unsupported type memref<14x1x336xui8>;
// buffer B_OF_b11_act_layer2_layer3_buff_1 with unsupported type memref<14x1x336xui8>;
// buffer B_OF_b11_act_layer1_layer2_cons_buff_0 with unsupported type memref<14x1x336xui8>;
// buffer B_OF_b11_act_layer1_layer2_cons_buff_1 with unsupported type memref<14x1x336xui8>;
// buffer B_OF_b11_act_layer1_layer2_cons_buff_2 with unsupported type memref<14x1x336xui8>;
// buffer B_OF_b11_act_layer1_layer2_cons_buff_3 with unsupported type memref<14x1x336xui8>;
// buffer weightsInBN11_layer2_cons_buff_0 with unsupported type memref<3024xi8>;
const int bn11_2_rtp_offset = 32272;
int32_t mlir_aie_read_buffer_bn11_2_rtp(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(3,3), bn11_2_rtp_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_bn11_2_rtp(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(3,3), bn11_2_rtp_offset + (index*4), int_value);
return rc;
}
// buffer bn9_act_2_3_buff_0 with unsupported type memref<14x1x184xui8>;
// buffer bn9_act_1_2_buff_0 with unsupported type memref<14x1x184xui8>;
// buffer bn9_act_1_2_buff_1 with unsupported type memref<14x1x184xui8>;
// buffer bn9_act_1_2_buff_2 with unsupported type memref<14x1x184xui8>;
// buffer act_bn9_bn10_buff_0 with unsupported type memref<14x1x80xi8>;
// buffer act_bn9_bn10_buff_1 with unsupported type memref<14x1x80xi8>;
// buffer bn9_wts_OF_L2L1_cons_buff_0 with unsupported type memref<31096xi8>;
const int rtp23_offset = 44664;
int32_t mlir_aie_read_buffer_rtp23(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(2,3), rtp23_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_rtp23(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(2,3), rtp23_offset + (index*4), int_value);
return rc;
}
// buffer B_OF_b10_layer3_bn_11_layer1_buff_0 with unsupported type memref<14x1x112xi8>;
// buffer B_OF_b10_layer3_bn_11_layer1_buff_1 with unsupported type memref<14x1x112xi8>;
// buffer weightsInBN10_layer3_cons_buff_0 with unsupported type memref<53760xi8>;
const int bn10_3_rtp_offset = 57920;
int32_t mlir_aie_read_buffer_bn10_3_rtp(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(3,5), bn10_3_rtp_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_bn10_3_rtp(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(3,5), bn10_3_rtp_offset + (index*4), int_value);
return rc;
}
// buffer bn3_act_2_3_buff_0 with unsupported type memref<28x1x72xui8>;
// buffer bn3_act_1_2_buff_0 with unsupported type memref<56x1x72xui8>;
// buffer bn3_act_1_2_buff_1 with unsupported type memref<56x1x72xui8>;
// buffer bn3_act_1_2_buff_2 with unsupported type memref<56x1x72xui8>;
// buffer act_bn3_bn4_buff_0 with unsupported type memref<28x1x40xi8>;
// buffer act_bn3_bn4_buff_1 with unsupported type memref<28x1x40xi8>;
// buffer act_bn3_bn4_buff_2 with unsupported type memref<28x1x40xi8>;
// buffer bn3_wts_OF_L2L1_cons_buff_0 with unsupported type memref<5256xi8>;
const int rtp05_offset = 23752;
int32_t mlir_aie_read_buffer_rtp05(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(0,5), rtp05_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_rtp05(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(0,5), rtp05_offset + (index*4), int_value);
return rc;
}
// buffer wts_b11_L3L2_cons_buff_0 with unsupported type memref<78288xi8>;
// buffer B_OF_b11_act_layer1_layer2_buff_0 with unsupported type memref<14x1x336xui8>;
// buffer B_OF_b11_act_layer1_layer2_buff_1 with unsupported type memref<14x1x336xui8>;
// buffer B_OF_b10_layer3_bn_11_layer1_0_cons_buff_0 with unsupported type memref<14x1x112xi8>;
// buffer B_OF_b10_layer3_bn_11_layer1_0_cons_buff_1 with unsupported type memref<14x1x112xi8>;
// buffer weightsInBN11_layer1_cons_buff_0 with unsupported type memref<37632xi8>;
const int bn11_1_rtp_offset = 51200;
int32_t mlir_aie_read_buffer_bn11_1_rtp(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(3,4), bn11_1_rtp_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_bn11_1_rtp(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(3,4), bn11_1_rtp_offset + (index*4), int_value);
return rc;
}
int mlir_aie_acquire_B_OF_b11_act_layer2_layer3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_OF_b11_act_layer2_layer3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_OF_b11_act_layer2_layer3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_OF_b11_act_layer2_layer3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_OF_b11_act_layer1_layer2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_OF_b11_act_layer1_layer2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_OF_b11_act_layer1_layer2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_OF_b11_act_layer1_layer2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_OF_b11_act_layer1_layer2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_OF_b11_act_layer1_layer2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_OF_b11_act_layer1_layer2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_OF_b11_act_layer1_layer2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_OF_b11_skip_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_OF_b11_skip_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_OF_b11_skip_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_OF_b11_skip_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_OF_b10_layer3_bn_11_layer1_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_OF_b10_layer3_bn_11_layer1_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_OF_b10_layer3_bn_11_layer1_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_OF_b10_layer3_bn_11_layer1_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_OF_b10_layer3_bn_11_layer1_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_OF_b10_layer3_bn_11_layer1_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_OF_b10_layer3_bn_11_layer1_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_OF_b10_layer3_bn_11_layer1_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_OF_b10_layer3_bn_11_layer1_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_OF_b10_layer3_bn_11_layer1_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_OF_b10_layer3_bn_11_layer1_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_OF_b10_layer3_bn_11_layer1_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_OF_b10_act_layer2_layer3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_OF_b10_act_layer2_layer3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_OF_b10_act_layer2_layer3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_OF_b10_act_layer2_layer3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_OF_b10_act_layer1_layer2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_OF_b10_act_layer1_layer2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_OF_b10_act_layer1_layer2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_OF_b10_act_layer1_layer2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_OF_b10_act_layer1_layer2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_OF_b10_act_layer1_layer2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_OF_b10_act_layer1_layer2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_OF_b10_act_layer1_layer2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_out_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_out_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_out_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_out_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_out_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_out_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_out_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_out_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn9_act_2_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 6;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn9_act_2_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 6;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn9_act_2_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 7;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn9_act_2_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 7;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn9_act_1_2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn9_act_1_2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn9_act_1_2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn9_act_1_2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_bn9_bn10_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_bn9_bn10_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_bn9_bn10_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_bn9_bn10_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn8_act_2_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 8;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn8_act_2_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 8;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn8_act_2_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 9;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn8_act_2_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 9;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn8_act_1_2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 6;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn8_act_1_2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 6;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn8_act_1_2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 7;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn8_act_1_2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 7;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_bn8_bn9_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_bn8_bn9_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_bn8_bn9_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_bn8_bn9_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn7_act_2_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 6;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn7_act_2_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 6;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn7_act_2_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 7;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn7_act_2_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 7;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn7_act_1_2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn7_act_1_2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn7_act_1_2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn7_act_1_2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_bn7_bn8_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_bn7_bn8_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_bn7_bn8_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_bn7_bn8_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_bn7_bn8_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_bn7_bn8_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_bn7_bn8_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_bn7_bn8_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn6_act_2_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 8;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn6_act_2_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 8;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn6_act_2_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 9;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn6_act_2_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 9;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn6_act_1_2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 6;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn6_act_1_2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 6;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn6_act_1_2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 7;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn6_act_1_2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 7;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_bn6_bn7_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_bn6_bn7_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_bn6_bn7_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_bn6_bn7_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn5_act_2_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 6;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn5_act_2_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 6;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn5_act_2_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 7;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn5_act_2_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 7;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn5_act_1_2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn5_act_1_2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn5_act_1_2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn5_act_1_2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_bn5_bn6_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_bn5_bn6_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_bn5_bn6_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_bn5_bn6_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_bn5_bn6_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_bn5_bn6_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_bn5_bn6_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_bn5_bn6_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn4_act_2_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 6;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn4_act_2_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 6;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn4_act_2_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 7;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn4_act_2_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 7;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn4_act_1_2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn4_act_1_2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn4_act_1_2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn4_act_1_2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_bn4_bn5_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_bn4_bn5_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_bn4_bn5_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_bn4_bn5_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn3_act_2_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 6;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn3_act_2_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 6;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn3_act_2_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 7;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn3_act_2_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 7;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn3_act_1_2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn3_act_1_2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn3_act_1_2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn3_act_1_2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_bn3_bn4_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_bn3_bn4_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_bn3_bn4_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_bn3_bn4_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn2_act_2_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 6;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn2_act_2_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 6;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn2_act_2_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 7;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn2_act_2_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 7;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn2_act_1_2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn2_act_1_2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn2_act_1_2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn2_act_1_2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_bn2_bn3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_bn2_bn3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_bn2_bn3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_bn2_bn3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn01_act_bn1_2_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 12;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn01_act_bn1_2_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 12;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn01_act_bn1_2_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 13;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn01_act_bn1_2_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 13;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn01_act_bn1_1_2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 10;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn01_act_bn1_1_2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 10;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn01_act_bn1_1_2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 11;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn01_act_bn1_1_2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 11;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn01_act_bn0_bn1_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 8;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn01_act_bn0_bn1_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 8;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn01_act_bn0_bn1_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 9;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn01_act_bn0_bn1_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 9;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn01_act_bn0_2_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 6;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn01_act_bn0_2_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 6;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn01_act_bn0_2_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 7;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn01_act_bn0_2_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 7;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_bn01_bn2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_bn01_bn2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_bn01_bn2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_bn01_bn2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn9_wts_OF_L2L1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn9_wts_OF_L2L1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn9_wts_OF_L2L1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn9_wts_OF_L2L1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn8_wts_OF_L2L1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn8_wts_OF_L2L1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn8_wts_OF_L2L1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn8_wts_OF_L2L1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn7_wts_OF_L2L1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn7_wts_OF_L2L1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn7_wts_OF_L2L1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn7_wts_OF_L2L1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn6_wts_OF_L2L1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn6_wts_OF_L2L1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn6_wts_OF_L2L1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn6_wts_OF_L2L1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_OF_11_L3L2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_OF_11_L3L2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_OF_11_L3L2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_OF_11_L3L2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_OF_11_L3L2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_OF_11_L3L2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_OF_11_L3L2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_OF_11_L3L2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn5_wts_OF_L2L1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn5_wts_OF_L2L1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn5_wts_OF_L2L1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn5_wts_OF_L2L1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn4_wts_OF_L2L1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn4_wts_OF_L2L1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn4_wts_OF_L2L1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn4_wts_OF_L2L1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn3_wts_OF_L2L1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn3_wts_OF_L2L1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn3_wts_OF_L2L1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn3_wts_OF_L2L1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn2_wts_OF_L2L1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn2_wts_OF_L2L1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn2_wts_OF_L2L1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn2_wts_OF_L2L1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn0_1_wts_OF_L2L1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn0_1_wts_OF_L2L1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_bn0_1_wts_OF_L2L1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_bn0_1_wts_OF_L2L1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_OF_01_L3L2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_OF_01_L3L2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_OF_01_L3L2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_OF_01_L3L2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_OF_01_L3L2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_OF_01_L3L2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_OF_01_L3L2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_OF_01_L3L2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_in_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_in_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_in_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_in_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_in_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_in_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_act_in_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_act_in_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_weightsInBN11_layer3_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_weightsInBN11_layer3_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_weightsInBN11_layer3_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_weightsInBN11_layer3_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_weightsInBN11_layer2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_weightsInBN11_layer2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_weightsInBN11_layer2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_weightsInBN11_layer2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_weightsInBN11_layer1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_weightsInBN11_layer1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_weightsInBN11_layer1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_weightsInBN11_layer1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_b11_L3L2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_b11_L3L2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_b11_L3L2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_b11_L3L2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_b11_L3L2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_b11_L3L2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_b11_L3L2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_b11_L3L2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_weightsInBN10_layer3_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_weightsInBN10_layer3_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_weightsInBN10_layer3_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_weightsInBN10_layer3_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_weightsInBN10_layer2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_weightsInBN10_layer2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_weightsInBN10_layer2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_weightsInBN10_layer2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_weightsInBN10_layer1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_weightsInBN10_layer1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_weightsInBN10_layer1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_weightsInBN10_layer1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_b10_L3L2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_b10_L3L2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_b10_L3L2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_b10_L3L2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_b10_L3L2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_b10_L3L2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_wts_b10_L3L2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_wts_b10_L3L2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,0), XAie_LockInit(id,value), timeout);
}
