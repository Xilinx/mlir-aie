
// This file was auto-generated by aiecc.py --aie-generate-xaie.

#ifndef MLIR_AIE_QUIET
#define __mlir_aie_verbose(x) x
#else
#define __mlir_aie_verbose(x)
#endif

// The following is a wrapper for the common "if(call() != 0) return 1" pattern.
// Use this only in functions that return int. If the call this wrapper is used
// on does not succeed, the expanded code will exit out of the function
// containing this macro with an error code.
#define __mlir_aie_try(x) do { \
  AieRC ret = (x); \
  if(ret != XAIE_OK) { \
    return x; \
  } \
} while(0)

static XAie_DmaDimDesc *__mlir_aie_alloc_dim_desc(size_t ndims) {
  XAie_DmaDimDesc *ret = NULL;
  ret = (XAie_DmaDimDesc *)calloc(sizeof(XAie_DmaDimDesc), ndims);
  if(NULL == ret) {
    __mlir_aie_verbose(fprintf(stderr, "Allocating DmaDimDesc failed.\n"));
  }
  return ret;
}

aie_libxaie_ctx_t* mlir_aie_init_libxaie() {
  aie_libxaie_ctx_t *ctx = new aie_libxaie_ctx_t;
  if (!ctx)
    return 0;
  ctx->AieConfigPtr.AieGen = XAIE_DEV_GEN_AIEML;
  ctx->AieConfigPtr.BaseAddr = 0x20000000000;
  ctx->AieConfigPtr.ColShift = 25;
  ctx->AieConfigPtr.RowShift = 20;
  ctx->AieConfigPtr.NumRows = 6;
  ctx->AieConfigPtr.NumCols = 2;
  ctx->AieConfigPtr.ShimRowNum = 0;
  ctx->AieConfigPtr.MemTileRowStart = 1;
  ctx->AieConfigPtr.MemTileNumRows = 1;
  //  ctx->AieConfigPtr.ReservedRowStart = XAIE_RES_TILE_ROW_START;
  //  ctx->AieConfigPtr.ReservedNumRows  = XAIE_RES_TILE_NUM_ROWS;
  ctx->AieConfigPtr.AieTileRowStart = 2;
  ctx->AieConfigPtr.AieTileNumRows = 4;
  ctx->AieConfigPtr.PartProp = {0};
  ctx->DevInst = {0};
  return ctx;
}

int mlir_aie_configure_cores(aie_libxaie_ctx_t* ctx) {
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(0,2)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(0,2), (const char*)"core_0_2.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 0, 2, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(1,2)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(1,2), (const char*)"core_1_2.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 1, 2, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(0,3)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(0,3), (const char*)"core_0_3.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 0, 3, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(1,3)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(1,3), (const char*)"core_1_3.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 1, 3, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(0,4)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(0,4), (const char*)"core_0_4.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 0, 4, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(1,4)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(1,4), (const char*)"core_1_4.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 1, 4, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(0,5)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(0,5), (const char*)"core_0_5.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 0, 5, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(1,5)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(1,5), (const char*)"core_1_5.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 1, 5, RC));
assert(RC == XAIE_OK);
}
return XAIE_OK;
} // mlir_aie_configure_cores

int mlir_aie_start_cores(aie_libxaie_ctx_t* ctx) {
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(1,5)));
return XAIE_OK;
} // mlir_aie_start_cores

int mlir_aie_configure_dmas(aie_libxaie_ctx_t* ctx) {
XAie_DmaDesc dma_tile02_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile02_bd0), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile02_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile02_bd0), /* addrA */ 0x1000,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile02_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile02_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile02_bd0), XAie_TileLoc(0,2),  /* bd */ 0));
XAie_DmaDesc dma_tile02_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile02_bd1), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile02_bd1), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile02_bd1), /* addrA */ 0x4C00,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile02_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile02_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile02_bd1), XAie_TileLoc(0,2),  /* bd */ 1));
XAie_DmaDesc dma_tile02_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile02_bd2), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile02_bd2), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile02_bd2), /* addrA */ 0x8000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile02_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile02_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile02_bd2), XAie_TileLoc(0,2),  /* bd */ 2));
XAie_DmaDesc dma_tile02_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile02_bd3), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile02_bd3), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile02_bd3), /* addrA */ 0xC000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile02_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile02_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile02_bd3), XAie_TileLoc(0,2),  /* bd */ 3));
XAie_DmaDesc dma_tile02_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile02_bd4), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile02_bd4), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile02_bd4), /* addrA */ 0x400,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile02_bd4),  /* nextbd */ 5,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile02_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile02_bd4), XAie_TileLoc(0,2),  /* bd */ 4));
XAie_DmaDesc dma_tile02_bd5;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile02_bd5), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile02_bd5), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile02_bd5), /* addrA */ 0x4000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile02_bd5),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile02_bd5)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile02_bd5), XAie_TileLoc(0,2),  /* bd */ 5));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,2), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,2), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,2), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,2), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,2), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,2), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile12_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile12_bd0), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile12_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile12_bd0), /* addrA */ 0x1000,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile12_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile12_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile12_bd0), XAie_TileLoc(1,2),  /* bd */ 0));
XAie_DmaDesc dma_tile12_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile12_bd1), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile12_bd1), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile12_bd1), /* addrA */ 0x4C00,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile12_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile12_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile12_bd1), XAie_TileLoc(1,2),  /* bd */ 1));
XAie_DmaDesc dma_tile12_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile12_bd2), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile12_bd2), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile12_bd2), /* addrA */ 0x8000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile12_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile12_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile12_bd2), XAie_TileLoc(1,2),  /* bd */ 2));
XAie_DmaDesc dma_tile12_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile12_bd3), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile12_bd3), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile12_bd3), /* addrA */ 0xC000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile12_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile12_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile12_bd3), XAie_TileLoc(1,2),  /* bd */ 3));
XAie_DmaDesc dma_tile12_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile12_bd4), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile12_bd4), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile12_bd4), /* addrA */ 0x400,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile12_bd4),  /* nextbd */ 5,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile12_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile12_bd4), XAie_TileLoc(1,2),  /* bd */ 4));
XAie_DmaDesc dma_tile12_bd5;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile12_bd5), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile12_bd5), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile12_bd5), /* addrA */ 0x4000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile12_bd5),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile12_bd5)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile12_bd5), XAie_TileLoc(1,2),  /* bd */ 5));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,2), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,2), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,2), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,2), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,2), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,2), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile03_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile03_bd0), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile03_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile03_bd0), /* addrA */ 0x1000,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile03_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile03_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile03_bd0), XAie_TileLoc(0,3),  /* bd */ 0));
XAie_DmaDesc dma_tile03_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile03_bd1), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile03_bd1), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile03_bd1), /* addrA */ 0x4C00,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile03_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile03_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile03_bd1), XAie_TileLoc(0,3),  /* bd */ 1));
XAie_DmaDesc dma_tile03_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile03_bd2), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile03_bd2), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile03_bd2), /* addrA */ 0x8000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile03_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile03_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile03_bd2), XAie_TileLoc(0,3),  /* bd */ 2));
XAie_DmaDesc dma_tile03_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile03_bd3), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile03_bd3), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile03_bd3), /* addrA */ 0xC000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile03_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile03_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile03_bd3), XAie_TileLoc(0,3),  /* bd */ 3));
XAie_DmaDesc dma_tile03_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile03_bd4), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile03_bd4), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile03_bd4), /* addrA */ 0x400,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile03_bd4),  /* nextbd */ 5,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile03_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile03_bd4), XAie_TileLoc(0,3),  /* bd */ 4));
XAie_DmaDesc dma_tile03_bd5;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile03_bd5), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile03_bd5), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile03_bd5), /* addrA */ 0x4000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile03_bd5),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile03_bd5)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile03_bd5), XAie_TileLoc(0,3),  /* bd */ 5));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,3), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,3), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,3), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,3), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,3), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,3), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile13_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile13_bd0), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile13_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile13_bd0), /* addrA */ 0x1000,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile13_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile13_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile13_bd0), XAie_TileLoc(1,3),  /* bd */ 0));
XAie_DmaDesc dma_tile13_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile13_bd1), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile13_bd1), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile13_bd1), /* addrA */ 0x4C00,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile13_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile13_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile13_bd1), XAie_TileLoc(1,3),  /* bd */ 1));
XAie_DmaDesc dma_tile13_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile13_bd2), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile13_bd2), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile13_bd2), /* addrA */ 0x8000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile13_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile13_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile13_bd2), XAie_TileLoc(1,3),  /* bd */ 2));
XAie_DmaDesc dma_tile13_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile13_bd3), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile13_bd3), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile13_bd3), /* addrA */ 0xC000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile13_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile13_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile13_bd3), XAie_TileLoc(1,3),  /* bd */ 3));
XAie_DmaDesc dma_tile13_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile13_bd4), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile13_bd4), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile13_bd4), /* addrA */ 0x400,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile13_bd4),  /* nextbd */ 5,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile13_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile13_bd4), XAie_TileLoc(1,3),  /* bd */ 4));
XAie_DmaDesc dma_tile13_bd5;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile13_bd5), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile13_bd5), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile13_bd5), /* addrA */ 0x4000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile13_bd5),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile13_bd5)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile13_bd5), XAie_TileLoc(1,3),  /* bd */ 5));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,3), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,3), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,3), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,3), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,3), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,3), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile04_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile04_bd0), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile04_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile04_bd0), /* addrA */ 0x1000,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile04_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile04_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile04_bd0), XAie_TileLoc(0,4),  /* bd */ 0));
XAie_DmaDesc dma_tile04_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile04_bd1), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile04_bd1), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile04_bd1), /* addrA */ 0x4C00,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile04_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile04_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile04_bd1), XAie_TileLoc(0,4),  /* bd */ 1));
XAie_DmaDesc dma_tile04_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile04_bd2), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile04_bd2), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile04_bd2), /* addrA */ 0x8000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile04_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile04_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile04_bd2), XAie_TileLoc(0,4),  /* bd */ 2));
XAie_DmaDesc dma_tile04_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile04_bd3), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile04_bd3), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile04_bd3), /* addrA */ 0xC000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile04_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile04_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile04_bd3), XAie_TileLoc(0,4),  /* bd */ 3));
XAie_DmaDesc dma_tile04_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile04_bd4), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile04_bd4), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile04_bd4), /* addrA */ 0x400,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile04_bd4),  /* nextbd */ 5,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile04_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile04_bd4), XAie_TileLoc(0,4),  /* bd */ 4));
XAie_DmaDesc dma_tile04_bd5;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile04_bd5), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile04_bd5), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile04_bd5), /* addrA */ 0x4000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile04_bd5),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile04_bd5)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile04_bd5), XAie_TileLoc(0,4),  /* bd */ 5));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,4), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,4), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,4), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,4), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,4), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,4), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile14_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile14_bd0), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile14_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile14_bd0), /* addrA */ 0x1000,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile14_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile14_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile14_bd0), XAie_TileLoc(1,4),  /* bd */ 0));
XAie_DmaDesc dma_tile14_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile14_bd1), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile14_bd1), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile14_bd1), /* addrA */ 0x4C00,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile14_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile14_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile14_bd1), XAie_TileLoc(1,4),  /* bd */ 1));
XAie_DmaDesc dma_tile14_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile14_bd2), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile14_bd2), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile14_bd2), /* addrA */ 0x8000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile14_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile14_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile14_bd2), XAie_TileLoc(1,4),  /* bd */ 2));
XAie_DmaDesc dma_tile14_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile14_bd3), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile14_bd3), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile14_bd3), /* addrA */ 0xC000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile14_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile14_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile14_bd3), XAie_TileLoc(1,4),  /* bd */ 3));
XAie_DmaDesc dma_tile14_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile14_bd4), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile14_bd4), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile14_bd4), /* addrA */ 0x400,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile14_bd4),  /* nextbd */ 5,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile14_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile14_bd4), XAie_TileLoc(1,4),  /* bd */ 4));
XAie_DmaDesc dma_tile14_bd5;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile14_bd5), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile14_bd5), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile14_bd5), /* addrA */ 0x4000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile14_bd5),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile14_bd5)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile14_bd5), XAie_TileLoc(1,4),  /* bd */ 5));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,4), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,4), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,4), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,4), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,4), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,4), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile05_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile05_bd0), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile05_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile05_bd0), /* addrA */ 0x1000,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile05_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile05_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile05_bd0), XAie_TileLoc(0,5),  /* bd */ 0));
XAie_DmaDesc dma_tile05_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile05_bd1), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile05_bd1), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile05_bd1), /* addrA */ 0x4C00,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile05_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile05_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile05_bd1), XAie_TileLoc(0,5),  /* bd */ 1));
XAie_DmaDesc dma_tile05_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile05_bd2), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile05_bd2), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile05_bd2), /* addrA */ 0x8000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile05_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile05_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile05_bd2), XAie_TileLoc(0,5),  /* bd */ 2));
XAie_DmaDesc dma_tile05_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile05_bd3), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile05_bd3), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile05_bd3), /* addrA */ 0xC000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile05_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile05_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile05_bd3), XAie_TileLoc(0,5),  /* bd */ 3));
XAie_DmaDesc dma_tile05_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile05_bd4), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile05_bd4), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile05_bd4), /* addrA */ 0x400,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile05_bd4),  /* nextbd */ 5,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile05_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile05_bd4), XAie_TileLoc(0,5),  /* bd */ 4));
XAie_DmaDesc dma_tile05_bd5;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile05_bd5), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile05_bd5), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile05_bd5), /* addrA */ 0x4000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile05_bd5),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile05_bd5)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile05_bd5), XAie_TileLoc(0,5),  /* bd */ 5));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,5), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,5), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,5), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,5), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,5), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,5), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile15_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile15_bd0), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile15_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile15_bd0), /* addrA */ 0x1000,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile15_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile15_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile15_bd0), XAie_TileLoc(1,5),  /* bd */ 0));
XAie_DmaDesc dma_tile15_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile15_bd1), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile15_bd1), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile15_bd1), /* addrA */ 0x4C00,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile15_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile15_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile15_bd1), XAie_TileLoc(1,5),  /* bd */ 1));
XAie_DmaDesc dma_tile15_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile15_bd2), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile15_bd2), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile15_bd2), /* addrA */ 0x8000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile15_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile15_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile15_bd2), XAie_TileLoc(1,5),  /* bd */ 2));
XAie_DmaDesc dma_tile15_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile15_bd3), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile15_bd3), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile15_bd3), /* addrA */ 0xC000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile15_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile15_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile15_bd3), XAie_TileLoc(1,5),  /* bd */ 3));
XAie_DmaDesc dma_tile15_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile15_bd4), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile15_bd4), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile15_bd4), /* addrA */ 0x400,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile15_bd4),  /* nextbd */ 5,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile15_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile15_bd4), XAie_TileLoc(1,5),  /* bd */ 4));
XAie_DmaDesc dma_tile15_bd5;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile15_bd5), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile15_bd5), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile15_bd5), /* addrA */ 0x4000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile15_bd5),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile15_bd5)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile15_bd5), XAie_TileLoc(1,5),  /* bd */ 5));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,5), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,5), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,5), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,5), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,5), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,5), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile01_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd0), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd0), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
XAie_DmaTensor dma_tile_0_1_bd_0_tensor = {};
dma_tile_0_1_bd_0_tensor.NumDim = 4;
dma_tile_0_1_bd_0_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_0_1_bd_0_tensor.Dim){
  return 1;
}
dma_tile_0_1_bd_0_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 64, /* Size */ 4};
dma_tile_0_1_bd_0_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 8};
dma_tile_0_1_bd_0_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 16, /* Size */ 4};
dma_tile_0_1_bd_0_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile01_bd0), &dma_tile_0_1_bd_0_tensor, 0x87800,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd0), XAie_TileLoc(0,1),  /* bd */ 0));
XAie_DmaDesc dma_tile01_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd1), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd1), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
XAie_DmaTensor dma_tile_0_1_bd_1_tensor = {};
dma_tile_0_1_bd_1_tensor.NumDim = 4;
dma_tile_0_1_bd_1_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_0_1_bd_1_tensor.Dim){
  return 1;
}
dma_tile_0_1_bd_1_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 64, /* Size */ 4};
dma_tile_0_1_bd_1_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 8};
dma_tile_0_1_bd_1_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 16, /* Size */ 4};
dma_tile_0_1_bd_1_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile01_bd1), &dma_tile_0_1_bd_1_tensor, 0x88000,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd1), XAie_TileLoc(0,1),  /* bd */ 1));
XAie_DmaDesc dma_tile01_bd24;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd24), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd24), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
XAie_DmaTensor dma_tile_0_1_bd_24_tensor = {};
dma_tile_0_1_bd_24_tensor.NumDim = 4;
dma_tile_0_1_bd_24_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_0_1_bd_24_tensor.Dim){
  return 1;
}
dma_tile_0_1_bd_24_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 64, /* Size */ 4};
dma_tile_0_1_bd_24_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 8};
dma_tile_0_1_bd_24_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 16, /* Size */ 4};
dma_tile_0_1_bd_24_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile01_bd24), &dma_tile_0_1_bd_24_tensor, 0x87C00,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd24),  /* nextbd */ 25,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd24)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd24), XAie_TileLoc(0,1),  /* bd */ 24));
XAie_DmaDesc dma_tile01_bd25;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd25), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd25), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
XAie_DmaTensor dma_tile_0_1_bd_25_tensor = {};
dma_tile_0_1_bd_25_tensor.NumDim = 4;
dma_tile_0_1_bd_25_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_0_1_bd_25_tensor.Dim){
  return 1;
}
dma_tile_0_1_bd_25_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 64, /* Size */ 4};
dma_tile_0_1_bd_25_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 8};
dma_tile_0_1_bd_25_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 16, /* Size */ 4};
dma_tile_0_1_bd_25_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile01_bd25), &dma_tile_0_1_bd_25_tensor, 0x88400,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd25),  /* nextbd */ 24,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd25)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd25), XAie_TileLoc(0,1),  /* bd */ 25));
XAie_DmaDesc dma_tile01_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd2), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd2), XAie_LockInit(64,-2),XAie_LockInit(65,2)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd2), /* addrA */ 0x87800,  /* len */ 2048));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd2), XAie_TileLoc(0,1),  /* bd */ 2));
XAie_DmaDesc dma_tile01_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd3), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd3), XAie_LockInit(64,-2),XAie_LockInit(65,2)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd3), /* addrA */ 0x88000,  /* len */ 2048));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd3), XAie_TileLoc(0,1),  /* bd */ 3));
XAie_DmaDesc dma_tile01_bd26;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd26), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd26), XAie_LockInit(66,-1),XAie_LockInit(67,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd26), /* addrA */ 0x86000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd26),  /* nextbd */ 27,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd26)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd26), XAie_TileLoc(0,1),  /* bd */ 26));
XAie_DmaDesc dma_tile01_bd27;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd27), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd27), XAie_LockInit(66,-1),XAie_LockInit(67,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd27), /* addrA */ 0x86C00,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd27),  /* nextbd */ 26,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd27)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd27), XAie_TileLoc(0,1),  /* bd */ 27));
XAie_DmaDesc dma_tile01_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd4), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd4), XAie_LockInit(67,-1),XAie_LockInit(66,1)));
XAie_DmaTensor dma_tile_0_1_bd_4_tensor = {};
dma_tile_0_1_bd_4_tensor.NumDim = 4;
dma_tile_0_1_bd_4_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_0_1_bd_4_tensor.Dim){
  return 1;
}
dma_tile_0_1_bd_4_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 96, /* Size */ 8};
dma_tile_0_1_bd_4_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 12};
dma_tile_0_1_bd_4_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 24, /* Size */ 4};
dma_tile_0_1_bd_4_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile01_bd4), &dma_tile_0_1_bd_4_tensor, 0x86000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd4),  /* nextbd */ 5,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd4), XAie_TileLoc(0,1),  /* bd */ 4));
XAie_DmaDesc dma_tile01_bd5;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd5), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd5), XAie_LockInit(67,-1),XAie_LockInit(66,1)));
XAie_DmaTensor dma_tile_0_1_bd_5_tensor = {};
dma_tile_0_1_bd_5_tensor.NumDim = 4;
dma_tile_0_1_bd_5_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_0_1_bd_5_tensor.Dim){
  return 1;
}
dma_tile_0_1_bd_5_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 96, /* Size */ 8};
dma_tile_0_1_bd_5_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 12};
dma_tile_0_1_bd_5_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 24, /* Size */ 4};
dma_tile_0_1_bd_5_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile01_bd5), &dma_tile_0_1_bd_5_tensor, 0x86C00,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd5),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd5)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd5), XAie_TileLoc(0,1),  /* bd */ 5));
XAie_DmaDesc dma_tile01_bd6;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd6), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd6), XAie_LockInit(68,-1),XAie_LockInit(69,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd6), /* addrA */ 0x80000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd6),  /* nextbd */ 7,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd6)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd6), XAie_TileLoc(0,1),  /* bd */ 6));
XAie_DmaDesc dma_tile01_bd7;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd7), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd7), XAie_LockInit(68,-1),XAie_LockInit(69,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd7), /* addrA */ 0x83000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd7),  /* nextbd */ 6,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd7)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd7), XAie_TileLoc(0,1),  /* bd */ 7));
XAie_DmaDesc dma_tile01_bd28;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd28), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd28), XAie_LockInit(68,-1),XAie_LockInit(69,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd28), /* addrA */ 0x80C00,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd28),  /* nextbd */ 29,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd28)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd28), XAie_TileLoc(0,1),  /* bd */ 28));
XAie_DmaDesc dma_tile01_bd29;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd29), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd29), XAie_LockInit(68,-1),XAie_LockInit(69,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd29), /* addrA */ 0x83C00,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd29),  /* nextbd */ 28,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd29)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd29), XAie_TileLoc(0,1),  /* bd */ 29));
XAie_DmaDesc dma_tile01_bd8;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd8), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd8), XAie_LockInit(68,-1),XAie_LockInit(69,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd8), /* addrA */ 0x81800,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd8),  /* nextbd */ 9,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd8)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd8), XAie_TileLoc(0,1),  /* bd */ 8));
XAie_DmaDesc dma_tile01_bd9;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd9), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd9), XAie_LockInit(68,-1),XAie_LockInit(69,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd9), /* addrA */ 0x84800,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd9),  /* nextbd */ 8,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd9)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd9), XAie_TileLoc(0,1),  /* bd */ 9));
XAie_DmaDesc dma_tile01_bd30;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd30), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd30), XAie_LockInit(68,-1),XAie_LockInit(69,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd30), /* addrA */ 0x82400,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd30),  /* nextbd */ 31,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd30)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd30), XAie_TileLoc(0,1),  /* bd */ 30));
XAie_DmaDesc dma_tile01_bd31;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd31), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd31), XAie_LockInit(68,-1),XAie_LockInit(69,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd31), /* addrA */ 0x85400,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd31),  /* nextbd */ 30,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd31)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd31), XAie_TileLoc(0,1),  /* bd */ 31));
XAie_DmaDesc dma_tile01_bd32;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd32), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd32), XAie_LockInit(69,-4),XAie_LockInit(68,4)));
XAie_DmaTensor dma_tile_0_1_bd_32_tensor = {};
dma_tile_0_1_bd_32_tensor.NumDim = 4;
dma_tile_0_1_bd_32_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_0_1_bd_32_tensor.Dim){
  return 1;
}
dma_tile_0_1_bd_32_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 192, /* Size */ 4};
dma_tile_0_1_bd_32_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 4, /* Size */ 4};
dma_tile_0_1_bd_32_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 16, /* Size */ 12};
dma_tile_0_1_bd_32_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 4};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile01_bd32), &dma_tile_0_1_bd_32_tensor, 0x80000,  /* len */ 12288));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd32),  /* nextbd */ 33,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd32)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd32), XAie_TileLoc(0,1),  /* bd */ 32));
XAie_DmaDesc dma_tile01_bd33;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd33), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd33), XAie_LockInit(69,-4),XAie_LockInit(68,4)));
XAie_DmaTensor dma_tile_0_1_bd_33_tensor = {};
dma_tile_0_1_bd_33_tensor.NumDim = 4;
dma_tile_0_1_bd_33_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_0_1_bd_33_tensor.Dim){
  return 1;
}
dma_tile_0_1_bd_33_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 192, /* Size */ 4};
dma_tile_0_1_bd_33_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 4, /* Size */ 4};
dma_tile_0_1_bd_33_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 16, /* Size */ 12};
dma_tile_0_1_bd_33_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 4};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile01_bd33), &dma_tile_0_1_bd_33_tensor, 0x83000,  /* len */ 12288));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd33),  /* nextbd */ 32,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd33)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd33), XAie_TileLoc(0,1),  /* bd */ 33));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */1, /* dmaDir */ DMA_MM2S, /* BdNum */24, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 1, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */26, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */2, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 2, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */2, /* dmaDir */ DMA_S2MM, /* BdNum */6, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 2, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */3, /* dmaDir */ DMA_S2MM, /* BdNum */28, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 3, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */4, /* dmaDir */ DMA_S2MM, /* BdNum */8, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 4, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */5, /* dmaDir */ DMA_S2MM, /* BdNum */30, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 5, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */3, /* dmaDir */ DMA_MM2S, /* BdNum */32, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 3, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile11_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd0), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd0), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
XAie_DmaTensor dma_tile_1_1_bd_0_tensor = {};
dma_tile_1_1_bd_0_tensor.NumDim = 4;
dma_tile_1_1_bd_0_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_1_1_bd_0_tensor.Dim){
  return 1;
}
dma_tile_1_1_bd_0_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 64, /* Size */ 4};
dma_tile_1_1_bd_0_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 8};
dma_tile_1_1_bd_0_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 16, /* Size */ 4};
dma_tile_1_1_bd_0_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile11_bd0), &dma_tile_1_1_bd_0_tensor, 0x87800,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd0), XAie_TileLoc(1,1),  /* bd */ 0));
XAie_DmaDesc dma_tile11_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd1), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd1), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
XAie_DmaTensor dma_tile_1_1_bd_1_tensor = {};
dma_tile_1_1_bd_1_tensor.NumDim = 4;
dma_tile_1_1_bd_1_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_1_1_bd_1_tensor.Dim){
  return 1;
}
dma_tile_1_1_bd_1_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 64, /* Size */ 4};
dma_tile_1_1_bd_1_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 8};
dma_tile_1_1_bd_1_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 16, /* Size */ 4};
dma_tile_1_1_bd_1_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile11_bd1), &dma_tile_1_1_bd_1_tensor, 0x88000,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd1), XAie_TileLoc(1,1),  /* bd */ 1));
XAie_DmaDesc dma_tile11_bd24;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd24), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd24), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
XAie_DmaTensor dma_tile_1_1_bd_24_tensor = {};
dma_tile_1_1_bd_24_tensor.NumDim = 4;
dma_tile_1_1_bd_24_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_1_1_bd_24_tensor.Dim){
  return 1;
}
dma_tile_1_1_bd_24_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 64, /* Size */ 4};
dma_tile_1_1_bd_24_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 8};
dma_tile_1_1_bd_24_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 16, /* Size */ 4};
dma_tile_1_1_bd_24_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile11_bd24), &dma_tile_1_1_bd_24_tensor, 0x87C00,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd24),  /* nextbd */ 25,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd24)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd24), XAie_TileLoc(1,1),  /* bd */ 24));
XAie_DmaDesc dma_tile11_bd25;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd25), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd25), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
XAie_DmaTensor dma_tile_1_1_bd_25_tensor = {};
dma_tile_1_1_bd_25_tensor.NumDim = 4;
dma_tile_1_1_bd_25_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_1_1_bd_25_tensor.Dim){
  return 1;
}
dma_tile_1_1_bd_25_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 64, /* Size */ 4};
dma_tile_1_1_bd_25_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 8};
dma_tile_1_1_bd_25_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 16, /* Size */ 4};
dma_tile_1_1_bd_25_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile11_bd25), &dma_tile_1_1_bd_25_tensor, 0x88400,  /* len */ 1024));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd25),  /* nextbd */ 24,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd25)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd25), XAie_TileLoc(1,1),  /* bd */ 25));
XAie_DmaDesc dma_tile11_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd2), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd2), XAie_LockInit(64,-2),XAie_LockInit(65,2)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd2), /* addrA */ 0x87800,  /* len */ 2048));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd2), XAie_TileLoc(1,1),  /* bd */ 2));
XAie_DmaDesc dma_tile11_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd3), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd3), XAie_LockInit(64,-2),XAie_LockInit(65,2)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd3), /* addrA */ 0x88000,  /* len */ 2048));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd3), XAie_TileLoc(1,1),  /* bd */ 3));
XAie_DmaDesc dma_tile11_bd26;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd26), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd26), XAie_LockInit(66,-1),XAie_LockInit(67,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd26), /* addrA */ 0x86000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd26),  /* nextbd */ 27,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd26)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd26), XAie_TileLoc(1,1),  /* bd */ 26));
XAie_DmaDesc dma_tile11_bd27;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd27), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd27), XAie_LockInit(66,-1),XAie_LockInit(67,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd27), /* addrA */ 0x86C00,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd27),  /* nextbd */ 26,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd27)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd27), XAie_TileLoc(1,1),  /* bd */ 27));
XAie_DmaDesc dma_tile11_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd4), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd4), XAie_LockInit(67,-1),XAie_LockInit(66,1)));
XAie_DmaTensor dma_tile_1_1_bd_4_tensor = {};
dma_tile_1_1_bd_4_tensor.NumDim = 4;
dma_tile_1_1_bd_4_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_1_1_bd_4_tensor.Dim){
  return 1;
}
dma_tile_1_1_bd_4_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 96, /* Size */ 8};
dma_tile_1_1_bd_4_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 12};
dma_tile_1_1_bd_4_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 24, /* Size */ 4};
dma_tile_1_1_bd_4_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile11_bd4), &dma_tile_1_1_bd_4_tensor, 0x86000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd4),  /* nextbd */ 5,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd4), XAie_TileLoc(1,1),  /* bd */ 4));
XAie_DmaDesc dma_tile11_bd5;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd5), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd5), XAie_LockInit(67,-1),XAie_LockInit(66,1)));
XAie_DmaTensor dma_tile_1_1_bd_5_tensor = {};
dma_tile_1_1_bd_5_tensor.NumDim = 4;
dma_tile_1_1_bd_5_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_1_1_bd_5_tensor.Dim){
  return 1;
}
dma_tile_1_1_bd_5_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 96, /* Size */ 8};
dma_tile_1_1_bd_5_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 12};
dma_tile_1_1_bd_5_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 24, /* Size */ 4};
dma_tile_1_1_bd_5_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile11_bd5), &dma_tile_1_1_bd_5_tensor, 0x86C00,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd5),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd5)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd5), XAie_TileLoc(1,1),  /* bd */ 5));
XAie_DmaDesc dma_tile11_bd6;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd6), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd6), XAie_LockInit(68,-1),XAie_LockInit(69,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd6), /* addrA */ 0x80000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd6),  /* nextbd */ 7,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd6)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd6), XAie_TileLoc(1,1),  /* bd */ 6));
XAie_DmaDesc dma_tile11_bd7;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd7), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd7), XAie_LockInit(68,-1),XAie_LockInit(69,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd7), /* addrA */ 0x83000,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd7),  /* nextbd */ 6,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd7)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd7), XAie_TileLoc(1,1),  /* bd */ 7));
XAie_DmaDesc dma_tile11_bd28;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd28), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd28), XAie_LockInit(68,-1),XAie_LockInit(69,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd28), /* addrA */ 0x80C00,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd28),  /* nextbd */ 29,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd28)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd28), XAie_TileLoc(1,1),  /* bd */ 28));
XAie_DmaDesc dma_tile11_bd29;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd29), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd29), XAie_LockInit(68,-1),XAie_LockInit(69,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd29), /* addrA */ 0x83C00,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd29),  /* nextbd */ 28,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd29)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd29), XAie_TileLoc(1,1),  /* bd */ 29));
XAie_DmaDesc dma_tile11_bd8;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd8), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd8), XAie_LockInit(68,-1),XAie_LockInit(69,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd8), /* addrA */ 0x81800,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd8),  /* nextbd */ 9,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd8)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd8), XAie_TileLoc(1,1),  /* bd */ 8));
XAie_DmaDesc dma_tile11_bd9;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd9), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd9), XAie_LockInit(68,-1),XAie_LockInit(69,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd9), /* addrA */ 0x84800,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd9),  /* nextbd */ 8,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd9)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd9), XAie_TileLoc(1,1),  /* bd */ 9));
XAie_DmaDesc dma_tile11_bd30;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd30), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd30), XAie_LockInit(68,-1),XAie_LockInit(69,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd30), /* addrA */ 0x82400,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd30),  /* nextbd */ 31,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd30)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd30), XAie_TileLoc(1,1),  /* bd */ 30));
XAie_DmaDesc dma_tile11_bd31;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd31), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd31), XAie_LockInit(68,-1),XAie_LockInit(69,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd31), /* addrA */ 0x85400,  /* len */ 3072));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd31),  /* nextbd */ 30,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd31)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd31), XAie_TileLoc(1,1),  /* bd */ 31));
XAie_DmaDesc dma_tile11_bd32;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd32), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd32), XAie_LockInit(69,-4),XAie_LockInit(68,4)));
XAie_DmaTensor dma_tile_1_1_bd_32_tensor = {};
dma_tile_1_1_bd_32_tensor.NumDim = 4;
dma_tile_1_1_bd_32_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_1_1_bd_32_tensor.Dim){
  return 1;
}
dma_tile_1_1_bd_32_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 192, /* Size */ 4};
dma_tile_1_1_bd_32_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 4, /* Size */ 4};
dma_tile_1_1_bd_32_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 16, /* Size */ 12};
dma_tile_1_1_bd_32_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 4};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile11_bd32), &dma_tile_1_1_bd_32_tensor, 0x80000,  /* len */ 12288));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd32),  /* nextbd */ 33,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd32)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd32), XAie_TileLoc(1,1),  /* bd */ 32));
XAie_DmaDesc dma_tile11_bd33;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd33), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd33), XAie_LockInit(69,-4),XAie_LockInit(68,4)));
XAie_DmaTensor dma_tile_1_1_bd_33_tensor = {};
dma_tile_1_1_bd_33_tensor.NumDim = 4;
dma_tile_1_1_bd_33_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_1_1_bd_33_tensor.Dim){
  return 1;
}
dma_tile_1_1_bd_33_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 192, /* Size */ 4};
dma_tile_1_1_bd_33_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 4, /* Size */ 4};
dma_tile_1_1_bd_33_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 16, /* Size */ 12};
dma_tile_1_1_bd_33_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 4};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile11_bd33), &dma_tile_1_1_bd_33_tensor, 0x83000,  /* len */ 12288));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd33),  /* nextbd */ 32,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd33)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd33), XAie_TileLoc(1,1),  /* bd */ 33));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */1, /* dmaDir */ DMA_MM2S, /* BdNum */24, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 1, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */26, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */2, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 2, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */2, /* dmaDir */ DMA_S2MM, /* BdNum */6, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 2, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */3, /* dmaDir */ DMA_S2MM, /* BdNum */28, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 3, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */4, /* dmaDir */ DMA_S2MM, /* BdNum */8, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 4, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */5, /* dmaDir */ DMA_S2MM, /* BdNum */30, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 5, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */3, /* dmaDir */ DMA_MM2S, /* BdNum */32, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 3, /* dmaDir */ DMA_MM2S));
return XAIE_OK;
} // mlir_aie_configure_dmas

int mlir_aie_initialize_locks(aie_libxaie_ctx_t* ctx) {
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(4, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(4, 8)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(4, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(4, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(4, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(4, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(4, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(4, 8)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(4, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(4, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(4, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(4, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(2, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(2, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(2, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(2, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(2, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(2, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(2, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(2, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(2, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(2, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(2, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(2, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(0, 4)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(0, 4)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(0, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(0, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(0, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(0, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(0, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(0, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(0, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(0, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(1, 0)));
return XAIE_OK;
} // mlir_aie_initialize_locks
int mlir_aie_configure_switchboxes(aie_libxaie_ctx_t* ctx) {
  int x, y;
// Core Stream Switch column 0 row 1
x = 0;
y = 1;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 1, NORTH, 5));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 2, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 1, DMA, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 2, DMA, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, DMA, 4));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 3, DMA, 5));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 3, SOUTH, 2));
// Core Stream Switch column 0 row 2
x = 0;
y = 2;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, EAST, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, EAST, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, NORTH, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, NORTH, 5));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 1, SOUTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, SOUTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 2, SOUTH, 3));
// Core Stream Switch column 1 row 2
x = 1;
y = 2;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 2, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 3, NORTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, NORTH, 4));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 3, SOUTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, SOUTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 2, SOUTH, 2));
// Core Stream Switch column 0 row 3
x = 0;
y = 3;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 1, SOUTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 2, SOUTH, 2));
// Core Stream Switch column 1 row 3
x = 1;
y = 3;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 4, NORTH, 5));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, NORTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 1, SOUTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 2, SOUTH, 2));
// Core Stream Switch column 0 row 4
x = 0;
y = 4;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 3, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, NORTH, 5));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, SOUTH, 2));
// Core Stream Switch column 1 row 1
x = 1;
y = 1;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 1, NORTH, 5));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 2, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 3, DMA, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 1, DMA, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, DMA, 4));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 2, DMA, 5));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 3, SOUTH, 2));
// Core Stream Switch column 1 row 4
x = 1;
y = 4;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, WEST, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, SOUTH, 2));
// Core Stream Switch column 0 row 5
x = 0;
y = 5;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 0));
// Core Stream Switch column 1 row 5
x = 1;
y = 5;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, WEST, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 0));
// Core Stream Switch column 0 row 0
x = 0;
y = 0;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 7, NORTH, 5));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 2, SOUTH, 2));
__mlir_aie_try(XAie_StrmPktSwMstrPortEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, /* drop_header */ XAIE_SS_PKT_DONOT_DROP_HEADER, /* arbiter */ 5, /* MSelEn */ 0x8));
__mlir_aie_try(XAie_StrmPktSwSlavePortEnable(&(ctx->DevInst), XAie_TileLoc(x,y), CTRL, 0));
__mlir_aie_try(XAie_StrmPktSwSlaveSlotEnable(&(ctx->DevInst), XAie_TileLoc(x,y), CTRL, 0, /* slot */ 0, /* packet */ XAie_PacketInit(15,0), /* mask */ 0x1F, /* msel */ 3, /* arbiter */ 5));
// Core Stream Switch column 1 row 0
x = 1;
y = 0;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 7, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 2, SOUTH, 2));
__mlir_aie_try(XAie_StrmPktSwMstrPortEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, /* drop_header */ XAIE_SS_PKT_DONOT_DROP_HEADER, /* arbiter */ 5, /* MSelEn */ 0x8));
__mlir_aie_try(XAie_StrmPktSwSlavePortEnable(&(ctx->DevInst), XAie_TileLoc(x,y), CTRL, 0));
__mlir_aie_try(XAie_StrmPktSwSlaveSlotEnable(&(ctx->DevInst), XAie_TileLoc(x,y), CTRL, 0, /* slot */ 0, /* packet */ XAie_PacketInit(15,0), /* mask */ 0x1F, /* msel */ 3, /* arbiter */ 5));
// ShimMux column 0 row 0
// NOTE ShimMux always connects from the south as directions are defined relative to the tile stream switch
x = 0;
y = 0;
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 3));
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 7));
__mlir_aie_try(XAie_EnableAieToShimDmaStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 2));
// ShimMux column 1 row 0
// NOTE ShimMux always connects from the south as directions are defined relative to the tile stream switch
x = 1;
y = 0;
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 3));
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 7));
__mlir_aie_try(XAie_EnableAieToShimDmaStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 2));
return XAIE_OK;
} // mlir_aie_configure_switchboxes

int mlir_aie_configure_cascade(aie_libxaie_ctx_t* ctx) {
return XAIE_OK;
} // mlir_aie_configure_cascade

const int C_L1L2_0_3_buff_0_offset = 1024;
int32_t mlir_aie_read_buffer_C_L1L2_0_3_buff_0(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(0,5), C_L1L2_0_3_buff_0_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_C_L1L2_0_3_buff_0(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(0,5), C_L1L2_0_3_buff_0_offset + (index*4), int_value);
return rc;
}
const int C_L1L2_0_3_buff_1_offset = 16384;
int32_t mlir_aie_read_buffer_C_L1L2_0_3_buff_1(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(0,5), C_L1L2_0_3_buff_1_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_C_L1L2_0_3_buff_1(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(0,5), C_L1L2_0_3_buff_1_offset + (index*4), int_value);
return rc;
}
// buffer B_L2L1_0_3_cons_buff_0 with unsupported type memref<32x48xi16>;
// buffer B_L2L1_0_3_cons_buff_1 with unsupported type memref<32x48xi16>;
// buffer A_L2L1_3_0_cons_buff_0 with unsupported type memref<16x32xi16>;
// buffer A_L2L1_3_0_cons_buff_1 with unsupported type memref<16x32xi16>;
const int C_L1L2_1_2_buff_0_offset = 1024;
int32_t mlir_aie_read_buffer_C_L1L2_1_2_buff_0(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(1,4), C_L1L2_1_2_buff_0_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_C_L1L2_1_2_buff_0(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(1,4), C_L1L2_1_2_buff_0_offset + (index*4), int_value);
return rc;
}
const int C_L1L2_1_2_buff_1_offset = 16384;
int32_t mlir_aie_read_buffer_C_L1L2_1_2_buff_1(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(1,4), C_L1L2_1_2_buff_1_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_C_L1L2_1_2_buff_1(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(1,4), C_L1L2_1_2_buff_1_offset + (index*4), int_value);
return rc;
}
// buffer B_L2L1_1_2_cons_buff_0 with unsupported type memref<32x48xi16>;
// buffer B_L2L1_1_2_cons_buff_1 with unsupported type memref<32x48xi16>;
// buffer A_L2L1_2_1_cons_buff_0 with unsupported type memref<16x32xi16>;
// buffer A_L2L1_2_1_cons_buff_1 with unsupported type memref<16x32xi16>;
const int C_L1L2_1_3_buff_0_offset = 1024;
int32_t mlir_aie_read_buffer_C_L1L2_1_3_buff_0(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(1,5), C_L1L2_1_3_buff_0_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_C_L1L2_1_3_buff_0(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(1,5), C_L1L2_1_3_buff_0_offset + (index*4), int_value);
return rc;
}
const int C_L1L2_1_3_buff_1_offset = 16384;
int32_t mlir_aie_read_buffer_C_L1L2_1_3_buff_1(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(1,5), C_L1L2_1_3_buff_1_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_C_L1L2_1_3_buff_1(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(1,5), C_L1L2_1_3_buff_1_offset + (index*4), int_value);
return rc;
}
// buffer B_L2L1_1_3_cons_buff_0 with unsupported type memref<32x48xi16>;
// buffer B_L2L1_1_3_cons_buff_1 with unsupported type memref<32x48xi16>;
// buffer A_L2L1_3_1_cons_buff_0 with unsupported type memref<16x32xi16>;
// buffer A_L2L1_3_1_cons_buff_1 with unsupported type memref<16x32xi16>;
const int C_L1L2_0_2_buff_0_offset = 1024;
int32_t mlir_aie_read_buffer_C_L1L2_0_2_buff_0(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(0,4), C_L1L2_0_2_buff_0_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_C_L1L2_0_2_buff_0(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(0,4), C_L1L2_0_2_buff_0_offset + (index*4), int_value);
return rc;
}
const int C_L1L2_0_2_buff_1_offset = 16384;
int32_t mlir_aie_read_buffer_C_L1L2_0_2_buff_1(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(0,4), C_L1L2_0_2_buff_1_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_C_L1L2_0_2_buff_1(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(0,4), C_L1L2_0_2_buff_1_offset + (index*4), int_value);
return rc;
}
// buffer B_L2L1_0_2_cons_buff_0 with unsupported type memref<32x48xi16>;
// buffer B_L2L1_0_2_cons_buff_1 with unsupported type memref<32x48xi16>;
// buffer A_L2L1_2_0_cons_buff_0 with unsupported type memref<16x32xi16>;
// buffer A_L2L1_2_0_cons_buff_1 with unsupported type memref<16x32xi16>;
const int C_L1L2_0_1_buff_0_offset = 1024;
int32_t mlir_aie_read_buffer_C_L1L2_0_1_buff_0(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(0,3), C_L1L2_0_1_buff_0_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_C_L1L2_0_1_buff_0(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(0,3), C_L1L2_0_1_buff_0_offset + (index*4), int_value);
return rc;
}
const int C_L1L2_0_1_buff_1_offset = 16384;
int32_t mlir_aie_read_buffer_C_L1L2_0_1_buff_1(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(0,3), C_L1L2_0_1_buff_1_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_C_L1L2_0_1_buff_1(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(0,3), C_L1L2_0_1_buff_1_offset + (index*4), int_value);
return rc;
}
// buffer B_L2L1_0_1_cons_buff_0 with unsupported type memref<32x48xi16>;
// buffer B_L2L1_0_1_cons_buff_1 with unsupported type memref<32x48xi16>;
// buffer A_L2L1_1_0_cons_buff_0 with unsupported type memref<16x32xi16>;
// buffer A_L2L1_1_0_cons_buff_1 with unsupported type memref<16x32xi16>;
const int C_L1L2_0_0_buff_0_offset = 1024;
int32_t mlir_aie_read_buffer_C_L1L2_0_0_buff_0(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(0,2), C_L1L2_0_0_buff_0_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_C_L1L2_0_0_buff_0(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(0,2), C_L1L2_0_0_buff_0_offset + (index*4), int_value);
return rc;
}
const int C_L1L2_0_0_buff_1_offset = 16384;
int32_t mlir_aie_read_buffer_C_L1L2_0_0_buff_1(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(0,2), C_L1L2_0_0_buff_1_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_C_L1L2_0_0_buff_1(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(0,2), C_L1L2_0_0_buff_1_offset + (index*4), int_value);
return rc;
}
// buffer B_L2L1_0_0_cons_buff_0 with unsupported type memref<32x48xi16>;
// buffer B_L2L1_0_0_cons_buff_1 with unsupported type memref<32x48xi16>;
// buffer A_L2L1_0_0_cons_buff_0 with unsupported type memref<16x32xi16>;
// buffer A_L2L1_0_0_cons_buff_1 with unsupported type memref<16x32xi16>;
const int C_L1L2_1_1_buff_0_offset = 1024;
int32_t mlir_aie_read_buffer_C_L1L2_1_1_buff_0(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(1,3), C_L1L2_1_1_buff_0_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_C_L1L2_1_1_buff_0(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(1,3), C_L1L2_1_1_buff_0_offset + (index*4), int_value);
return rc;
}
const int C_L1L2_1_1_buff_1_offset = 16384;
int32_t mlir_aie_read_buffer_C_L1L2_1_1_buff_1(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(1,3), C_L1L2_1_1_buff_1_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_C_L1L2_1_1_buff_1(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(1,3), C_L1L2_1_1_buff_1_offset + (index*4), int_value);
return rc;
}
// buffer B_L2L1_1_1_cons_buff_0 with unsupported type memref<32x48xi16>;
// buffer B_L2L1_1_1_cons_buff_1 with unsupported type memref<32x48xi16>;
// buffer A_L2L1_1_1_cons_buff_0 with unsupported type memref<16x32xi16>;
// buffer A_L2L1_1_1_cons_buff_1 with unsupported type memref<16x32xi16>;
const int C_L1L2_1_0_buff_0_offset = 1024;
int32_t mlir_aie_read_buffer_C_L1L2_1_0_buff_0(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(1,2), C_L1L2_1_0_buff_0_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_C_L1L2_1_0_buff_0(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(1,2), C_L1L2_1_0_buff_0_offset + (index*4), int_value);
return rc;
}
const int C_L1L2_1_0_buff_1_offset = 16384;
int32_t mlir_aie_read_buffer_C_L1L2_1_0_buff_1(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(1,2), C_L1L2_1_0_buff_1_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_C_L1L2_1_0_buff_1(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(1,2), C_L1L2_1_0_buff_1_offset + (index*4), int_value);
return rc;
}
// buffer B_L2L1_1_0_cons_buff_0 with unsupported type memref<32x48xi16>;
// buffer B_L2L1_1_0_cons_buff_1 with unsupported type memref<32x48xi16>;
// buffer A_L2L1_0_1_cons_buff_0 with unsupported type memref<16x32xi16>;
// buffer A_L2L1_0_1_cons_buff_1 with unsupported type memref<16x32xi16>;
const int C_L2L3_0_buff_0_offset = 0;
int32_t mlir_aie_read_buffer_C_L2L3_0_buff_0(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(0,1), C_L2L3_0_buff_0_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_C_L2L3_0_buff_0(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(0,1), C_L2L3_0_buff_0_offset + (index*4), int_value);
return rc;
}
const int C_L2L3_0_buff_1_offset = 12288;
int32_t mlir_aie_read_buffer_C_L2L3_0_buff_1(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(0,1), C_L2L3_0_buff_1_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_C_L2L3_0_buff_1(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(0,1), C_L2L3_0_buff_1_offset + (index*4), int_value);
return rc;
}
// buffer B_L3L2_0_cons_buff_0 with unsupported type memref<1536xi16>;
// buffer B_L3L2_0_cons_buff_1 with unsupported type memref<1536xi16>;
// buffer A_L3L2_0_cons_buff_0 with unsupported type memref<1024xi16>;
// buffer A_L3L2_0_cons_buff_1 with unsupported type memref<1024xi16>;
const int C_L2L3_1_buff_0_offset = 0;
int32_t mlir_aie_read_buffer_C_L2L3_1_buff_0(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(1,1), C_L2L3_1_buff_0_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_C_L2L3_1_buff_0(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(1,1), C_L2L3_1_buff_0_offset + (index*4), int_value);
return rc;
}
const int C_L2L3_1_buff_1_offset = 12288;
int32_t mlir_aie_read_buffer_C_L2L3_1_buff_1(aie_libxaie_ctx_t* ctx, int index) {
u32 value; auto rc = XAie_DataMemRdWord(&(ctx->DevInst), XAie_TileLoc(1,1), C_L2L3_1_buff_1_offset + (index*4), &value);
  return value;
}
int mlir_aie_write_buffer_C_L2L3_1_buff_1(aie_libxaie_ctx_t* ctx, int index, int32_t value) {
  int32_t int_value = value;
AieRC rc =    XAie_DataMemWrWord(&(ctx->DevInst), XAie_TileLoc(1,1), C_L2L3_1_buff_1_offset + (index*4), int_value);
return rc;
}
// buffer B_L3L2_1_cons_buff_0 with unsupported type memref<1536xi16>;
// buffer B_L3L2_1_cons_buff_1 with unsupported type memref<1536xi16>;
// buffer A_L3L2_1_cons_buff_0 with unsupported type memref<1024xi16>;
// buffer A_L3L2_1_cons_buff_1 with unsupported type memref<1024xi16>;
int mlir_aie_acquire_C_L2L3_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L2L3_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L2L3_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L2L3_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L2L3_1_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L2L3_1_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L2L3_1_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L2L3_1_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L1L2_1_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L1L2_1_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L1L2_1_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L1L2_1_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L1L2_1_2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L1L2_1_2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L1L2_1_2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L1L2_1_2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L1L2_1_1_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L1L2_1_1_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L1L2_1_1_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L1L2_1_1_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L1L2_1_0_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L1L2_1_0_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L1L2_1_0_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L1L2_1_0_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L2L3_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L2L3_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L2L3_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L2L3_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L2L3_0_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L2L3_0_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L2L3_0_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L2L3_0_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L1L2_0_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L1L2_0_3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L1L2_0_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L1L2_0_3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L1L2_0_2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L1L2_0_2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L1L2_0_2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L1L2_0_2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L1L2_0_1_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L1L2_0_1_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L1L2_0_1_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L1L2_0_1_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L1L2_0_0_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L1L2_0_0_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_C_L1L2_0_0_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_C_L1L2_0_0_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L2L1_1_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L2L1_1_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L2L1_1_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L2L1_1_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L2L1_1_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L2L1_1_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L2L1_1_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L2L1_1_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L2L1_1_2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L2L1_1_2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L2L1_1_2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L2L1_1_2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L2L1_1_3_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L2L1_1_3_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L2L1_1_3_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L2L1_1_3_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L3L2_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L3L2_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L3L2_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L3L2_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L3L2_1_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L3L2_1_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L3L2_1_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L3L2_1_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L2L1_0_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L2L1_0_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L2L1_0_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L2L1_0_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L2L1_0_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L2L1_0_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L2L1_0_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L2L1_0_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L2L1_0_2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L2L1_0_2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L2L1_0_2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L2L1_0_2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L2L1_0_3_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L2L1_0_3_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L2L1_0_3_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L2L1_0_3_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L3L2_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L3L2_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L3L2_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L3L2_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L3L2_0_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L3L2_0_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_B_L3L2_0_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_B_L3L2_0_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L3L2_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L3L2_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L3L2_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L3L2_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L3L2_1_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L3L2_1_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L3L2_1_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L3L2_1_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L3L2_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L3L2_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L3L2_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L3L2_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L3L2_0_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L3L2_0_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L3L2_0_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L3L2_0_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L2L1_3_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L2L1_3_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L2L1_3_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L2L1_3_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L2L1_3_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L2L1_3_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L2L1_3_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L2L1_3_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L2L1_2_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L2L1_2_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L2L1_2_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L2L1_2_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L2L1_2_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L2L1_2_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L2L1_2_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L2L1_2_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L2L1_1_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L2L1_1_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L2L1_1_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L2L1_1_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L2L1_1_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L2L1_1_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L2L1_1_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L2L1_1_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L2L1_0_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L2L1_0_0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L2L1_0_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L2L1_0_0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L2L1_0_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L2L1_0_1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_A_L2L1_0_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_A_L2L1_0_1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
